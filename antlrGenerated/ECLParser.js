// Generated from ECL.g4 by ANTLR 4.7.2
// jshint ignore: start
var antlr4 = require('antlr4/index')
var ECLListener = require('./ECLListener').ECLListener
var ECLVisitor = require('./ECLVisitor').ECLVisitor

var grammarFileName = 'ECL.g4'

var serializedATN = [
  '\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964',
  '\u0003e\u02b0\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004\t',
  '\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007\u0004',
  '\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f\u0004',
  '\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010\u0004',
  '\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014\t',
  '\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017\u0004',
  '\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b\t',
  '\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e\u0004',
  '\u001f\t\u001f\u0004 \t \u0004!\t!\u0004"\t"\u0004#\t#\u0004$\t$\u0004',
  "%\t%\u0004&\t&\u0004'\t'\u0004(\t(\u0004)\t)\u0004*\t*\u0004+\t+\u0004",
  ',\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u00042\t2\u0004',
  '3\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u00049\t9\u0004',
  ':\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004@\t@\u0004',
  'A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004G\tG\u0003',
  '\u0002\u0003\u0002\u0003\u0002\u0003\u0002\u0003\u0002\u0005\u0002\u0094',
  '\n\u0002\u0003\u0002\u0003\u0002\u0003\u0003\u0003\u0003\u0003\u0003',
  '\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0004\u0003\u0004\u0003\u0004',
  '\u0005\u0004\u00a1\n\u0004\u0003\u0005\u0003\u0005\u0003\u0005\u0003',
  '\u0005\u0003\u0005\u0003\u0005\u0006\u0005\u00a9\n\u0005\r\u0005\u000e',
  '\u0005\u00aa\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006',
  '\u0003\u0006\u0006\u0006\u00b3\n\u0006\r\u0006\u000e\u0006\u00b4\u0003',
  '\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003',
  '\b\u0003\b\u0003\b\u0003\b\u0006\b\u00c1\n\b\r\b\u000e\b\u00c2\u0003',
  '\t\u0003\t\u0003\t\u0003\t\u0003\n\u0003\n\u0003\n\u0005\n\u00cc\n\n',
  '\u0003\n\u0003\n\u0003\n\u0005\n\u00d1\n\n\u0003\n\u0003\n\u0003\n\u0003',
  '\n\u0003\n\u0003\n\u0003\n\u0005\n\u00da\n\n\u0003\u000b\u0003\u000b',
  '\u0005\u000b\u00de\n\u000b\u0003\f\u0003\f\u0003\r\u0003\r\u0003\u000e',
  '\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e',
  '\u0003\u000e\u0005\u000e\u00ec\n\u000e\u0003\u000f\u0003\u000f\u0003',
  '\u0010\u0006\u0010\u00f1\n\u0010\r\u0010\u000e\u0010\u00f2\u0003\u0010',
  '\u0006\u0010\u00f6\n\u0010\r\u0010\u000e\u0010\u00f7\u0003\u0010\u0006',
  '\u0010\u00fb\n\u0010\r\u0010\u000e\u0010\u00fc\u0007\u0010\u00ff\n\u0010',
  '\f\u0010\u000e\u0010\u0102\u000b\u0010\u0003\u0011\u0003\u0011\u0003',
  '\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0005',
  '\u0012\u010c\n\u0012\u0003\u0013\u0003\u0013\u0003\u0014\u0003\u0014',
  '\u0003\u0014\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0016\u0003\u0016',
  '\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0018\u0003\u0018\u0003\u0018',
  '\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0005\u0019',
  '\u0123\n\u0019\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003',
  '\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003',
  '\u001b\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0005\u001c\u0134',
  '\n\u001c\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d',
  '\u0006\u001d\u013b\n\u001d\r\u001d\u000e\u001d\u013c\u0003\u001e\u0003',
  '\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0006\u001e\u0144\n\u001e',
  '\r\u001e\u000e\u001e\u0145\u0003\u001f\u0003\u001f\u0003\u001f\u0003',
  '\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0005\u001f\u0150',
  '\n\u001f\u0003 \u0003 \u0003 \u0003 \u0005 \u0156\n \u0003!\u0003!\u0003',
  '!\u0003!\u0003!\u0006!\u015d\n!\r!\u000e!\u015e\u0003"\u0003"\u0003',
  '"\u0003"\u0003"\u0006"\u0166\n"\r"\u000e"\u0167\u0003#\u0003',
  '#\u0003#\u0003#\u0003#\u0003#\u0003#\u0005#\u0171\n#\u0003$\u0003$\u0003',
  '$\u0003$\u0003$\u0005$\u0178\n$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003',
  '$\u0003%\u0003%\u0003%\u0003%\u0003%\u0005%\u0185\n%\u0003%\u0003%\u0003',
  '%\u0005%\u018a\n%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003',
  '%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003%\u0005',
  "%\u019d\n%\u0003&\u0003&\u0003&\u0003&\u0003'\u0003'\u0003(\u0003",
  '(\u0003(\u0003)\u0003)\u0005)\u01aa\n)\u0003*\u0003*\u0003+\u0003+\u0003',
  ',\u0003,\u0003-\u0003-\u0003-\u0005-\u01b5\n-\u0003.\u0003.\u0003.\u0003',
  '.\u0003.\u0003.\u0003.\u0003.\u0003.\u0005.\u01c0\n.\u0003/\u0003/\u0003',
  '/\u0005/\u01c5\n/\u00030\u00050\u01c8\n0\u00030\u00030\u00050\u01cc',
  '\n0\u00031\u00031\u00061\u01d0\n1\r1\u000e1\u01d1\u00032\u00032\u0007',
  '2\u01d6\n2\f2\u000e2\u01d9\u000b2\u00032\u00052\u01dc\n2\u00033\u0003',
  '3\u00033\u00063\u01e1\n3\r3\u000e3\u01e2\u00034\u00034\u00074\u01e7',
  '\n4\f4\u000e4\u01ea\u000b4\u00034\u00054\u01ed\n4\u00035\u00035\u0003',
  '5\u00035\u00035\u00035\u00035\u00055\u01f6\n5\u00035\u00035\u00035\u0003',
  '5\u00035\u00035\u00035\u00035\u00035\u00035\u00035\u00035\u00035\u0003',
  '5\u00035\u00035\u00035\u00035\u00035\u00035\u00035\u00035\u00035\u0003',
  '5\u00035\u00035\u00035\u00035\u00035\u00035\u00035\u00035\u00035\u0003',
  '5\u00035\u00035\u00035\u00035\u00035\u00035\u00035\u00035\u00035\u0003',
  '5\u00035\u00035\u00035\u00035\u00035\u00035\u00035\u00035\u00035\u0003',
  '5\u00035\u00035\u00035\u00035\u00035\u00035\u00035\u00035\u00035\u0003',
  '5\u00035\u00035\u00035\u00035\u00035\u00035\u00035\u00035\u00035\u0003',
  '5\u00035\u00035\u00035\u00035\u00035\u00035\u00035\u00035\u00035\u0003',
  '5\u00035\u00035\u00035\u00035\u00055\u0250\n5\u00036\u00036\u00036\u0003',
  '6\u00036\u00076\u0257\n6\f6\u000e6\u025a\u000b6\u00037\u00037\u0003',
  '7\u00037\u00037\u00067\u0261\n7\r7\u000e7\u0262\u00038\u00038\u0003',
  '8\u00038\u00038\u00078\u026a\n8\f8\u000e8\u026d\u000b8\u00038\u0003',
  '8\u00038\u00039\u00039\u00039\u00039\u00039\u00039\u00039\u00059\u0279',
  '\n9\u0003:\u0003:\u0003:\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003',
  ';\u0005;\u0285\n;\u0003<\u0003<\u0003=\u0003=\u0003>\u0003>\u0003?\u0003',
  '?\u0003@\u0003@\u0003A\u0003A\u0003B\u0003B\u0003C\u0003C\u0003D\u0003',
  'D\u0003E\u0003E\u0003E\u0005E\u029c\nE\u0003F\u0003F\u0003F\u0003F\u0003',
  'F\u0003F\u0003F\u0003F\u0005F\u02a6\nF\u0003G\u0003G\u0003G\u0003G\u0003',
  'G\u0003G\u0005G\u02ae\nG\u0003G\u0002\u0002H\u0002\u0004\u0006\b\n\f',
  '\u000e\u0010\u0012\u0014\u0016\u0018\u001a\u001c\u001e "$&(*,.0246',
  '8:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088',
  '\u008a\u008c\u0002\u0017\u0004\u0002((HH\u0004\u000255UU\u0004\u0002',
  '++KK\u0004\u000266VV\u0004\u000299YY\u0004\u000244TT\u0004\u000200P',
  'P\u0004\u0002<<\\\\\u0004\u0002::ZZ\u0004\u0002\u0012\u0012\u0014\u0014',
  '\u0003\u0002\b\u0010\u0003\u0002\u0012e\u0003\u0002\b\u0015\u0003\u0002',
  '\u0017e\u0003\u0002\u0017 \u0003\u0002\u0018 \u0003\u0002\bb\u0003\u0002',
  'de\u0003\u0002\u0007\b\u0003\u0002\nB\u0003\u0002De\u0002\u02cf\u0002',
  '\u008e\u0003\u0002\u0002\u0002\u0004\u0097\u0003\u0002\u0002\u0002\u0006',
  '\u00a0\u0003\u0002\u0002\u0002\b\u00a2\u0003\u0002\u0002\u0002\n\u00ac',
  '\u0003\u0002\u0002\u0002\f\u00b6\u0003\u0002\u0002\u0002\u000e\u00bc',
  '\u0003\u0002\u0002\u0002\u0010\u00c4\u0003\u0002\u0002\u0002\u0012\u00cb',
  '\u0003\u0002\u0002\u0002\u0014\u00dd\u0003\u0002\u0002\u0002\u0016\u00df',
  '\u0003\u0002\u0002\u0002\u0018\u00e1\u0003\u0002\u0002\u0002\u001a\u00e3',
  '\u0003\u0002\u0002\u0002\u001c\u00ed\u0003\u0002\u0002\u0002\u001e\u00f0',
  '\u0003\u0002\u0002\u0002 \u0103\u0003\u0002\u0002\u0002"\u010b\u0003',
  '\u0002\u0002\u0002$\u010d\u0003\u0002\u0002\u0002&\u010f\u0003\u0002',
  '\u0002\u0002(\u0112\u0003\u0002\u0002\u0002*\u0115\u0003\u0002\u0002',
  '\u0002,\u0117\u0003\u0002\u0002\u0002.\u011a\u0003\u0002\u0002\u0002',
  '0\u0122\u0003\u0002\u0002\u00022\u0124\u0003\u0002\u0002\u00024\u0128',
  '\u0003\u0002\u0002\u00026\u012f\u0003\u0002\u0002\u00028\u013a\u0003',
  '\u0002\u0002\u0002:\u0143\u0003\u0002\u0002\u0002<\u014f\u0003\u0002',
  '\u0002\u0002>\u0151\u0003\u0002\u0002\u0002@\u015c\u0003\u0002\u0002',
  '\u0002B\u0165\u0003\u0002\u0002\u0002D\u0170\u0003\u0002\u0002\u0002',
  'F\u0177\u0003\u0002\u0002\u0002H\u0184\u0003\u0002\u0002\u0002J\u019e',
  '\u0003\u0002\u0002\u0002L\u01a2\u0003\u0002\u0002\u0002N\u01a4\u0003',
  '\u0002\u0002\u0002P\u01a9\u0003\u0002\u0002\u0002R\u01ab\u0003\u0002',
  '\u0002\u0002T\u01ad\u0003\u0002\u0002\u0002V\u01af\u0003\u0002\u0002',
  '\u0002X\u01b4\u0003\u0002\u0002\u0002Z\u01bf\u0003\u0002\u0002\u0002',
  '\\\u01c4\u0003\u0002\u0002\u0002^\u01c7\u0003\u0002\u0002\u0002`\u01cf',
  '\u0003\u0002\u0002\u0002b\u01db\u0003\u0002\u0002\u0002d\u01dd\u0003',
  '\u0002\u0002\u0002f\u01ec\u0003\u0002\u0002\u0002h\u01ee\u0003\u0002',
  '\u0002\u0002j\u0258\u0003\u0002\u0002\u0002l\u0260\u0003\u0002\u0002',
  '\u0002n\u0264\u0003\u0002\u0002\u0002p\u0278\u0003\u0002\u0002\u0002',
  'r\u027a\u0003\u0002\u0002\u0002t\u0284\u0003\u0002\u0002\u0002v\u0286',
  '\u0003\u0002\u0002\u0002x\u0288\u0003\u0002\u0002\u0002z\u028a\u0003',
  '\u0002\u0002\u0002|\u028c\u0003\u0002\u0002\u0002~\u028e\u0003\u0002',
  '\u0002\u0002\u0080\u0290\u0003\u0002\u0002\u0002\u0082\u0292\u0003\u0002',
  '\u0002\u0002\u0084\u0294\u0003\u0002\u0002\u0002\u0086\u0296\u0003\u0002',
  '\u0002\u0002\u0088\u029b\u0003\u0002\u0002\u0002\u008a\u02a5\u0003\u0002',
  '\u0002\u0002\u008c\u02ad\u0003\u0002\u0002\u0002\u008e\u0093\u0005j',
  '6\u0002\u008f\u0094\u0005\u0004\u0003\u0002\u0090\u0094\u0005\u0006',
  '\u0004\u0002\u0091\u0094\u0005\u000e\b\u0002\u0092\u0094\u0005\u0012',
  '\n\u0002\u0093\u008f\u0003\u0002\u0002\u0002\u0093\u0090\u0003\u0002',
  '\u0002\u0002\u0093\u0091\u0003\u0002\u0002\u0002\u0093\u0092\u0003\u0002',
  '\u0002\u0002\u0094\u0095\u0003\u0002\u0002\u0002\u0095\u0096\u0005j',
  '6\u0002\u0096\u0003\u0003\u0002\u0002\u0002\u0097\u0098\u0005\u0012',
  '\n\u0002\u0098\u0099\u0005j6\u0002\u0099\u009a\u0007!\u0002\u0002\u009a',
  '\u009b\u0005j6\u0002\u009b\u009c\u00056\u001c\u0002\u009c\u0005\u0003',
  '\u0002\u0002\u0002\u009d\u00a1\u0005\b\u0005\u0002\u009e\u00a1\u0005',
  '\n\u0006\u0002\u009f\u00a1\u0005\f\u0007\u0002\u00a0\u009d\u0003\u0002',
  '\u0002\u0002\u00a0\u009e\u0003\u0002\u0002\u0002\u00a0\u009f\u0003\u0002',
  '\u0002\u0002\u00a1\u0007\u0003\u0002\u0002\u0002\u00a2\u00a8\u0005\u0012',
  '\n\u0002\u00a3\u00a4\u0005j6\u0002\u00a4\u00a5\u00050\u0019\u0002\u00a5',
  '\u00a6\u0005j6\u0002\u00a6\u00a7\u0005\u0012\n\u0002\u00a7\u00a9\u0003',
  '\u0002\u0002\u0002\u00a8\u00a3\u0003\u0002\u0002\u0002\u00a9\u00aa\u0003',
  '\u0002\u0002\u0002\u00aa\u00a8\u0003\u0002\u0002\u0002\u00aa\u00ab\u0003',
  '\u0002\u0002\u0002\u00ab\t\u0003\u0002\u0002\u0002\u00ac\u00b2\u0005',
  '\u0012\n\u0002\u00ad\u00ae\u0005j6\u0002\u00ae\u00af\u00052\u001a\u0002',
  '\u00af\u00b0\u0005j6\u0002\u00b0\u00b1\u0005\u0012\n\u0002\u00b1\u00b3',
  '\u0003\u0002\u0002\u0002\u00b2\u00ad\u0003\u0002\u0002\u0002\u00b3\u00b4',
  '\u0003\u0002\u0002\u0002\u00b4\u00b2\u0003\u0002\u0002\u0002\u00b4\u00b5',
  '\u0003\u0002\u0002\u0002\u00b5\u000b\u0003\u0002\u0002\u0002\u00b6\u00b7',
  '\u0005\u0012\n\u0002\u00b7\u00b8\u0005j6\u0002\u00b8\u00b9\u00054\u001b',
  '\u0002\u00b9\u00ba\u0005j6\u0002\u00ba\u00bb\u0005\u0012\n\u0002\u00bb',
  '\r\u0003\u0002\u0002\u0002\u00bc\u00c0\u0005\u0012\n\u0002\u00bd\u00be',
  '\u0005j6\u0002\u00be\u00bf\u0005\u0010\t\u0002\u00bf\u00c1\u0003\u0002',
  '\u0002\u0002\u00c0\u00bd\u0003\u0002\u0002\u0002\u00c1\u00c2\u0003\u0002',
  '\u0002\u0002\u00c2\u00c0\u0003\u0002\u0002\u0002\u00c2\u00c3\u0003\u0002',
  '\u0002\u0002\u00c3\u000f\u0003\u0002\u0002\u0002\u00c4\u00c5\u0005\u0016',
  '\f\u0002\u00c5\u00c6\u0005j6\u0002\u00c6\u00c7\u0005V,\u0002\u00c7\u0011',
  '\u0003\u0002\u0002\u0002\u00c8\u00c9\u0005"\u0012\u0002\u00c9\u00ca',
  '\u0005j6\u0002\u00ca\u00cc\u0003\u0002\u0002\u0002\u00cb\u00c8\u0003',
  '\u0002\u0002\u0002\u00cb\u00cc\u0003\u0002\u0002\u0002\u00cc\u00d0\u0003',
  '\u0002\u0002\u0002\u00cd\u00ce\u0005\u0018\r\u0002\u00ce\u00cf\u0005',
  'j6\u0002\u00cf\u00d1\u0003\u0002\u0002\u0002\u00d0\u00cd\u0003\u0002',
  '\u0002\u0002\u00d0\u00d1\u0003\u0002\u0002\u0002\u00d1\u00d9\u0003\u0002',
  '\u0002\u0002\u00d2\u00da\u0005\u0014\u000b\u0002\u00d3\u00d4\u0007\u000f',
  '\u0002\u0002\u00d4\u00d5\u0005j6\u0002\u00d5\u00d6\u0005\u0002\u0002',
  '\u0002\u00d6\u00d7\u0005j6\u0002\u00d7\u00d8\u0007\u0010\u0002\u0002',
  '\u00d8\u00da\u0003\u0002\u0002\u0002\u00d9\u00d2\u0003\u0002\u0002\u0002',
  '\u00d9\u00d3\u0003\u0002\u0002\u0002\u00da\u0013\u0003\u0002\u0002\u0002',
  '\u00db\u00de\u0005\u001a\u000e\u0002\u00dc\u00de\u0005 \u0011\u0002',
  '\u00dd\u00db\u0003\u0002\u0002\u0002\u00dd\u00dc\u0003\u0002\u0002\u0002',
  '\u00de\u0015\u0003\u0002\u0002\u0002\u00df\u00e0\u0007\u0015\u0002\u0002',
  '\u00e0\u0017\u0003\u0002\u0002\u0002\u00e1\u00e2\u0007E\u0002\u0002',
  '\u00e2\u0019\u0003\u0002\u0002\u0002\u00e3\u00eb\u0005\u001c\u000f\u0002',
  '\u00e4\u00e5\u0005j6\u0002\u00e5\u00e6\u0007c\u0002\u0002\u00e6\u00e7',
  '\u0005j6\u0002\u00e7\u00e8\u0005\u001e\u0010\u0002\u00e8\u00e9\u0005',
  'j6\u0002\u00e9\u00ea\u0007c\u0002\u0002\u00ea\u00ec\u0003\u0002\u0002',
  '\u0002\u00eb\u00e4\u0003\u0002\u0002\u0002\u00eb\u00ec\u0003\u0002\u0002',
  '\u0002\u00ec\u001b\u0003\u0002\u0002\u0002\u00ed\u00ee\u0005h5\u0002',
  '\u00ee\u001d\u0003\u0002\u0002\u0002\u00ef\u00f1\u0005\u0088E\u0002',
  '\u00f0\u00ef\u0003\u0002\u0002\u0002\u00f1\u00f2\u0003\u0002\u0002\u0002',
  '\u00f2\u00f0\u0003\u0002\u0002\u0002\u00f2\u00f3\u0003\u0002\u0002\u0002',
  '\u00f3\u0100\u0003\u0002\u0002\u0002\u00f4\u00f6\u0005v<\u0002\u00f5',
  '\u00f4\u0003\u0002\u0002\u0002\u00f6\u00f7\u0003\u0002\u0002\u0002\u00f7',
  '\u00f5\u0003\u0002\u0002\u0002\u00f7\u00f8\u0003\u0002\u0002\u0002\u00f8',
  '\u00fa\u0003\u0002\u0002\u0002\u00f9\u00fb\u0005\u0088E\u0002\u00fa',
  '\u00f9\u0003\u0002\u0002\u0002\u00fb\u00fc\u0003\u0002\u0002\u0002\u00fc',
  '\u00fa\u0003\u0002\u0002\u0002\u00fc\u00fd\u0003\u0002\u0002\u0002\u00fd',
  '\u00ff\u0003\u0002\u0002\u0002\u00fe\u00f5\u0003\u0002\u0002\u0002\u00ff',
  '\u0102\u0003\u0002\u0002\u0002\u0100\u00fe\u0003\u0002\u0002\u0002\u0100',
  '\u0101\u0003\u0002\u0002\u0002\u0101\u001f\u0003\u0002\u0002\u0002\u0102',
  '\u0100\u0003\u0002\u0002\u0002\u0103\u0104\u0007\u0011\u0002\u0002\u0104',
  '!\u0003\u0002\u0002\u0002\u0105\u010c\u0005(\u0015\u0002\u0106\u010c',
  '\u0005&\u0014\u0002\u0107\u010c\u0005$\u0013\u0002\u0108\u010c\u0005',
  '.\u0018\u0002\u0109\u010c\u0005,\u0017\u0002\u010a\u010c\u0005*\u0016',
  '\u0002\u010b\u0105\u0003\u0002\u0002\u0002\u010b\u0106\u0003\u0002\u0002',
  '\u0002\u010b\u0107\u0003\u0002\u0002\u0002\u010b\u0108\u0003\u0002\u0002',
  '\u0002\u010b\u0109\u0003\u0002\u0002\u0002\u010b\u010a\u0003\u0002\u0002',
  '\u0002\u010c#\u0003\u0002\u0002\u0002\u010d\u010e\u0007#\u0002\u0002',
  '\u010e%\u0003\u0002\u0002\u0002\u010f\u0110\u0007#\u0002\u0002\u0110',
  "\u0111\u0007#\u0002\u0002\u0111'\u0003\u0002\u0002\u0002\u0112\u0113",
  '\u0007#\u0002\u0002\u0113\u0114\u0007\b\u0002\u0002\u0114)\u0003\u0002',
  '\u0002\u0002\u0115\u0116\u0007%\u0002\u0002\u0116+\u0003\u0002\u0002',
  '\u0002\u0117\u0118\u0007%\u0002\u0002\u0118\u0119\u0007%\u0002\u0002',
  '\u0119-\u0003\u0002\u0002\u0002\u011a\u011b\u0007%\u0002\u0002\u011b',
  '\u011c\u0007\b\u0002\u0002\u011c/\u0003\u0002\u0002\u0002\u011d\u011e',
  '\t\u0002\u0002\u0002\u011e\u011f\t\u0003\u0002\u0002\u011f\u0120\t\u0004',
  '\u0002\u0002\u0120\u0123\u0005l7\u0002\u0121\u0123\u0007\u0013\u0002',
  '\u0002\u0122\u011d\u0003\u0002\u0002\u0002\u0122\u0121\u0003\u0002\u0002',
  '\u0002\u01231\u0003\u0002\u0002\u0002\u0124\u0125\t\u0005\u0002\u0002',
  '\u0125\u0126\t\u0006\u0002\u0002\u0126\u0127\u0005l7\u0002\u01273\u0003',
  '\u0002\u0002\u0002\u0128\u0129\t\u0007\u0002\u0002\u0129\u012a\t\b\u0002',
  '\u0002\u012a\u012b\t\u0003\u0002\u0002\u012b\u012c\t\t\u0002\u0002\u012c',
  '\u012d\t\n\u0002\u0002\u012d\u012e\u0005l7\u0002\u012e5\u0003\u0002',
  '\u0002\u0002\u012f\u0130\u0005<\u001f\u0002\u0130\u0133\u0005j6\u0002',
  '\u0131\u0134\u00058\u001d\u0002\u0132\u0134\u0005:\u001e\u0002\u0133',
  '\u0131\u0003\u0002\u0002\u0002\u0133\u0132\u0003\u0002\u0002\u0002\u0133',
  '\u0134\u0003\u0002\u0002\u0002\u01347\u0003\u0002\u0002\u0002\u0135',
  '\u0136\u0005j6\u0002\u0136\u0137\u00050\u0019\u0002\u0137\u0138\u0005',
  'j6\u0002\u0138\u0139\u0005<\u001f\u0002\u0139\u013b\u0003\u0002\u0002',
  '\u0002\u013a\u0135\u0003\u0002\u0002\u0002\u013b\u013c\u0003\u0002\u0002',
  '\u0002\u013c\u013a\u0003\u0002\u0002\u0002\u013c\u013d\u0003\u0002\u0002',
  '\u0002\u013d9\u0003\u0002\u0002\u0002\u013e\u013f\u0005j6\u0002\u013f',
  '\u0140\u00052\u001a\u0002\u0140\u0141\u0005j6\u0002\u0141\u0142\u0005',
  '<\u001f\u0002\u0142\u0144\u0003\u0002\u0002\u0002\u0143\u013e\u0003',
  '\u0002\u0002\u0002\u0144\u0145\u0003\u0002\u0002\u0002\u0145\u0143\u0003',
  '\u0002\u0002\u0002\u0145\u0146\u0003\u0002\u0002\u0002\u0146;\u0003',
  '\u0002\u0002\u0002\u0147\u0150\u0005> \u0002\u0148\u0150\u0005F$\u0002',
  '\u0149\u014a\u0007\u000f\u0002\u0002\u014a\u014b\u0005j6\u0002\u014b',
  '\u014c\u00056\u001c\u0002\u014c\u014d\u0005j6\u0002\u014d\u014e\u0007',
  '\u0010\u0002\u0002\u014e\u0150\u0003\u0002\u0002\u0002\u014f\u0147\u0003',
  '\u0002\u0002\u0002\u014f\u0148\u0003\u0002\u0002\u0002\u014f\u0149\u0003',
  '\u0002\u0002\u0002\u0150=\u0003\u0002\u0002\u0002\u0151\u0152\u0005',
  'D#\u0002\u0152\u0155\u0005j6\u0002\u0153\u0156\u0005@!\u0002\u0154\u0156',
  '\u0005B"\u0002\u0155\u0153\u0003\u0002\u0002\u0002\u0155\u0154\u0003',
  '\u0002\u0002\u0002\u0155\u0156\u0003\u0002\u0002\u0002\u0156?\u0003',
  '\u0002\u0002\u0002\u0157\u0158\u0005j6\u0002\u0158\u0159\u00050\u0019',
  '\u0002\u0159\u015a\u0005j6\u0002\u015a\u015b\u0005D#\u0002\u015b\u015d',
  '\u0003\u0002\u0002\u0002\u015c\u0157\u0003\u0002\u0002\u0002\u015d\u015e',
  '\u0003\u0002\u0002\u0002\u015e\u015c\u0003\u0002\u0002\u0002\u015e\u015f',
  '\u0003\u0002\u0002\u0002\u015fA\u0003\u0002\u0002\u0002\u0160\u0161',
  '\u0005j6\u0002\u0161\u0162\u00052\u001a\u0002\u0162\u0163\u0005j6\u0002',
  '\u0163\u0164\u0005D#\u0002\u0164\u0166\u0003\u0002\u0002\u0002\u0165',
  '\u0160\u0003\u0002\u0002\u0002\u0166\u0167\u0003\u0002\u0002\u0002\u0167',
  '\u0165\u0003\u0002\u0002\u0002\u0167\u0168\u0003\u0002\u0002\u0002\u0168',
  'C\u0003\u0002\u0002\u0002\u0169\u0171\u0005H%\u0002\u016a\u016b\u0007',
  '\u000f\u0002\u0002\u016b\u016c\u0005j6\u0002\u016c\u016d\u0005> \u0002',
  '\u016d\u016e\u0005j6\u0002\u016e\u016f\u0007\u0010\u0002\u0002\u016f',
  '\u0171\u0003\u0002\u0002\u0002\u0170\u0169\u0003\u0002\u0002\u0002\u0170',
  '\u016a\u0003\u0002\u0002\u0002\u0171E\u0003\u0002\u0002\u0002\u0172',
  '\u0173\u0007B\u0002\u0002\u0173\u0174\u0005J&\u0002\u0174\u0175\u0007',
  'D\u0002\u0002\u0175\u0176\u0005j6\u0002\u0176\u0178\u0003\u0002\u0002',
  '\u0002\u0177\u0172\u0003\u0002\u0002\u0002\u0177\u0178\u0003\u0002\u0002',
  '\u0002\u0178\u0179\u0003\u0002\u0002\u0002\u0179\u017a\u0007b\u0002',
  '\u0002\u017a\u017b\u0005j6\u0002\u017b\u017c\u0005> \u0002\u017c\u017d',
  '\u0005j6\u0002\u017d\u017e\u0007d\u0002\u0002\u017eG\u0003\u0002\u0002',
  '\u0002\u017f\u0180\u0007B\u0002\u0002\u0180\u0181\u0005J&\u0002\u0181',
  '\u0182\u0007D\u0002\u0002\u0182\u0183\u0005j6\u0002\u0183\u0185\u0003',
  '\u0002\u0002\u0002\u0184\u017f\u0003\u0002\u0002\u0002\u0184\u0185\u0003',
  '\u0002\u0002\u0002\u0185\u0189\u0003\u0002\u0002\u0002\u0186\u0187\u0005',
  'T+\u0002\u0187\u0188\u0005j6\u0002\u0188\u018a\u0003\u0002\u0002\u0002',
  '\u0189\u0186\u0003\u0002\u0002\u0002\u0189\u018a\u0003\u0002\u0002\u0002',
  '\u018a\u018b\u0003\u0002\u0002\u0002\u018b\u018c\u0005V,\u0002\u018c',
  '\u019c\u0005j6\u0002\u018d\u018e\u0005X-\u0002\u018e\u018f\u0005j6\u0002',
  '\u018f\u0190\u0005\u0012\n\u0002\u0190\u019d\u0003\u0002\u0002\u0002',
  '\u0191\u0192\u0005Z.\u0002\u0192\u0193\u0005j6\u0002\u0193\u0194\u0007',
  '\n\u0002\u0002\u0194\u0195\u0005^0\u0002\u0195\u019d\u0003\u0002\u0002',
  '\u0002\u0196\u0197\u0005\\/\u0002\u0197\u0198\u0005j6\u0002\u0198\u0199',
  '\u0005~@\u0002\u0199\u019a\u0005`1\u0002\u019a\u019b\u0005~@\u0002\u019b',
  '\u019d\u0003\u0002\u0002\u0002\u019c\u018d\u0003\u0002\u0002\u0002\u019c',
  '\u0191\u0003\u0002\u0002\u0002\u019c\u0196\u0003\u0002\u0002\u0002\u019d',
  "I\u0003\u0002\u0002\u0002\u019e\u019f\u0005L'\u0002\u019f\u01a0\u0005",
  'N(\u0002\u01a0\u01a1\u0005P)\u0002\u01a1K\u0003\u0002\u0002\u0002\u01a2',
  '\u01a3\u0005f4\u0002\u01a3M\u0003\u0002\u0002\u0002\u01a4\u01a5\u0007',
  '\u0015\u0002\u0002\u01a5\u01a6\u0007\u0015\u0002\u0002\u01a6O\u0003',
  '\u0002\u0002\u0002\u01a7\u01aa\u0005f4\u0002\u01a8\u01aa\u0005R*\u0002',
  '\u01a9\u01a7\u0003\u0002\u0002\u0002\u01a9\u01a8\u0003\u0002\u0002\u0002',
  '\u01aaQ\u0003\u0002\u0002\u0002\u01ab\u01ac\u0007\u0011\u0002\u0002',
  '\u01acS\u0003\u0002\u0002\u0002\u01ad\u01ae\u00079\u0002\u0002\u01ae',
  'U\u0003\u0002\u0002\u0002\u01af\u01b0\u0005\u0012\n\u0002\u01b0W\u0003',
  '\u0002\u0002\u0002\u01b1\u01b5\u0007$\u0002\u0002\u01b2\u01b3\u0007',
  '\b\u0002\u0002\u01b3\u01b5\u0007$\u0002\u0002\u01b4\u01b1\u0003\u0002',
  '\u0002\u0002\u01b4\u01b2\u0003\u0002\u0002\u0002\u01b5Y\u0003\u0002',
  '\u0002\u0002\u01b6\u01c0\u0007$\u0002\u0002\u01b7\u01b8\u0007\b\u0002',
  '\u0002\u01b8\u01c0\u0007$\u0002\u0002\u01b9\u01ba\u0007#\u0002\u0002',
  '\u01ba\u01c0\u0007$\u0002\u0002\u01bb\u01c0\u0007#\u0002\u0002\u01bc',
  '\u01bd\u0007%\u0002\u0002\u01bd\u01c0\u0007$\u0002\u0002\u01be\u01c0',
  '\u0007%\u0002\u0002\u01bf\u01b6\u0003\u0002\u0002\u0002\u01bf\u01b7',
  '\u0003\u0002\u0002\u0002\u01bf\u01b9\u0003\u0002\u0002\u0002\u01bf\u01bb',
  '\u0003\u0002\u0002\u0002\u01bf\u01bc\u0003\u0002\u0002\u0002\u01bf\u01be',
  '\u0003\u0002\u0002\u0002\u01c0[\u0003\u0002\u0002\u0002\u01c1\u01c5',
  '\u0007$\u0002\u0002\u01c2\u01c3\u0007\b\u0002\u0002\u01c3\u01c5\u0007',
  '$\u0002\u0002\u01c4\u01c1\u0003\u0002\u0002\u0002\u01c4\u01c2\u0003',
  '\u0002\u0002\u0002\u01c5]\u0003\u0002\u0002\u0002\u01c6\u01c8\t\u000b',
  '\u0002\u0002\u01c7\u01c6\u0003\u0002\u0002\u0002\u01c7\u01c8\u0003\u0002',
  '\u0002\u0002\u01c8\u01cb\u0003\u0002\u0002\u0002\u01c9\u01cc\u0005d',
  '3\u0002\u01ca\u01cc\u0005b2\u0002\u01cb\u01c9\u0003\u0002\u0002\u0002',
  '\u01cb\u01ca\u0003\u0002\u0002\u0002\u01cc_\u0003\u0002\u0002\u0002',
  '\u01cd\u01d0\u0005\u008aF\u0002\u01ce\u01d0\u0005\u008cG\u0002\u01cf',
  '\u01cd\u0003\u0002\u0002\u0002\u01cf\u01ce\u0003\u0002\u0002\u0002\u01d0',
  '\u01d1\u0003\u0002\u0002\u0002\u01d1\u01cf\u0003\u0002\u0002\u0002\u01d1',
  '\u01d2\u0003\u0002\u0002\u0002\u01d2a\u0003\u0002\u0002\u0002\u01d3',
  '\u01d7\u0005\u0086D\u0002\u01d4\u01d6\u0005\u0082B\u0002\u01d5\u01d4',
  '\u0003\u0002\u0002\u0002\u01d6\u01d9\u0003\u0002\u0002\u0002\u01d7\u01d5',
  '\u0003\u0002\u0002\u0002\u01d7\u01d8\u0003\u0002\u0002\u0002\u01d8\u01dc',
  '\u0003\u0002\u0002\u0002\u01d9\u01d7\u0003\u0002\u0002\u0002\u01da\u01dc',
  '\u0005\u0084C\u0002\u01db\u01d3\u0003\u0002\u0002\u0002\u01db\u01da',
  '\u0003\u0002\u0002\u0002\u01dcc\u0003\u0002\u0002\u0002\u01dd\u01de',
  '\u0005b2\u0002\u01de\u01e0\u0007\u0015\u0002\u0002\u01df\u01e1\u0005',
  '\u0082B\u0002\u01e0\u01df\u0003\u0002\u0002\u0002\u01e1\u01e2\u0003',
  '\u0002\u0002\u0002\u01e2\u01e0\u0003\u0002\u0002\u0002\u01e2\u01e3\u0003',
  '\u0002\u0002\u0002\u01e3e\u0003\u0002\u0002\u0002\u01e4\u01e8\u0005',
  '\u0086D\u0002\u01e5\u01e7\u0005\u0082B\u0002\u01e6\u01e5\u0003\u0002',
  '\u0002\u0002\u01e7\u01ea\u0003\u0002\u0002\u0002\u01e8\u01e6\u0003\u0002',
  '\u0002\u0002\u01e8\u01e9\u0003\u0002\u0002\u0002\u01e9\u01ed\u0003\u0002',
  '\u0002\u0002\u01ea\u01e8\u0003\u0002\u0002\u0002\u01eb\u01ed\u0005\u0084',
  'C\u0002\u01ec\u01e4\u0003\u0002\u0002\u0002\u01ec\u01eb\u0003\u0002',
  '\u0002\u0002\u01edg\u0003\u0002\u0002\u0002\u01ee\u01ef\u0005\u0086',
  'D\u0002\u01ef\u01f0\u0005\u0082B\u0002\u01f0\u01f1\u0005\u0082B\u0002',
  '\u01f1\u01f2\u0005\u0082B\u0002\u01f2\u01f3\u0005\u0082B\u0002\u01f3',
  '\u024f\u0005\u0082B\u0002\u01f4\u01f6\u0005\u0082B\u0002\u01f5\u01f4',
  '\u0003\u0002\u0002\u0002\u01f5\u01f6\u0003\u0002\u0002\u0002\u01f6\u0250',
  '\u0003\u0002\u0002\u0002\u01f7\u01f8\u0005\u0082B\u0002\u01f8\u01f9',
  '\u0005\u0082B\u0002\u01f9\u0250\u0003\u0002\u0002\u0002\u01fa\u01fb',
  '\u0005\u0082B\u0002\u01fb\u01fc\u0005\u0082B\u0002\u01fc\u01fd\u0005',
  '\u0082B\u0002\u01fd\u0250\u0003\u0002\u0002\u0002\u01fe\u01ff\u0005',
  '\u0082B\u0002\u01ff\u0200\u0005\u0082B\u0002\u0200\u0201\u0005\u0082',
  'B\u0002\u0201\u0202\u0005\u0082B\u0002\u0202\u0250\u0003\u0002\u0002',
  '\u0002\u0203\u0204\u0005\u0082B\u0002\u0204\u0205\u0005\u0082B\u0002',
  '\u0205\u0206\u0005\u0082B\u0002\u0206\u0207\u0005\u0082B\u0002\u0207',
  '\u0208\u0005\u0082B\u0002\u0208\u0250\u0003\u0002\u0002\u0002\u0209',
  '\u020a\u0005\u0082B\u0002\u020a\u020b\u0005\u0082B\u0002\u020b\u020c',
  '\u0005\u0082B\u0002\u020c\u020d\u0005\u0082B\u0002\u020d\u020e\u0005',
  '\u0082B\u0002\u020e\u020f\u0005\u0082B\u0002\u020f\u0250\u0003\u0002',
  '\u0002\u0002\u0210\u0211\u0005\u0082B\u0002\u0211\u0212\u0005\u0082',
  'B\u0002\u0212\u0213\u0005\u0082B\u0002\u0213\u0214\u0005\u0082B\u0002',
  '\u0214\u0215\u0005\u0082B\u0002\u0215\u0216\u0005\u0082B\u0002\u0216',
  '\u0217\u0005\u0082B\u0002\u0217\u0250\u0003\u0002\u0002\u0002\u0218',
  '\u0219\u0005\u0082B\u0002\u0219\u021a\u0005\u0082B\u0002\u021a\u021b',
  '\u0005\u0082B\u0002\u021b\u021c\u0005\u0082B\u0002\u021c\u021d\u0005',
  '\u0082B\u0002\u021d\u021e\u0005\u0082B\u0002\u021e\u021f\u0005\u0082',
  'B\u0002\u021f\u0220\u0005\u0082B\u0002\u0220\u0250\u0003\u0002\u0002',
  '\u0002\u0221\u0222\u0005\u0082B\u0002\u0222\u0223\u0005\u0082B\u0002',
  '\u0223\u0224\u0005\u0082B\u0002\u0224\u0225\u0005\u0082B\u0002\u0225',
  '\u0226\u0005\u0082B\u0002\u0226\u0227\u0005\u0082B\u0002\u0227\u0228',
  '\u0005\u0082B\u0002\u0228\u0229\u0005\u0082B\u0002\u0229\u022a\u0005',
  '\u0082B\u0002\u022a\u0250\u0003\u0002\u0002\u0002\u022b\u022c\u0005',
  '\u0082B\u0002\u022c\u022d\u0005\u0082B\u0002\u022d\u022e\u0005\u0082',
  'B\u0002\u022e\u022f\u0005\u0082B\u0002\u022f\u0230\u0005\u0082B\u0002',
  '\u0230\u0231\u0005\u0082B\u0002\u0231\u0232\u0005\u0082B\u0002\u0232',
  '\u0233\u0005\u0082B\u0002\u0233\u0234\u0005\u0082B\u0002\u0234\u0235',
  '\u0005\u0082B\u0002\u0235\u0250\u0003\u0002\u0002\u0002\u0236\u0237',
  '\u0005\u0082B\u0002\u0237\u0238\u0005\u0082B\u0002\u0238\u0239\u0005',
  '\u0082B\u0002\u0239\u023a\u0005\u0082B\u0002\u023a\u023b\u0005\u0082',
  'B\u0002\u023b\u023c\u0005\u0082B\u0002\u023c\u023d\u0005\u0082B\u0002',
  '\u023d\u023e\u0005\u0082B\u0002\u023e\u023f\u0005\u0082B\u0002\u023f',
  '\u0240\u0005\u0082B\u0002\u0240\u0241\u0005\u0082B\u0002\u0241\u0250',
  '\u0003\u0002\u0002\u0002\u0242\u0243\u0005\u0082B\u0002\u0243\u0244',
  '\u0005\u0082B\u0002\u0244\u0245\u0005\u0082B\u0002\u0245\u0246\u0005',
  '\u0082B\u0002\u0246\u0247\u0005\u0082B\u0002\u0247\u0248\u0005\u0082',
  'B\u0002\u0248\u0249\u0005\u0082B\u0002\u0249\u024a\u0005\u0082B\u0002',
  '\u024a\u024b\u0005\u0082B\u0002\u024b\u024c\u0005\u0082B\u0002\u024c',
  '\u024d\u0005\u0082B\u0002\u024d\u024e\u0005\u0082B\u0002\u024e\u0250',
  '\u0003\u0002\u0002\u0002\u024f\u01f5\u0003\u0002\u0002\u0002\u024f\u01f7',
  '\u0003\u0002\u0002\u0002\u024f\u01fa\u0003\u0002\u0002\u0002\u024f\u01fe',
  '\u0003\u0002\u0002\u0002\u024f\u0203\u0003\u0002\u0002\u0002\u024f\u0209',
  '\u0003\u0002\u0002\u0002\u024f\u0210\u0003\u0002\u0002\u0002\u024f\u0218',
  '\u0003\u0002\u0002\u0002\u024f\u0221\u0003\u0002\u0002\u0002\u024f\u022b',
  '\u0003\u0002\u0002\u0002\u024f\u0236\u0003\u0002\u0002\u0002\u024f\u0242',
  '\u0003\u0002\u0002\u0002\u0250i\u0003\u0002\u0002\u0002\u0251\u0257',
  '\u0005v<\u0002\u0252\u0257\u0005x=\u0002\u0253\u0257\u0005z>\u0002\u0254',
  '\u0257\u0005|?\u0002\u0255\u0257\u0005n8\u0002\u0256\u0251\u0003\u0002',
  '\u0002\u0002\u0256\u0252\u0003\u0002\u0002\u0002\u0256\u0253\u0003\u0002',
  '\u0002\u0002\u0256\u0254\u0003\u0002\u0002\u0002\u0256\u0255\u0003\u0002',
  '\u0002\u0002\u0257\u025a\u0003\u0002\u0002\u0002\u0258\u0256\u0003\u0002',
  '\u0002\u0002\u0258\u0259\u0003\u0002\u0002\u0002\u0259k\u0003\u0002',
  '\u0002\u0002\u025a\u0258\u0003\u0002\u0002\u0002\u025b\u0261\u0005v',
  '<\u0002\u025c\u0261\u0005x=\u0002\u025d\u0261\u0005z>\u0002\u025e\u0261',
  '\u0005|?\u0002\u025f\u0261\u0005n8\u0002\u0260\u025b\u0003\u0002\u0002',
  '\u0002\u0260\u025c\u0003\u0002\u0002\u0002\u0260\u025d\u0003\u0002\u0002',
  '\u0002\u0260\u025e\u0003\u0002\u0002\u0002\u0260\u025f\u0003\u0002\u0002',
  '\u0002\u0261\u0262\u0003\u0002\u0002\u0002\u0262\u0260\u0003\u0002\u0002',
  '\u0002\u0262\u0263\u0003\u0002\u0002\u0002\u0263m\u0003\u0002\u0002',
  '\u0002\u0264\u0265\u0007\u0016\u0002\u0002\u0265\u0266\u0007\u0011\u0002',
  '\u0002\u0266\u026b\u0003\u0002\u0002\u0002\u0267\u026a\u0005p9\u0002',
  '\u0268\u026a\u0005r:\u0002\u0269\u0267\u0003\u0002\u0002\u0002\u0269',
  '\u0268\u0003\u0002\u0002\u0002\u026a\u026d\u0003\u0002\u0002\u0002\u026b',
  '\u0269\u0003\u0002\u0002\u0002\u026b\u026c\u0003\u0002\u0002\u0002\u026c',
  '\u026e\u0003\u0002\u0002\u0002\u026d\u026b\u0003\u0002\u0002\u0002\u026e',
  '\u026f\u0007\u0011\u0002\u0002\u026f\u0270\u0007\u0016\u0002\u0002\u0270',
  'o\u0003\u0002\u0002\u0002\u0271\u0279\u0005v<\u0002\u0272\u0279\u0005',
  'x=\u0002\u0273\u0279\u0005z>\u0002\u0274\u0279\u0005|?\u0002\u0275\u0279',
  '\t\f\u0002\u0002\u0276\u0279\t\r\u0002\u0002\u0277\u0279\u0007\u0003',
  '\u0002\u0002\u0278\u0271\u0003\u0002\u0002\u0002\u0278\u0272\u0003\u0002',
  '\u0002\u0002\u0278\u0273\u0003\u0002\u0002\u0002\u0278\u0274\u0003\u0002',
  '\u0002\u0002\u0278\u0275\u0003\u0002\u0002\u0002\u0278\u0276\u0003\u0002',
  '\u0002\u0002\u0278\u0277\u0003\u0002\u0002\u0002\u0279q\u0003\u0002',
  '\u0002\u0002\u027a\u027b\u0007\u0011\u0002\u0002\u027b\u027c\u0005t',
  ';\u0002\u027cs\u0003\u0002\u0002\u0002\u027d\u0285\u0005v<\u0002\u027e',
  '\u0285\u0005x=\u0002\u027f\u0285\u0005z>\u0002\u0280\u0285\u0005|?\u0002',
  '\u0281\u0285\t\u000e\u0002\u0002\u0282\u0285\t\u000f\u0002\u0002\u0283',
  '\u0285\u0007\u0003\u0002\u0002\u0284\u027d\u0003\u0002\u0002\u0002\u0284',
  '\u027e\u0003\u0002\u0002\u0002\u0284\u027f\u0003\u0002\u0002\u0002\u0284',
  '\u0280\u0003\u0002\u0002\u0002\u0284\u0281\u0003\u0002\u0002\u0002\u0284',
  '\u0282\u0003\u0002\u0002\u0002\u0284\u0283\u0003\u0002\u0002\u0002\u0285',
  'u\u0003\u0002\u0002\u0002\u0286\u0287\u0007\u0007\u0002\u0002\u0287',
  'w\u0003\u0002\u0002\u0002\u0288\u0289\u0007\u0004\u0002\u0002\u0289',
  'y\u0003\u0002\u0002\u0002\u028a\u028b\u0007\u0006\u0002\u0002\u028b',
  '{\u0003\u0002\u0002\u0002\u028c\u028d\u0007\u0005\u0002\u0002\u028d',
  '}\u0003\u0002\u0002\u0002\u028e\u028f\u0007\t\u0002\u0002\u028f\u007f',
  '\u0003\u0002\u0002\u0002\u0290\u0291\u0007C\u0002\u0002\u0291\u0081',
  '\u0003\u0002\u0002\u0002\u0292\u0293\t\u0010\u0002\u0002\u0293\u0083',
  '\u0003\u0002\u0002\u0002\u0294\u0295\u0007\u0017\u0002\u0002\u0295\u0085',
  '\u0003\u0002\u0002\u0002\u0296\u0297\t\u0011\u0002\u0002\u0297\u0087',
  '\u0003\u0002\u0002\u0002\u0298\u029c\t\u0012\u0002\u0002\u0299\u029c',
  '\t\u0013\u0002\u0002\u029a\u029c\u0007\u0003\u0002\u0002\u029b\u0298',
  '\u0003\u0002\u0002\u0002\u029b\u0299\u0003\u0002\u0002\u0002\u029b\u029a',
  '\u0003\u0002\u0002\u0002\u029c\u0089\u0003\u0002\u0002\u0002\u029d\u02a6',
  '\u0005v<\u0002\u029e\u02a6\u0005x=\u0002\u029f\u02a6\u0005z>\u0002\u02a0',
  '\u02a6\u0005|?\u0002\u02a1\u02a6\t\u0014\u0002\u0002\u02a2\u02a6\t\u0015',
  '\u0002\u0002\u02a3\u02a6\t\u0016\u0002\u0002\u02a4\u02a6\u0007\u0003',
  '\u0002\u0002\u02a5\u029d\u0003\u0002\u0002\u0002\u02a5\u029e\u0003\u0002',
  '\u0002\u0002\u02a5\u029f\u0003\u0002\u0002\u0002\u02a5\u02a0\u0003\u0002',
  '\u0002\u0002\u02a5\u02a1\u0003\u0002\u0002\u0002\u02a5\u02a2\u0003\u0002',
  '\u0002\u0002\u02a5\u02a3\u0003\u0002\u0002\u0002\u02a5\u02a4\u0003\u0002',
  '\u0002\u0002\u02a6\u008b\u0003\u0002\u0002\u0002\u02a7\u02a8\u0005\u0080',
  'A\u0002\u02a8\u02a9\u0005~@\u0002\u02a9\u02ae\u0003\u0002\u0002\u0002',
  '\u02aa\u02ab\u0005\u0080A\u0002\u02ab\u02ac\u0005\u0080A\u0002\u02ac',
  '\u02ae\u0003\u0002\u0002\u0002\u02ad\u02a7\u0003\u0002\u0002\u0002\u02ad',
  '\u02aa\u0003\u0002\u0002\u0002\u02ae\u008d\u0003\u0002\u0002\u00028',
  '\u0093\u00a0\u00aa\u00b4\u00c2\u00cb\u00d0\u00d9\u00dd\u00eb\u00f2\u00f7',
  '\u00fc\u0100\u010b\u0122\u0133\u013c\u0145\u014f\u0155\u015e\u0167\u0170',
  '\u0177\u0184\u0189\u019c\u01a9\u01b4\u01bf\u01c4\u01c7\u01cb\u01cf\u01d1',
  '\u01d7\u01db\u01e2\u01e8\u01ec\u01f5\u024f\u0256\u0258\u0260\u0262\u0269',
  '\u026b\u0278\u0284\u029b\u02a5\u02ad',
].join('')

var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN)

var decisionsToDFA = atn.decisionToState.map(function(ds, index) {
  return new antlr4.dfa.DFA(ds, index)
})

var sharedContextCache = new antlr4.PredictionContextCache()

var literalNames = [
  null,
  null,
  "'\u0009'",
  "'\u000A'",
  "'\u000D'",
  "' '",
  "'!'",
  "'\"'",
  "'#'",
  "'$'",
  "'%'",
  "'&'",
  "'''",
  "'('",
  "')'",
  "'*'",
  "'+'",
  "','",
  "'-'",
  "'.'",
  "'/'",
  "'0'",
  "'1'",
  "'2'",
  "'3'",
  "'4'",
  "'5'",
  "'6'",
  "'7'",
  "'8'",
  "'9'",
  "':'",
  "';'",
  "'<'",
  "'='",
  "'>'",
  "'?'",
  "'@'",
  "'A'",
  "'B'",
  "'C'",
  "'D'",
  "'E'",
  "'F'",
  "'G'",
  "'H'",
  "'I'",
  "'J'",
  "'K'",
  "'L'",
  "'M'",
  "'N'",
  "'O'",
  "'P'",
  "'Q'",
  "'R'",
  "'S'",
  "'T'",
  "'U'",
  "'V'",
  "'W'",
  "'X'",
  "'Y'",
  "'Z'",
  "'['",
  "'\\'",
  "']'",
  "'^'",
  "'_'",
  "'`'",
  "'a'",
  "'b'",
  "'c'",
  "'d'",
  "'e'",
  "'f'",
  "'g'",
  "'h'",
  "'i'",
  "'j'",
  "'k'",
  "'l'",
  "'m'",
  "'n'",
  "'o'",
  "'p'",
  "'q'",
  "'r'",
  "'s'",
  "'t'",
  "'u'",
  "'v'",
  "'w'",
  "'x'",
  "'y'",
  "'z'",
  "'{'",
  "'|'",
  "'}'",
  "'~'",
]

var symbolicNames = [
  null,
  'UTF8_LETTER',
  'TAB',
  'LF',
  'CR',
  'SPACE',
  'EXCLAMATION',
  'QUOTE',
  'POUND',
  'DOLLAR',
  'PERCENT',
  'AMPERSAND',
  'APOSTROPHE',
  'LEFT_PAREN',
  'RIGHT_PAREN',
  'ASTERISK',
  'PLUS',
  'COMMA',
  'DASH',
  'PERIOD',
  'SLASH',
  'ZERO',
  'ONE',
  'TWO',
  'THREE',
  'FOUR',
  'FIVE',
  'SIX',
  'SEVEN',
  'EIGHT',
  'NINE',
  'COLON',
  'SEMICOLON',
  'LESS_THAN',
  'EQUALS',
  'GREATER_THAN',
  'QUESTION',
  'AT',
  'CAP_A',
  'CAP_B',
  'CAP_C',
  'CAP_D',
  'CAP_E',
  'CAP_F',
  'CAP_G',
  'CAP_H',
  'CAP_I',
  'CAP_J',
  'CAP_K',
  'CAP_L',
  'CAP_M',
  'CAP_N',
  'CAP_O',
  'CAP_P',
  'CAP_Q',
  'CAP_R',
  'CAP_S',
  'CAP_T',
  'CAP_U',
  'CAP_V',
  'CAP_W',
  'CAP_X',
  'CAP_Y',
  'CAP_Z',
  'LEFT_BRACE',
  'BACKSLASH',
  'RIGHT_BRACE',
  'CARAT',
  'UNDERSCORE',
  'ACCENT',
  'A',
  'B',
  'C',
  'D',
  'E',
  'F',
  'G',
  'H',
  'I',
  'J',
  'K',
  'L',
  'M',
  'N',
  'O',
  'P',
  'Q',
  'R',
  'S',
  'T',
  'U',
  'V',
  'W',
  'X',
  'Y',
  'Z',
  'LEFT_CURLY_BRACE',
  'PIPE',
  'RIGHT_CURLY_BRACE',
  'TILDE',
]

var ruleNames = [
  'expressionconstraint',
  'refinedexpressionconstraint',
  'compoundexpressionconstraint',
  'conjunctionexpressionconstraint',
  'disjunctionexpressionconstraint',
  'exclusionexpressionconstraint',
  'dottedexpressionconstraint',
  'dottedexpressionattribute',
  'subexpressionconstraint',
  'eclfocusconcept',
  'dot',
  'memberof',
  'eclconceptreference',
  'conceptid',
  'term',
  'wildcard',
  'constraintoperator',
  'descendantof',
  'descendantorselfof',
  'childof',
  'ancestorof',
  'ancestororselfof',
  'parentof',
  'conjunction',
  'disjunction',
  'exclusion',
  'eclrefinement',
  'conjunctionrefinementset',
  'disjunctionrefinementset',
  'subrefinement',
  'eclattributeset',
  'conjunctionattributeset',
  'disjunctionattributeset',
  'subattributeset',
  'eclattributegroup',
  'eclattribute',
  'cardinality',
  'minvalue',
  'to',
  'maxvalue',
  'many',
  'reverseflag',
  'eclattributename',
  'expressioncomparisonoperator',
  'numericcomparisonoperator',
  'stringcomparisonoperator',
  'numericvalue',
  'stringvalue',
  'integervalue',
  'decimalvalue',
  'nonnegativeintegervalue',
  'sctid',
  'ws',
  'mws',
  'comment',
  'nonstarchar',
  'starwithnonfslash',
  'nonfslash',
  'sp',
  'htab',
  'cr',
  'lf',
  'qm',
  'bs',
  'digit',
  'zero',
  'digitnonzero',
  'nonwsnonpipe',
  'anynonescapedchar',
  'escapedchar',
]

function ECLParser(input) {
  antlr4.Parser.call(this, input)
  this._interp = new antlr4.atn.ParserATNSimulator(
    this,
    atn,
    decisionsToDFA,
    sharedContextCache
  )
  this.ruleNames = ruleNames
  this.literalNames = literalNames
  this.symbolicNames = symbolicNames
  return this
}

ECLParser.prototype = Object.create(antlr4.Parser.prototype)
ECLParser.prototype.constructor = ECLParser

Object.defineProperty(ECLParser.prototype, 'atn', {
  get: function() {
    return atn
  },
})

ECLParser.EOF = antlr4.Token.EOF
ECLParser.UTF8_LETTER = 1
ECLParser.TAB = 2
ECLParser.LF = 3
ECLParser.CR = 4
ECLParser.SPACE = 5
ECLParser.EXCLAMATION = 6
ECLParser.QUOTE = 7
ECLParser.POUND = 8
ECLParser.DOLLAR = 9
ECLParser.PERCENT = 10
ECLParser.AMPERSAND = 11
ECLParser.APOSTROPHE = 12
ECLParser.LEFT_PAREN = 13
ECLParser.RIGHT_PAREN = 14
ECLParser.ASTERISK = 15
ECLParser.PLUS = 16
ECLParser.COMMA = 17
ECLParser.DASH = 18
ECLParser.PERIOD = 19
ECLParser.SLASH = 20
ECLParser.ZERO = 21
ECLParser.ONE = 22
ECLParser.TWO = 23
ECLParser.THREE = 24
ECLParser.FOUR = 25
ECLParser.FIVE = 26
ECLParser.SIX = 27
ECLParser.SEVEN = 28
ECLParser.EIGHT = 29
ECLParser.NINE = 30
ECLParser.COLON = 31
ECLParser.SEMICOLON = 32
ECLParser.LESS_THAN = 33
ECLParser.EQUALS = 34
ECLParser.GREATER_THAN = 35
ECLParser.QUESTION = 36
ECLParser.AT = 37
ECLParser.CAP_A = 38
ECLParser.CAP_B = 39
ECLParser.CAP_C = 40
ECLParser.CAP_D = 41
ECLParser.CAP_E = 42
ECLParser.CAP_F = 43
ECLParser.CAP_G = 44
ECLParser.CAP_H = 45
ECLParser.CAP_I = 46
ECLParser.CAP_J = 47
ECLParser.CAP_K = 48
ECLParser.CAP_L = 49
ECLParser.CAP_M = 50
ECLParser.CAP_N = 51
ECLParser.CAP_O = 52
ECLParser.CAP_P = 53
ECLParser.CAP_Q = 54
ECLParser.CAP_R = 55
ECLParser.CAP_S = 56
ECLParser.CAP_T = 57
ECLParser.CAP_U = 58
ECLParser.CAP_V = 59
ECLParser.CAP_W = 60
ECLParser.CAP_X = 61
ECLParser.CAP_Y = 62
ECLParser.CAP_Z = 63
ECLParser.LEFT_BRACE = 64
ECLParser.BACKSLASH = 65
ECLParser.RIGHT_BRACE = 66
ECLParser.CARAT = 67
ECLParser.UNDERSCORE = 68
ECLParser.ACCENT = 69
ECLParser.A = 70
ECLParser.B = 71
ECLParser.C = 72
ECLParser.D = 73
ECLParser.E = 74
ECLParser.F = 75
ECLParser.G = 76
ECLParser.H = 77
ECLParser.I = 78
ECLParser.J = 79
ECLParser.K = 80
ECLParser.L = 81
ECLParser.M = 82
ECLParser.N = 83
ECLParser.O = 84
ECLParser.P = 85
ECLParser.Q = 86
ECLParser.R = 87
ECLParser.S = 88
ECLParser.T = 89
ECLParser.U = 90
ECLParser.V = 91
ECLParser.W = 92
ECLParser.X = 93
ECLParser.Y = 94
ECLParser.Z = 95
ECLParser.LEFT_CURLY_BRACE = 96
ECLParser.PIPE = 97
ECLParser.RIGHT_CURLY_BRACE = 98
ECLParser.TILDE = 99

ECLParser.RULE_expressionconstraint = 0
ECLParser.RULE_refinedexpressionconstraint = 1
ECLParser.RULE_compoundexpressionconstraint = 2
ECLParser.RULE_conjunctionexpressionconstraint = 3
ECLParser.RULE_disjunctionexpressionconstraint = 4
ECLParser.RULE_exclusionexpressionconstraint = 5
ECLParser.RULE_dottedexpressionconstraint = 6
ECLParser.RULE_dottedexpressionattribute = 7
ECLParser.RULE_subexpressionconstraint = 8
ECLParser.RULE_eclfocusconcept = 9
ECLParser.RULE_dot = 10
ECLParser.RULE_memberof = 11
ECLParser.RULE_eclconceptreference = 12
ECLParser.RULE_conceptid = 13
ECLParser.RULE_term = 14
ECLParser.RULE_wildcard = 15
ECLParser.RULE_constraintoperator = 16
ECLParser.RULE_descendantof = 17
ECLParser.RULE_descendantorselfof = 18
ECLParser.RULE_childof = 19
ECLParser.RULE_ancestorof = 20
ECLParser.RULE_ancestororselfof = 21
ECLParser.RULE_parentof = 22
ECLParser.RULE_conjunction = 23
ECLParser.RULE_disjunction = 24
ECLParser.RULE_exclusion = 25
ECLParser.RULE_eclrefinement = 26
ECLParser.RULE_conjunctionrefinementset = 27
ECLParser.RULE_disjunctionrefinementset = 28
ECLParser.RULE_subrefinement = 29
ECLParser.RULE_eclattributeset = 30
ECLParser.RULE_conjunctionattributeset = 31
ECLParser.RULE_disjunctionattributeset = 32
ECLParser.RULE_subattributeset = 33
ECLParser.RULE_eclattributegroup = 34
ECLParser.RULE_eclattribute = 35
ECLParser.RULE_cardinality = 36
ECLParser.RULE_minvalue = 37
ECLParser.RULE_to = 38
ECLParser.RULE_maxvalue = 39
ECLParser.RULE_many = 40
ECLParser.RULE_reverseflag = 41
ECLParser.RULE_eclattributename = 42
ECLParser.RULE_expressioncomparisonoperator = 43
ECLParser.RULE_numericcomparisonoperator = 44
ECLParser.RULE_stringcomparisonoperator = 45
ECLParser.RULE_numericvalue = 46
ECLParser.RULE_stringvalue = 47
ECLParser.RULE_integervalue = 48
ECLParser.RULE_decimalvalue = 49
ECLParser.RULE_nonnegativeintegervalue = 50
ECLParser.RULE_sctid = 51
ECLParser.RULE_ws = 52
ECLParser.RULE_mws = 53
ECLParser.RULE_comment = 54
ECLParser.RULE_nonstarchar = 55
ECLParser.RULE_starwithnonfslash = 56
ECLParser.RULE_nonfslash = 57
ECLParser.RULE_sp = 58
ECLParser.RULE_htab = 59
ECLParser.RULE_cr = 60
ECLParser.RULE_lf = 61
ECLParser.RULE_qm = 62
ECLParser.RULE_bs = 63
ECLParser.RULE_digit = 64
ECLParser.RULE_zero = 65
ECLParser.RULE_digitnonzero = 66
ECLParser.RULE_nonwsnonpipe = 67
ECLParser.RULE_anynonescapedchar = 68
ECLParser.RULE_escapedchar = 69

function ExpressionconstraintContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = ECLParser.RULE_expressionconstraint
  return this
}

ExpressionconstraintContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
)
ExpressionconstraintContext.prototype.constructor = ExpressionconstraintContext

ExpressionconstraintContext.prototype.ws = function(i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTypedRuleContexts(WsContext)
  } else {
    return this.getTypedRuleContext(WsContext, i)
  }
}

ExpressionconstraintContext.prototype.refinedexpressionconstraint = function() {
  return this.getTypedRuleContext(RefinedexpressionconstraintContext, 0)
}

ExpressionconstraintContext.prototype.compoundexpressionconstraint = function() {
  return this.getTypedRuleContext(CompoundexpressionconstraintContext, 0)
}

ExpressionconstraintContext.prototype.dottedexpressionconstraint = function() {
  return this.getTypedRuleContext(DottedexpressionconstraintContext, 0)
}

ExpressionconstraintContext.prototype.subexpressionconstraint = function() {
  return this.getTypedRuleContext(SubexpressionconstraintContext, 0)
}

ExpressionconstraintContext.prototype.enterRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.enterExpressionconstraint(this)
  }
}

ExpressionconstraintContext.prototype.exitRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.exitExpressionconstraint(this)
  }
}

ExpressionconstraintContext.prototype.accept = function(visitor) {
  if (visitor instanceof ECLVisitor) {
    return visitor.visitExpressionconstraint(this)
  } else {
    return visitor.visitChildren(this)
  }
}

ECLParser.ExpressionconstraintContext = ExpressionconstraintContext

ECLParser.prototype.expressionconstraint = function() {
  var localctx = new ExpressionconstraintContext(this, this._ctx, this.state)
  this.enterRule(localctx, 0, ECLParser.RULE_expressionconstraint)
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 140
    this.ws()
    this.state = 145
    this._errHandler.sync(this)

    var la_ = this._interp.adaptivePredict(this._input, 0, this._ctx)
    switch (la_) {
      case 1:
        this.state = 141
        this.refinedexpressionconstraint()
        break

      case 2:
        this.state = 142
        this.compoundexpressionconstraint()
        break

      case 3:
        this.state = 143
        this.dottedexpressionconstraint()
        break

      case 4:
        this.state = 144
        this.subexpressionconstraint()
        break
    }
    this.state = 147
    this.ws()
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re
      this._errHandler.reportError(this, re)
      this._errHandler.recover(this, re)
    } else {
      throw re
    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function RefinedexpressionconstraintContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = ECLParser.RULE_refinedexpressionconstraint
  return this
}

RefinedexpressionconstraintContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
)
RefinedexpressionconstraintContext.prototype.constructor = RefinedexpressionconstraintContext

RefinedexpressionconstraintContext.prototype.subexpressionconstraint = function() {
  return this.getTypedRuleContext(SubexpressionconstraintContext, 0)
}

RefinedexpressionconstraintContext.prototype.ws = function(i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTypedRuleContexts(WsContext)
  } else {
    return this.getTypedRuleContext(WsContext, i)
  }
}

RefinedexpressionconstraintContext.prototype.COLON = function() {
  return this.getToken(ECLParser.COLON, 0)
}

RefinedexpressionconstraintContext.prototype.eclrefinement = function() {
  return this.getTypedRuleContext(EclrefinementContext, 0)
}

RefinedexpressionconstraintContext.prototype.enterRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.enterRefinedexpressionconstraint(this)
  }
}

RefinedexpressionconstraintContext.prototype.exitRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.exitRefinedexpressionconstraint(this)
  }
}

RefinedexpressionconstraintContext.prototype.accept = function(visitor) {
  if (visitor instanceof ECLVisitor) {
    return visitor.visitRefinedexpressionconstraint(this)
  } else {
    return visitor.visitChildren(this)
  }
}

ECLParser.RefinedexpressionconstraintContext = RefinedexpressionconstraintContext

ECLParser.prototype.refinedexpressionconstraint = function() {
  var localctx = new RefinedexpressionconstraintContext(
    this,
    this._ctx,
    this.state
  )
  this.enterRule(localctx, 2, ECLParser.RULE_refinedexpressionconstraint)
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 149
    this.subexpressionconstraint()
    this.state = 150
    this.ws()
    this.state = 151
    this.match(ECLParser.COLON)
    this.state = 152
    this.ws()
    this.state = 153
    this.eclrefinement()
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re
      this._errHandler.reportError(this, re)
      this._errHandler.recover(this, re)
    } else {
      throw re
    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function CompoundexpressionconstraintContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = ECLParser.RULE_compoundexpressionconstraint
  return this
}

CompoundexpressionconstraintContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
)
CompoundexpressionconstraintContext.prototype.constructor = CompoundexpressionconstraintContext

CompoundexpressionconstraintContext.prototype.conjunctionexpressionconstraint = function() {
  return this.getTypedRuleContext(ConjunctionexpressionconstraintContext, 0)
}

CompoundexpressionconstraintContext.prototype.disjunctionexpressionconstraint = function() {
  return this.getTypedRuleContext(DisjunctionexpressionconstraintContext, 0)
}

CompoundexpressionconstraintContext.prototype.exclusionexpressionconstraint = function() {
  return this.getTypedRuleContext(ExclusionexpressionconstraintContext, 0)
}

CompoundexpressionconstraintContext.prototype.enterRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.enterCompoundexpressionconstraint(this)
  }
}

CompoundexpressionconstraintContext.prototype.exitRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.exitCompoundexpressionconstraint(this)
  }
}

CompoundexpressionconstraintContext.prototype.accept = function(visitor) {
  if (visitor instanceof ECLVisitor) {
    return visitor.visitCompoundexpressionconstraint(this)
  } else {
    return visitor.visitChildren(this)
  }
}

ECLParser.CompoundexpressionconstraintContext = CompoundexpressionconstraintContext

ECLParser.prototype.compoundexpressionconstraint = function() {
  var localctx = new CompoundexpressionconstraintContext(
    this,
    this._ctx,
    this.state
  )
  this.enterRule(localctx, 4, ECLParser.RULE_compoundexpressionconstraint)
  try {
    this.state = 158
    this._errHandler.sync(this)
    var la_ = this._interp.adaptivePredict(this._input, 1, this._ctx)
    switch (la_) {
      case 1:
        this.enterOuterAlt(localctx, 1)
        this.state = 155
        this.conjunctionexpressionconstraint()
        break

      case 2:
        this.enterOuterAlt(localctx, 2)
        this.state = 156
        this.disjunctionexpressionconstraint()
        break

      case 3:
        this.enterOuterAlt(localctx, 3)
        this.state = 157
        this.exclusionexpressionconstraint()
        break
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re
      this._errHandler.reportError(this, re)
      this._errHandler.recover(this, re)
    } else {
      throw re
    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function ConjunctionexpressionconstraintContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = ECLParser.RULE_conjunctionexpressionconstraint
  return this
}

ConjunctionexpressionconstraintContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
)
ConjunctionexpressionconstraintContext.prototype.constructor = ConjunctionexpressionconstraintContext

ConjunctionexpressionconstraintContext.prototype.subexpressionconstraint = function(
  i
) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTypedRuleContexts(SubexpressionconstraintContext)
  } else {
    return this.getTypedRuleContext(SubexpressionconstraintContext, i)
  }
}

ConjunctionexpressionconstraintContext.prototype.ws = function(i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTypedRuleContexts(WsContext)
  } else {
    return this.getTypedRuleContext(WsContext, i)
  }
}

ConjunctionexpressionconstraintContext.prototype.conjunction = function(i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTypedRuleContexts(ConjunctionContext)
  } else {
    return this.getTypedRuleContext(ConjunctionContext, i)
  }
}

ConjunctionexpressionconstraintContext.prototype.enterRule = function(
  listener
) {
  if (listener instanceof ECLListener) {
    listener.enterConjunctionexpressionconstraint(this)
  }
}

ConjunctionexpressionconstraintContext.prototype.exitRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.exitConjunctionexpressionconstraint(this)
  }
}

ConjunctionexpressionconstraintContext.prototype.accept = function(visitor) {
  if (visitor instanceof ECLVisitor) {
    return visitor.visitConjunctionexpressionconstraint(this)
  } else {
    return visitor.visitChildren(this)
  }
}

ECLParser.ConjunctionexpressionconstraintContext = ConjunctionexpressionconstraintContext

ECLParser.prototype.conjunctionexpressionconstraint = function() {
  var localctx = new ConjunctionexpressionconstraintContext(
    this,
    this._ctx,
    this.state
  )
  this.enterRule(localctx, 6, ECLParser.RULE_conjunctionexpressionconstraint)
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 160
    this.subexpressionconstraint()
    this.state = 166
    this._errHandler.sync(this)
    var _alt = 1
    do {
      switch (_alt) {
        case 1:
          this.state = 161
          this.ws()
          this.state = 162
          this.conjunction()
          this.state = 163
          this.ws()
          this.state = 164
          this.subexpressionconstraint()
          break
        default:
          throw new antlr4.error.NoViableAltException(this)
      }
      this.state = 168
      this._errHandler.sync(this)
      _alt = this._interp.adaptivePredict(this._input, 2, this._ctx)
    } while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER)
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re
      this._errHandler.reportError(this, re)
      this._errHandler.recover(this, re)
    } else {
      throw re
    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function DisjunctionexpressionconstraintContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = ECLParser.RULE_disjunctionexpressionconstraint
  return this
}

DisjunctionexpressionconstraintContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
)
DisjunctionexpressionconstraintContext.prototype.constructor = DisjunctionexpressionconstraintContext

DisjunctionexpressionconstraintContext.prototype.subexpressionconstraint = function(
  i
) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTypedRuleContexts(SubexpressionconstraintContext)
  } else {
    return this.getTypedRuleContext(SubexpressionconstraintContext, i)
  }
}

DisjunctionexpressionconstraintContext.prototype.ws = function(i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTypedRuleContexts(WsContext)
  } else {
    return this.getTypedRuleContext(WsContext, i)
  }
}

DisjunctionexpressionconstraintContext.prototype.disjunction = function(i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTypedRuleContexts(DisjunctionContext)
  } else {
    return this.getTypedRuleContext(DisjunctionContext, i)
  }
}

DisjunctionexpressionconstraintContext.prototype.enterRule = function(
  listener
) {
  if (listener instanceof ECLListener) {
    listener.enterDisjunctionexpressionconstraint(this)
  }
}

DisjunctionexpressionconstraintContext.prototype.exitRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.exitDisjunctionexpressionconstraint(this)
  }
}

DisjunctionexpressionconstraintContext.prototype.accept = function(visitor) {
  if (visitor instanceof ECLVisitor) {
    return visitor.visitDisjunctionexpressionconstraint(this)
  } else {
    return visitor.visitChildren(this)
  }
}

ECLParser.DisjunctionexpressionconstraintContext = DisjunctionexpressionconstraintContext

ECLParser.prototype.disjunctionexpressionconstraint = function() {
  var localctx = new DisjunctionexpressionconstraintContext(
    this,
    this._ctx,
    this.state
  )
  this.enterRule(localctx, 8, ECLParser.RULE_disjunctionexpressionconstraint)
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 170
    this.subexpressionconstraint()
    this.state = 176
    this._errHandler.sync(this)
    var _alt = 1
    do {
      switch (_alt) {
        case 1:
          this.state = 171
          this.ws()
          this.state = 172
          this.disjunction()
          this.state = 173
          this.ws()
          this.state = 174
          this.subexpressionconstraint()
          break
        default:
          throw new antlr4.error.NoViableAltException(this)
      }
      this.state = 178
      this._errHandler.sync(this)
      _alt = this._interp.adaptivePredict(this._input, 3, this._ctx)
    } while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER)
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re
      this._errHandler.reportError(this, re)
      this._errHandler.recover(this, re)
    } else {
      throw re
    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function ExclusionexpressionconstraintContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = ECLParser.RULE_exclusionexpressionconstraint
  return this
}

ExclusionexpressionconstraintContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
)
ExclusionexpressionconstraintContext.prototype.constructor = ExclusionexpressionconstraintContext

ExclusionexpressionconstraintContext.prototype.subexpressionconstraint = function(
  i
) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTypedRuleContexts(SubexpressionconstraintContext)
  } else {
    return this.getTypedRuleContext(SubexpressionconstraintContext, i)
  }
}

ExclusionexpressionconstraintContext.prototype.ws = function(i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTypedRuleContexts(WsContext)
  } else {
    return this.getTypedRuleContext(WsContext, i)
  }
}

ExclusionexpressionconstraintContext.prototype.exclusion = function() {
  return this.getTypedRuleContext(ExclusionContext, 0)
}

ExclusionexpressionconstraintContext.prototype.enterRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.enterExclusionexpressionconstraint(this)
  }
}

ExclusionexpressionconstraintContext.prototype.exitRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.exitExclusionexpressionconstraint(this)
  }
}

ExclusionexpressionconstraintContext.prototype.accept = function(visitor) {
  if (visitor instanceof ECLVisitor) {
    return visitor.visitExclusionexpressionconstraint(this)
  } else {
    return visitor.visitChildren(this)
  }
}

ECLParser.ExclusionexpressionconstraintContext = ExclusionexpressionconstraintContext

ECLParser.prototype.exclusionexpressionconstraint = function() {
  var localctx = new ExclusionexpressionconstraintContext(
    this,
    this._ctx,
    this.state
  )
  this.enterRule(localctx, 10, ECLParser.RULE_exclusionexpressionconstraint)
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 180
    this.subexpressionconstraint()
    this.state = 181
    this.ws()
    this.state = 182
    this.exclusion()
    this.state = 183
    this.ws()
    this.state = 184
    this.subexpressionconstraint()
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re
      this._errHandler.reportError(this, re)
      this._errHandler.recover(this, re)
    } else {
      throw re
    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function DottedexpressionconstraintContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = ECLParser.RULE_dottedexpressionconstraint
  return this
}

DottedexpressionconstraintContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
)
DottedexpressionconstraintContext.prototype.constructor = DottedexpressionconstraintContext

DottedexpressionconstraintContext.prototype.subexpressionconstraint = function() {
  return this.getTypedRuleContext(SubexpressionconstraintContext, 0)
}

DottedexpressionconstraintContext.prototype.ws = function(i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTypedRuleContexts(WsContext)
  } else {
    return this.getTypedRuleContext(WsContext, i)
  }
}

DottedexpressionconstraintContext.prototype.dottedexpressionattribute = function(
  i
) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTypedRuleContexts(DottedexpressionattributeContext)
  } else {
    return this.getTypedRuleContext(DottedexpressionattributeContext, i)
  }
}

DottedexpressionconstraintContext.prototype.enterRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.enterDottedexpressionconstraint(this)
  }
}

DottedexpressionconstraintContext.prototype.exitRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.exitDottedexpressionconstraint(this)
  }
}

DottedexpressionconstraintContext.prototype.accept = function(visitor) {
  if (visitor instanceof ECLVisitor) {
    return visitor.visitDottedexpressionconstraint(this)
  } else {
    return visitor.visitChildren(this)
  }
}

ECLParser.DottedexpressionconstraintContext = DottedexpressionconstraintContext

ECLParser.prototype.dottedexpressionconstraint = function() {
  var localctx = new DottedexpressionconstraintContext(
    this,
    this._ctx,
    this.state
  )
  this.enterRule(localctx, 12, ECLParser.RULE_dottedexpressionconstraint)
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 186
    this.subexpressionconstraint()
    this.state = 190
    this._errHandler.sync(this)
    var _alt = 1
    do {
      switch (_alt) {
        case 1:
          this.state = 187
          this.ws()
          this.state = 188
          this.dottedexpressionattribute()
          break
        default:
          throw new antlr4.error.NoViableAltException(this)
      }
      this.state = 192
      this._errHandler.sync(this)
      _alt = this._interp.adaptivePredict(this._input, 4, this._ctx)
    } while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER)
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re
      this._errHandler.reportError(this, re)
      this._errHandler.recover(this, re)
    } else {
      throw re
    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function DottedexpressionattributeContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = ECLParser.RULE_dottedexpressionattribute
  return this
}

DottedexpressionattributeContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
)
DottedexpressionattributeContext.prototype.constructor = DottedexpressionattributeContext

DottedexpressionattributeContext.prototype.dot = function() {
  return this.getTypedRuleContext(DotContext, 0)
}

DottedexpressionattributeContext.prototype.ws = function() {
  return this.getTypedRuleContext(WsContext, 0)
}

DottedexpressionattributeContext.prototype.eclattributename = function() {
  return this.getTypedRuleContext(EclattributenameContext, 0)
}

DottedexpressionattributeContext.prototype.enterRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.enterDottedexpressionattribute(this)
  }
}

DottedexpressionattributeContext.prototype.exitRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.exitDottedexpressionattribute(this)
  }
}

DottedexpressionattributeContext.prototype.accept = function(visitor) {
  if (visitor instanceof ECLVisitor) {
    return visitor.visitDottedexpressionattribute(this)
  } else {
    return visitor.visitChildren(this)
  }
}

ECLParser.DottedexpressionattributeContext = DottedexpressionattributeContext

ECLParser.prototype.dottedexpressionattribute = function() {
  var localctx = new DottedexpressionattributeContext(
    this,
    this._ctx,
    this.state
  )
  this.enterRule(localctx, 14, ECLParser.RULE_dottedexpressionattribute)
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 194
    this.dot()
    this.state = 195
    this.ws()
    this.state = 196
    this.eclattributename()
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re
      this._errHandler.reportError(this, re)
      this._errHandler.recover(this, re)
    } else {
      throw re
    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function SubexpressionconstraintContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = ECLParser.RULE_subexpressionconstraint
  return this
}

SubexpressionconstraintContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
)
SubexpressionconstraintContext.prototype.constructor = SubexpressionconstraintContext

SubexpressionconstraintContext.prototype.eclfocusconcept = function() {
  return this.getTypedRuleContext(EclfocusconceptContext, 0)
}

SubexpressionconstraintContext.prototype.constraintoperator = function() {
  return this.getTypedRuleContext(ConstraintoperatorContext, 0)
}

SubexpressionconstraintContext.prototype.ws = function(i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTypedRuleContexts(WsContext)
  } else {
    return this.getTypedRuleContext(WsContext, i)
  }
}

SubexpressionconstraintContext.prototype.memberof = function() {
  return this.getTypedRuleContext(MemberofContext, 0)
}

SubexpressionconstraintContext.prototype.LEFT_PAREN = function() {
  return this.getToken(ECLParser.LEFT_PAREN, 0)
}

SubexpressionconstraintContext.prototype.expressionconstraint = function() {
  return this.getTypedRuleContext(ExpressionconstraintContext, 0)
}

SubexpressionconstraintContext.prototype.RIGHT_PAREN = function() {
  return this.getToken(ECLParser.RIGHT_PAREN, 0)
}

SubexpressionconstraintContext.prototype.enterRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.enterSubexpressionconstraint(this)
  }
}

SubexpressionconstraintContext.prototype.exitRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.exitSubexpressionconstraint(this)
  }
}

SubexpressionconstraintContext.prototype.accept = function(visitor) {
  if (visitor instanceof ECLVisitor) {
    return visitor.visitSubexpressionconstraint(this)
  } else {
    return visitor.visitChildren(this)
  }
}

ECLParser.SubexpressionconstraintContext = SubexpressionconstraintContext

ECLParser.prototype.subexpressionconstraint = function() {
  var localctx = new SubexpressionconstraintContext(this, this._ctx, this.state)
  this.enterRule(localctx, 16, ECLParser.RULE_subexpressionconstraint)
  var _la = 0 // Token type
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 201
    this._errHandler.sync(this)
    _la = this._input.LA(1)
    if (_la === ECLParser.LESS_THAN || _la === ECLParser.GREATER_THAN) {
      this.state = 198
      this.constraintoperator()
      this.state = 199
      this.ws()
    }

    this.state = 206
    this._errHandler.sync(this)
    _la = this._input.LA(1)
    if (_la === ECLParser.CARAT) {
      this.state = 203
      this.memberof()
      this.state = 204
      this.ws()
    }

    this.state = 215
    this._errHandler.sync(this)
    switch (this._input.LA(1)) {
      case ECLParser.ASTERISK:
      case ECLParser.ONE:
      case ECLParser.TWO:
      case ECLParser.THREE:
      case ECLParser.FOUR:
      case ECLParser.FIVE:
      case ECLParser.SIX:
      case ECLParser.SEVEN:
      case ECLParser.EIGHT:
      case ECLParser.NINE:
        this.state = 208
        this.eclfocusconcept()
        break
      case ECLParser.LEFT_PAREN:
        this.state = 209
        this.match(ECLParser.LEFT_PAREN)
        this.state = 210
        this.ws()
        this.state = 211
        this.expressionconstraint()
        this.state = 212
        this.ws()
        this.state = 213
        this.match(ECLParser.RIGHT_PAREN)
        break
      default:
        throw new antlr4.error.NoViableAltException(this)
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re
      this._errHandler.reportError(this, re)
      this._errHandler.recover(this, re)
    } else {
      throw re
    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function EclfocusconceptContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = ECLParser.RULE_eclfocusconcept
  return this
}

EclfocusconceptContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
)
EclfocusconceptContext.prototype.constructor = EclfocusconceptContext

EclfocusconceptContext.prototype.eclconceptreference = function() {
  return this.getTypedRuleContext(EclconceptreferenceContext, 0)
}

EclfocusconceptContext.prototype.wildcard = function() {
  return this.getTypedRuleContext(WildcardContext, 0)
}

EclfocusconceptContext.prototype.enterRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.enterEclfocusconcept(this)
  }
}

EclfocusconceptContext.prototype.exitRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.exitEclfocusconcept(this)
  }
}

EclfocusconceptContext.prototype.accept = function(visitor) {
  if (visitor instanceof ECLVisitor) {
    return visitor.visitEclfocusconcept(this)
  } else {
    return visitor.visitChildren(this)
  }
}

ECLParser.EclfocusconceptContext = EclfocusconceptContext

ECLParser.prototype.eclfocusconcept = function() {
  var localctx = new EclfocusconceptContext(this, this._ctx, this.state)
  this.enterRule(localctx, 18, ECLParser.RULE_eclfocusconcept)
  try {
    this.state = 219
    this._errHandler.sync(this)
    switch (this._input.LA(1)) {
      case ECLParser.ONE:
      case ECLParser.TWO:
      case ECLParser.THREE:
      case ECLParser.FOUR:
      case ECLParser.FIVE:
      case ECLParser.SIX:
      case ECLParser.SEVEN:
      case ECLParser.EIGHT:
      case ECLParser.NINE:
        this.enterOuterAlt(localctx, 1)
        this.state = 217
        this.eclconceptreference()
        break
      case ECLParser.ASTERISK:
        this.enterOuterAlt(localctx, 2)
        this.state = 218
        this.wildcard()
        break
      default:
        throw new antlr4.error.NoViableAltException(this)
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re
      this._errHandler.reportError(this, re)
      this._errHandler.recover(this, re)
    } else {
      throw re
    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function DotContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = ECLParser.RULE_dot
  return this
}

DotContext.prototype = Object.create(antlr4.ParserRuleContext.prototype)
DotContext.prototype.constructor = DotContext

DotContext.prototype.PERIOD = function() {
  return this.getToken(ECLParser.PERIOD, 0)
}

DotContext.prototype.enterRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.enterDot(this)
  }
}

DotContext.prototype.exitRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.exitDot(this)
  }
}

DotContext.prototype.accept = function(visitor) {
  if (visitor instanceof ECLVisitor) {
    return visitor.visitDot(this)
  } else {
    return visitor.visitChildren(this)
  }
}

ECLParser.DotContext = DotContext

ECLParser.prototype.dot = function() {
  var localctx = new DotContext(this, this._ctx, this.state)
  this.enterRule(localctx, 20, ECLParser.RULE_dot)
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 221
    this.match(ECLParser.PERIOD)
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re
      this._errHandler.reportError(this, re)
      this._errHandler.recover(this, re)
    } else {
      throw re
    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function MemberofContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = ECLParser.RULE_memberof
  return this
}

MemberofContext.prototype = Object.create(antlr4.ParserRuleContext.prototype)
MemberofContext.prototype.constructor = MemberofContext

MemberofContext.prototype.CARAT = function() {
  return this.getToken(ECLParser.CARAT, 0)
}

MemberofContext.prototype.enterRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.enterMemberof(this)
  }
}

MemberofContext.prototype.exitRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.exitMemberof(this)
  }
}

MemberofContext.prototype.accept = function(visitor) {
  if (visitor instanceof ECLVisitor) {
    return visitor.visitMemberof(this)
  } else {
    return visitor.visitChildren(this)
  }
}

ECLParser.MemberofContext = MemberofContext

ECLParser.prototype.memberof = function() {
  var localctx = new MemberofContext(this, this._ctx, this.state)
  this.enterRule(localctx, 22, ECLParser.RULE_memberof)
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 223
    this.match(ECLParser.CARAT)
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re
      this._errHandler.reportError(this, re)
      this._errHandler.recover(this, re)
    } else {
      throw re
    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function EclconceptreferenceContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = ECLParser.RULE_eclconceptreference
  return this
}

EclconceptreferenceContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
)
EclconceptreferenceContext.prototype.constructor = EclconceptreferenceContext

EclconceptreferenceContext.prototype.conceptid = function() {
  return this.getTypedRuleContext(ConceptidContext, 0)
}

EclconceptreferenceContext.prototype.ws = function(i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTypedRuleContexts(WsContext)
  } else {
    return this.getTypedRuleContext(WsContext, i)
  }
}

EclconceptreferenceContext.prototype.PIPE = function(i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTokens(ECLParser.PIPE)
  } else {
    return this.getToken(ECLParser.PIPE, i)
  }
}

EclconceptreferenceContext.prototype.term = function() {
  return this.getTypedRuleContext(TermContext, 0)
}

EclconceptreferenceContext.prototype.enterRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.enterEclconceptreference(this)
  }
}

EclconceptreferenceContext.prototype.exitRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.exitEclconceptreference(this)
  }
}

EclconceptreferenceContext.prototype.accept = function(visitor) {
  if (visitor instanceof ECLVisitor) {
    return visitor.visitEclconceptreference(this)
  } else {
    return visitor.visitChildren(this)
  }
}

ECLParser.EclconceptreferenceContext = EclconceptreferenceContext

ECLParser.prototype.eclconceptreference = function() {
  var localctx = new EclconceptreferenceContext(this, this._ctx, this.state)
  this.enterRule(localctx, 24, ECLParser.RULE_eclconceptreference)
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 225
    this.conceptid()
    this.state = 233
    this._errHandler.sync(this)
    var la_ = this._interp.adaptivePredict(this._input, 9, this._ctx)
    if (la_ === 1) {
      this.state = 226
      this.ws()
      this.state = 227
      this.match(ECLParser.PIPE)
      this.state = 228
      this.ws()
      this.state = 229
      this.term()
      this.state = 230
      this.ws()
      this.state = 231
      this.match(ECLParser.PIPE)
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re
      this._errHandler.reportError(this, re)
      this._errHandler.recover(this, re)
    } else {
      throw re
    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function ConceptidContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = ECLParser.RULE_conceptid
  return this
}

ConceptidContext.prototype = Object.create(antlr4.ParserRuleContext.prototype)
ConceptidContext.prototype.constructor = ConceptidContext

ConceptidContext.prototype.sctid = function() {
  return this.getTypedRuleContext(SctidContext, 0)
}

ConceptidContext.prototype.enterRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.enterConceptid(this)
  }
}

ConceptidContext.prototype.exitRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.exitConceptid(this)
  }
}

ConceptidContext.prototype.accept = function(visitor) {
  if (visitor instanceof ECLVisitor) {
    return visitor.visitConceptid(this)
  } else {
    return visitor.visitChildren(this)
  }
}

ECLParser.ConceptidContext = ConceptidContext

ECLParser.prototype.conceptid = function() {
  var localctx = new ConceptidContext(this, this._ctx, this.state)
  this.enterRule(localctx, 26, ECLParser.RULE_conceptid)
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 235
    this.sctid()
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re
      this._errHandler.reportError(this, re)
      this._errHandler.recover(this, re)
    } else {
      throw re
    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function TermContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = ECLParser.RULE_term
  return this
}

TermContext.prototype = Object.create(antlr4.ParserRuleContext.prototype)
TermContext.prototype.constructor = TermContext

TermContext.prototype.nonwsnonpipe = function(i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTypedRuleContexts(NonwsnonpipeContext)
  } else {
    return this.getTypedRuleContext(NonwsnonpipeContext, i)
  }
}

TermContext.prototype.sp = function(i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTypedRuleContexts(SpContext)
  } else {
    return this.getTypedRuleContext(SpContext, i)
  }
}

TermContext.prototype.enterRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.enterTerm(this)
  }
}

TermContext.prototype.exitRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.exitTerm(this)
  }
}

TermContext.prototype.accept = function(visitor) {
  if (visitor instanceof ECLVisitor) {
    return visitor.visitTerm(this)
  } else {
    return visitor.visitChildren(this)
  }
}

ECLParser.TermContext = TermContext

ECLParser.prototype.term = function() {
  var localctx = new TermContext(this, this._ctx, this.state)
  this.enterRule(localctx, 28, ECLParser.RULE_term)
  var _la = 0 // Token type
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 238
    this._errHandler.sync(this)
    var _alt = 1
    do {
      switch (_alt) {
        case 1:
          this.state = 237
          this.nonwsnonpipe()
          break
        default:
          throw new antlr4.error.NoViableAltException(this)
      }
      this.state = 240
      this._errHandler.sync(this)
      _alt = this._interp.adaptivePredict(this._input, 10, this._ctx)
    } while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER)
    this.state = 254
    this._errHandler.sync(this)
    var _alt = this._interp.adaptivePredict(this._input, 13, this._ctx)
    while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
      if (_alt === 1) {
        this.state = 243
        this._errHandler.sync(this)
        _la = this._input.LA(1)
        do {
          this.state = 242
          this.sp()
          this.state = 245
          this._errHandler.sync(this)
          _la = this._input.LA(1)
        } while (_la === ECLParser.SPACE)
        this.state = 248
        this._errHandler.sync(this)
        var _alt = 1
        do {
          switch (_alt) {
            case 1:
              this.state = 247
              this.nonwsnonpipe()
              break
            default:
              throw new antlr4.error.NoViableAltException(this)
          }
          this.state = 250
          this._errHandler.sync(this)
          _alt = this._interp.adaptivePredict(this._input, 12, this._ctx)
        } while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER)
      }
      this.state = 256
      this._errHandler.sync(this)
      _alt = this._interp.adaptivePredict(this._input, 13, this._ctx)
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re
      this._errHandler.reportError(this, re)
      this._errHandler.recover(this, re)
    } else {
      throw re
    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function WildcardContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = ECLParser.RULE_wildcard
  return this
}

WildcardContext.prototype = Object.create(antlr4.ParserRuleContext.prototype)
WildcardContext.prototype.constructor = WildcardContext

WildcardContext.prototype.ASTERISK = function() {
  return this.getToken(ECLParser.ASTERISK, 0)
}

WildcardContext.prototype.enterRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.enterWildcard(this)
  }
}

WildcardContext.prototype.exitRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.exitWildcard(this)
  }
}

WildcardContext.prototype.accept = function(visitor) {
  if (visitor instanceof ECLVisitor) {
    return visitor.visitWildcard(this)
  } else {
    return visitor.visitChildren(this)
  }
}

ECLParser.WildcardContext = WildcardContext

ECLParser.prototype.wildcard = function() {
  var localctx = new WildcardContext(this, this._ctx, this.state)
  this.enterRule(localctx, 30, ECLParser.RULE_wildcard)
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 257
    this.match(ECLParser.ASTERISK)
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re
      this._errHandler.reportError(this, re)
      this._errHandler.recover(this, re)
    } else {
      throw re
    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function ConstraintoperatorContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = ECLParser.RULE_constraintoperator
  return this
}

ConstraintoperatorContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
)
ConstraintoperatorContext.prototype.constructor = ConstraintoperatorContext

ConstraintoperatorContext.prototype.childof = function() {
  return this.getTypedRuleContext(ChildofContext, 0)
}

ConstraintoperatorContext.prototype.descendantorselfof = function() {
  return this.getTypedRuleContext(DescendantorselfofContext, 0)
}

ConstraintoperatorContext.prototype.descendantof = function() {
  return this.getTypedRuleContext(DescendantofContext, 0)
}

ConstraintoperatorContext.prototype.parentof = function() {
  return this.getTypedRuleContext(ParentofContext, 0)
}

ConstraintoperatorContext.prototype.ancestororselfof = function() {
  return this.getTypedRuleContext(AncestororselfofContext, 0)
}

ConstraintoperatorContext.prototype.ancestorof = function() {
  return this.getTypedRuleContext(AncestorofContext, 0)
}

ConstraintoperatorContext.prototype.enterRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.enterConstraintoperator(this)
  }
}

ConstraintoperatorContext.prototype.exitRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.exitConstraintoperator(this)
  }
}

ConstraintoperatorContext.prototype.accept = function(visitor) {
  if (visitor instanceof ECLVisitor) {
    return visitor.visitConstraintoperator(this)
  } else {
    return visitor.visitChildren(this)
  }
}

ECLParser.ConstraintoperatorContext = ConstraintoperatorContext

ECLParser.prototype.constraintoperator = function() {
  var localctx = new ConstraintoperatorContext(this, this._ctx, this.state)
  this.enterRule(localctx, 32, ECLParser.RULE_constraintoperator)
  try {
    this.state = 265
    this._errHandler.sync(this)
    var la_ = this._interp.adaptivePredict(this._input, 14, this._ctx)
    switch (la_) {
      case 1:
        this.enterOuterAlt(localctx, 1)
        this.state = 259
        this.childof()
        break

      case 2:
        this.enterOuterAlt(localctx, 2)
        this.state = 260
        this.descendantorselfof()
        break

      case 3:
        this.enterOuterAlt(localctx, 3)
        this.state = 261
        this.descendantof()
        break

      case 4:
        this.enterOuterAlt(localctx, 4)
        this.state = 262
        this.parentof()
        break

      case 5:
        this.enterOuterAlt(localctx, 5)
        this.state = 263
        this.ancestororselfof()
        break

      case 6:
        this.enterOuterAlt(localctx, 6)
        this.state = 264
        this.ancestorof()
        break
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re
      this._errHandler.reportError(this, re)
      this._errHandler.recover(this, re)
    } else {
      throw re
    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function DescendantofContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = ECLParser.RULE_descendantof
  return this
}

DescendantofContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
)
DescendantofContext.prototype.constructor = DescendantofContext

DescendantofContext.prototype.LESS_THAN = function() {
  return this.getToken(ECLParser.LESS_THAN, 0)
}

DescendantofContext.prototype.enterRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.enterDescendantof(this)
  }
}

DescendantofContext.prototype.exitRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.exitDescendantof(this)
  }
}

DescendantofContext.prototype.accept = function(visitor) {
  if (visitor instanceof ECLVisitor) {
    return visitor.visitDescendantof(this)
  } else {
    return visitor.visitChildren(this)
  }
}

ECLParser.DescendantofContext = DescendantofContext

ECLParser.prototype.descendantof = function() {
  var localctx = new DescendantofContext(this, this._ctx, this.state)
  this.enterRule(localctx, 34, ECLParser.RULE_descendantof)
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 267
    this.match(ECLParser.LESS_THAN)
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re
      this._errHandler.reportError(this, re)
      this._errHandler.recover(this, re)
    } else {
      throw re
    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function DescendantorselfofContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = ECLParser.RULE_descendantorselfof
  return this
}

DescendantorselfofContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
)
DescendantorselfofContext.prototype.constructor = DescendantorselfofContext

DescendantorselfofContext.prototype.LESS_THAN = function(i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTokens(ECLParser.LESS_THAN)
  } else {
    return this.getToken(ECLParser.LESS_THAN, i)
  }
}

DescendantorselfofContext.prototype.enterRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.enterDescendantorselfof(this)
  }
}

DescendantorselfofContext.prototype.exitRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.exitDescendantorselfof(this)
  }
}

DescendantorselfofContext.prototype.accept = function(visitor) {
  if (visitor instanceof ECLVisitor) {
    return visitor.visitDescendantorselfof(this)
  } else {
    return visitor.visitChildren(this)
  }
}

ECLParser.DescendantorselfofContext = DescendantorselfofContext

ECLParser.prototype.descendantorselfof = function() {
  var localctx = new DescendantorselfofContext(this, this._ctx, this.state)
  this.enterRule(localctx, 36, ECLParser.RULE_descendantorselfof)
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 269
    this.match(ECLParser.LESS_THAN)
    this.state = 270
    this.match(ECLParser.LESS_THAN)
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re
      this._errHandler.reportError(this, re)
      this._errHandler.recover(this, re)
    } else {
      throw re
    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function ChildofContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = ECLParser.RULE_childof
  return this
}

ChildofContext.prototype = Object.create(antlr4.ParserRuleContext.prototype)
ChildofContext.prototype.constructor = ChildofContext

ChildofContext.prototype.LESS_THAN = function() {
  return this.getToken(ECLParser.LESS_THAN, 0)
}

ChildofContext.prototype.EXCLAMATION = function() {
  return this.getToken(ECLParser.EXCLAMATION, 0)
}

ChildofContext.prototype.enterRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.enterChildof(this)
  }
}

ChildofContext.prototype.exitRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.exitChildof(this)
  }
}

ChildofContext.prototype.accept = function(visitor) {
  if (visitor instanceof ECLVisitor) {
    return visitor.visitChildof(this)
  } else {
    return visitor.visitChildren(this)
  }
}

ECLParser.ChildofContext = ChildofContext

ECLParser.prototype.childof = function() {
  var localctx = new ChildofContext(this, this._ctx, this.state)
  this.enterRule(localctx, 38, ECLParser.RULE_childof)
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 272
    this.match(ECLParser.LESS_THAN)
    this.state = 273
    this.match(ECLParser.EXCLAMATION)
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re
      this._errHandler.reportError(this, re)
      this._errHandler.recover(this, re)
    } else {
      throw re
    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function AncestorofContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = ECLParser.RULE_ancestorof
  return this
}

AncestorofContext.prototype = Object.create(antlr4.ParserRuleContext.prototype)
AncestorofContext.prototype.constructor = AncestorofContext

AncestorofContext.prototype.GREATER_THAN = function() {
  return this.getToken(ECLParser.GREATER_THAN, 0)
}

AncestorofContext.prototype.enterRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.enterAncestorof(this)
  }
}

AncestorofContext.prototype.exitRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.exitAncestorof(this)
  }
}

AncestorofContext.prototype.accept = function(visitor) {
  if (visitor instanceof ECLVisitor) {
    return visitor.visitAncestorof(this)
  } else {
    return visitor.visitChildren(this)
  }
}

ECLParser.AncestorofContext = AncestorofContext

ECLParser.prototype.ancestorof = function() {
  var localctx = new AncestorofContext(this, this._ctx, this.state)
  this.enterRule(localctx, 40, ECLParser.RULE_ancestorof)
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 275
    this.match(ECLParser.GREATER_THAN)
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re
      this._errHandler.reportError(this, re)
      this._errHandler.recover(this, re)
    } else {
      throw re
    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function AncestororselfofContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = ECLParser.RULE_ancestororselfof
  return this
}

AncestororselfofContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
)
AncestororselfofContext.prototype.constructor = AncestororselfofContext

AncestororselfofContext.prototype.GREATER_THAN = function(i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTokens(ECLParser.GREATER_THAN)
  } else {
    return this.getToken(ECLParser.GREATER_THAN, i)
  }
}

AncestororselfofContext.prototype.enterRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.enterAncestororselfof(this)
  }
}

AncestororselfofContext.prototype.exitRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.exitAncestororselfof(this)
  }
}

AncestororselfofContext.prototype.accept = function(visitor) {
  if (visitor instanceof ECLVisitor) {
    return visitor.visitAncestororselfof(this)
  } else {
    return visitor.visitChildren(this)
  }
}

ECLParser.AncestororselfofContext = AncestororselfofContext

ECLParser.prototype.ancestororselfof = function() {
  var localctx = new AncestororselfofContext(this, this._ctx, this.state)
  this.enterRule(localctx, 42, ECLParser.RULE_ancestororselfof)
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 277
    this.match(ECLParser.GREATER_THAN)
    this.state = 278
    this.match(ECLParser.GREATER_THAN)
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re
      this._errHandler.reportError(this, re)
      this._errHandler.recover(this, re)
    } else {
      throw re
    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function ParentofContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = ECLParser.RULE_parentof
  return this
}

ParentofContext.prototype = Object.create(antlr4.ParserRuleContext.prototype)
ParentofContext.prototype.constructor = ParentofContext

ParentofContext.prototype.GREATER_THAN = function() {
  return this.getToken(ECLParser.GREATER_THAN, 0)
}

ParentofContext.prototype.EXCLAMATION = function() {
  return this.getToken(ECLParser.EXCLAMATION, 0)
}

ParentofContext.prototype.enterRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.enterParentof(this)
  }
}

ParentofContext.prototype.exitRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.exitParentof(this)
  }
}

ParentofContext.prototype.accept = function(visitor) {
  if (visitor instanceof ECLVisitor) {
    return visitor.visitParentof(this)
  } else {
    return visitor.visitChildren(this)
  }
}

ECLParser.ParentofContext = ParentofContext

ECLParser.prototype.parentof = function() {
  var localctx = new ParentofContext(this, this._ctx, this.state)
  this.enterRule(localctx, 44, ECLParser.RULE_parentof)
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 280
    this.match(ECLParser.GREATER_THAN)
    this.state = 281
    this.match(ECLParser.EXCLAMATION)
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re
      this._errHandler.reportError(this, re)
      this._errHandler.recover(this, re)
    } else {
      throw re
    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function ConjunctionContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = ECLParser.RULE_conjunction
  return this
}

ConjunctionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype)
ConjunctionContext.prototype.constructor = ConjunctionContext

ConjunctionContext.prototype.mws = function() {
  return this.getTypedRuleContext(MwsContext, 0)
}

ConjunctionContext.prototype.A = function() {
  return this.getToken(ECLParser.A, 0)
}

ConjunctionContext.prototype.CAP_A = function() {
  return this.getToken(ECLParser.CAP_A, 0)
}

ConjunctionContext.prototype.N = function() {
  return this.getToken(ECLParser.N, 0)
}

ConjunctionContext.prototype.CAP_N = function() {
  return this.getToken(ECLParser.CAP_N, 0)
}

ConjunctionContext.prototype.D = function() {
  return this.getToken(ECLParser.D, 0)
}

ConjunctionContext.prototype.CAP_D = function() {
  return this.getToken(ECLParser.CAP_D, 0)
}

ConjunctionContext.prototype.COMMA = function() {
  return this.getToken(ECLParser.COMMA, 0)
}

ConjunctionContext.prototype.enterRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.enterConjunction(this)
  }
}

ConjunctionContext.prototype.exitRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.exitConjunction(this)
  }
}

ConjunctionContext.prototype.accept = function(visitor) {
  if (visitor instanceof ECLVisitor) {
    return visitor.visitConjunction(this)
  } else {
    return visitor.visitChildren(this)
  }
}

ECLParser.ConjunctionContext = ConjunctionContext

ECLParser.prototype.conjunction = function() {
  var localctx = new ConjunctionContext(this, this._ctx, this.state)
  this.enterRule(localctx, 46, ECLParser.RULE_conjunction)
  var _la = 0 // Token type
  try {
    this.state = 288
    this._errHandler.sync(this)
    switch (this._input.LA(1)) {
      case ECLParser.CAP_A:
      case ECLParser.A:
        this.enterOuterAlt(localctx, 1)
        this.state = 283
        _la = this._input.LA(1)
        if (!(_la === ECLParser.CAP_A || _la === ECLParser.A)) {
          this._errHandler.recoverInline(this)
        } else {
          this._errHandler.reportMatch(this)
          this.consume()
        }
        this.state = 284
        _la = this._input.LA(1)
        if (!(_la === ECLParser.CAP_N || _la === ECLParser.N)) {
          this._errHandler.recoverInline(this)
        } else {
          this._errHandler.reportMatch(this)
          this.consume()
        }
        this.state = 285
        _la = this._input.LA(1)
        if (!(_la === ECLParser.CAP_D || _la === ECLParser.D)) {
          this._errHandler.recoverInline(this)
        } else {
          this._errHandler.reportMatch(this)
          this.consume()
        }
        this.state = 286
        this.mws()
        break
      case ECLParser.COMMA:
        this.enterOuterAlt(localctx, 2)
        this.state = 287
        this.match(ECLParser.COMMA)
        break
      default:
        throw new antlr4.error.NoViableAltException(this)
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re
      this._errHandler.reportError(this, re)
      this._errHandler.recover(this, re)
    } else {
      throw re
    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function DisjunctionContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = ECLParser.RULE_disjunction
  return this
}

DisjunctionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype)
DisjunctionContext.prototype.constructor = DisjunctionContext

DisjunctionContext.prototype.mws = function() {
  return this.getTypedRuleContext(MwsContext, 0)
}

DisjunctionContext.prototype.O = function() {
  return this.getToken(ECLParser.O, 0)
}

DisjunctionContext.prototype.CAP_O = function() {
  return this.getToken(ECLParser.CAP_O, 0)
}

DisjunctionContext.prototype.R = function() {
  return this.getToken(ECLParser.R, 0)
}

DisjunctionContext.prototype.CAP_R = function() {
  return this.getToken(ECLParser.CAP_R, 0)
}

DisjunctionContext.prototype.enterRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.enterDisjunction(this)
  }
}

DisjunctionContext.prototype.exitRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.exitDisjunction(this)
  }
}

DisjunctionContext.prototype.accept = function(visitor) {
  if (visitor instanceof ECLVisitor) {
    return visitor.visitDisjunction(this)
  } else {
    return visitor.visitChildren(this)
  }
}

ECLParser.DisjunctionContext = DisjunctionContext

ECLParser.prototype.disjunction = function() {
  var localctx = new DisjunctionContext(this, this._ctx, this.state)
  this.enterRule(localctx, 48, ECLParser.RULE_disjunction)
  var _la = 0 // Token type
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 290
    _la = this._input.LA(1)
    if (!(_la === ECLParser.CAP_O || _la === ECLParser.O)) {
      this._errHandler.recoverInline(this)
    } else {
      this._errHandler.reportMatch(this)
      this.consume()
    }
    this.state = 291
    _la = this._input.LA(1)
    if (!(_la === ECLParser.CAP_R || _la === ECLParser.R)) {
      this._errHandler.recoverInline(this)
    } else {
      this._errHandler.reportMatch(this)
      this.consume()
    }
    this.state = 292
    this.mws()
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re
      this._errHandler.reportError(this, re)
      this._errHandler.recover(this, re)
    } else {
      throw re
    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function ExclusionContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = ECLParser.RULE_exclusion
  return this
}

ExclusionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype)
ExclusionContext.prototype.constructor = ExclusionContext

ExclusionContext.prototype.mws = function() {
  return this.getTypedRuleContext(MwsContext, 0)
}

ExclusionContext.prototype.M = function() {
  return this.getToken(ECLParser.M, 0)
}

ExclusionContext.prototype.CAP_M = function() {
  return this.getToken(ECLParser.CAP_M, 0)
}

ExclusionContext.prototype.I = function() {
  return this.getToken(ECLParser.I, 0)
}

ExclusionContext.prototype.CAP_I = function() {
  return this.getToken(ECLParser.CAP_I, 0)
}

ExclusionContext.prototype.N = function() {
  return this.getToken(ECLParser.N, 0)
}

ExclusionContext.prototype.CAP_N = function() {
  return this.getToken(ECLParser.CAP_N, 0)
}

ExclusionContext.prototype.U = function() {
  return this.getToken(ECLParser.U, 0)
}

ExclusionContext.prototype.CAP_U = function() {
  return this.getToken(ECLParser.CAP_U, 0)
}

ExclusionContext.prototype.S = function() {
  return this.getToken(ECLParser.S, 0)
}

ExclusionContext.prototype.CAP_S = function() {
  return this.getToken(ECLParser.CAP_S, 0)
}

ExclusionContext.prototype.enterRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.enterExclusion(this)
  }
}

ExclusionContext.prototype.exitRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.exitExclusion(this)
  }
}

ExclusionContext.prototype.accept = function(visitor) {
  if (visitor instanceof ECLVisitor) {
    return visitor.visitExclusion(this)
  } else {
    return visitor.visitChildren(this)
  }
}

ECLParser.ExclusionContext = ExclusionContext

ECLParser.prototype.exclusion = function() {
  var localctx = new ExclusionContext(this, this._ctx, this.state)
  this.enterRule(localctx, 50, ECLParser.RULE_exclusion)
  var _la = 0 // Token type
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 294
    _la = this._input.LA(1)
    if (!(_la === ECLParser.CAP_M || _la === ECLParser.M)) {
      this._errHandler.recoverInline(this)
    } else {
      this._errHandler.reportMatch(this)
      this.consume()
    }
    this.state = 295
    _la = this._input.LA(1)
    if (!(_la === ECLParser.CAP_I || _la === ECLParser.I)) {
      this._errHandler.recoverInline(this)
    } else {
      this._errHandler.reportMatch(this)
      this.consume()
    }
    this.state = 296
    _la = this._input.LA(1)
    if (!(_la === ECLParser.CAP_N || _la === ECLParser.N)) {
      this._errHandler.recoverInline(this)
    } else {
      this._errHandler.reportMatch(this)
      this.consume()
    }
    this.state = 297
    _la = this._input.LA(1)
    if (!(_la === ECLParser.CAP_U || _la === ECLParser.U)) {
      this._errHandler.recoverInline(this)
    } else {
      this._errHandler.reportMatch(this)
      this.consume()
    }
    this.state = 298
    _la = this._input.LA(1)
    if (!(_la === ECLParser.CAP_S || _la === ECLParser.S)) {
      this._errHandler.recoverInline(this)
    } else {
      this._errHandler.reportMatch(this)
      this.consume()
    }
    this.state = 299
    this.mws()
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re
      this._errHandler.reportError(this, re)
      this._errHandler.recover(this, re)
    } else {
      throw re
    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function EclrefinementContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = ECLParser.RULE_eclrefinement
  return this
}

EclrefinementContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
)
EclrefinementContext.prototype.constructor = EclrefinementContext

EclrefinementContext.prototype.subrefinement = function() {
  return this.getTypedRuleContext(SubrefinementContext, 0)
}

EclrefinementContext.prototype.ws = function() {
  return this.getTypedRuleContext(WsContext, 0)
}

EclrefinementContext.prototype.conjunctionrefinementset = function() {
  return this.getTypedRuleContext(ConjunctionrefinementsetContext, 0)
}

EclrefinementContext.prototype.disjunctionrefinementset = function() {
  return this.getTypedRuleContext(DisjunctionrefinementsetContext, 0)
}

EclrefinementContext.prototype.enterRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.enterEclrefinement(this)
  }
}

EclrefinementContext.prototype.exitRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.exitEclrefinement(this)
  }
}

EclrefinementContext.prototype.accept = function(visitor) {
  if (visitor instanceof ECLVisitor) {
    return visitor.visitEclrefinement(this)
  } else {
    return visitor.visitChildren(this)
  }
}

ECLParser.EclrefinementContext = EclrefinementContext

ECLParser.prototype.eclrefinement = function() {
  var localctx = new EclrefinementContext(this, this._ctx, this.state)
  this.enterRule(localctx, 52, ECLParser.RULE_eclrefinement)
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 301
    this.subrefinement()
    this.state = 302
    this.ws()
    this.state = 305
    this._errHandler.sync(this)
    var la_ = this._interp.adaptivePredict(this._input, 16, this._ctx)
    if (la_ === 1) {
      this.state = 303
      this.conjunctionrefinementset()
    } else if (la_ === 2) {
      this.state = 304
      this.disjunctionrefinementset()
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re
      this._errHandler.reportError(this, re)
      this._errHandler.recover(this, re)
    } else {
      throw re
    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function ConjunctionrefinementsetContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = ECLParser.RULE_conjunctionrefinementset
  return this
}

ConjunctionrefinementsetContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
)
ConjunctionrefinementsetContext.prototype.constructor = ConjunctionrefinementsetContext

ConjunctionrefinementsetContext.prototype.ws = function(i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTypedRuleContexts(WsContext)
  } else {
    return this.getTypedRuleContext(WsContext, i)
  }
}

ConjunctionrefinementsetContext.prototype.conjunction = function(i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTypedRuleContexts(ConjunctionContext)
  } else {
    return this.getTypedRuleContext(ConjunctionContext, i)
  }
}

ConjunctionrefinementsetContext.prototype.subrefinement = function(i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTypedRuleContexts(SubrefinementContext)
  } else {
    return this.getTypedRuleContext(SubrefinementContext, i)
  }
}

ConjunctionrefinementsetContext.prototype.enterRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.enterConjunctionrefinementset(this)
  }
}

ConjunctionrefinementsetContext.prototype.exitRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.exitConjunctionrefinementset(this)
  }
}

ConjunctionrefinementsetContext.prototype.accept = function(visitor) {
  if (visitor instanceof ECLVisitor) {
    return visitor.visitConjunctionrefinementset(this)
  } else {
    return visitor.visitChildren(this)
  }
}

ECLParser.ConjunctionrefinementsetContext = ConjunctionrefinementsetContext

ECLParser.prototype.conjunctionrefinementset = function() {
  var localctx = new ConjunctionrefinementsetContext(
    this,
    this._ctx,
    this.state
  )
  this.enterRule(localctx, 54, ECLParser.RULE_conjunctionrefinementset)
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 312
    this._errHandler.sync(this)
    var _alt = 1
    do {
      switch (_alt) {
        case 1:
          this.state = 307
          this.ws()
          this.state = 308
          this.conjunction()
          this.state = 309
          this.ws()
          this.state = 310
          this.subrefinement()
          break
        default:
          throw new antlr4.error.NoViableAltException(this)
      }
      this.state = 314
      this._errHandler.sync(this)
      _alt = this._interp.adaptivePredict(this._input, 17, this._ctx)
    } while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER)
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re
      this._errHandler.reportError(this, re)
      this._errHandler.recover(this, re)
    } else {
      throw re
    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function DisjunctionrefinementsetContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = ECLParser.RULE_disjunctionrefinementset
  return this
}

DisjunctionrefinementsetContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
)
DisjunctionrefinementsetContext.prototype.constructor = DisjunctionrefinementsetContext

DisjunctionrefinementsetContext.prototype.ws = function(i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTypedRuleContexts(WsContext)
  } else {
    return this.getTypedRuleContext(WsContext, i)
  }
}

DisjunctionrefinementsetContext.prototype.disjunction = function(i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTypedRuleContexts(DisjunctionContext)
  } else {
    return this.getTypedRuleContext(DisjunctionContext, i)
  }
}

DisjunctionrefinementsetContext.prototype.subrefinement = function(i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTypedRuleContexts(SubrefinementContext)
  } else {
    return this.getTypedRuleContext(SubrefinementContext, i)
  }
}

DisjunctionrefinementsetContext.prototype.enterRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.enterDisjunctionrefinementset(this)
  }
}

DisjunctionrefinementsetContext.prototype.exitRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.exitDisjunctionrefinementset(this)
  }
}

DisjunctionrefinementsetContext.prototype.accept = function(visitor) {
  if (visitor instanceof ECLVisitor) {
    return visitor.visitDisjunctionrefinementset(this)
  } else {
    return visitor.visitChildren(this)
  }
}

ECLParser.DisjunctionrefinementsetContext = DisjunctionrefinementsetContext

ECLParser.prototype.disjunctionrefinementset = function() {
  var localctx = new DisjunctionrefinementsetContext(
    this,
    this._ctx,
    this.state
  )
  this.enterRule(localctx, 56, ECLParser.RULE_disjunctionrefinementset)
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 321
    this._errHandler.sync(this)
    var _alt = 1
    do {
      switch (_alt) {
        case 1:
          this.state = 316
          this.ws()
          this.state = 317
          this.disjunction()
          this.state = 318
          this.ws()
          this.state = 319
          this.subrefinement()
          break
        default:
          throw new antlr4.error.NoViableAltException(this)
      }
      this.state = 323
      this._errHandler.sync(this)
      _alt = this._interp.adaptivePredict(this._input, 18, this._ctx)
    } while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER)
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re
      this._errHandler.reportError(this, re)
      this._errHandler.recover(this, re)
    } else {
      throw re
    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function SubrefinementContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = ECLParser.RULE_subrefinement
  return this
}

SubrefinementContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
)
SubrefinementContext.prototype.constructor = SubrefinementContext

SubrefinementContext.prototype.eclattributeset = function() {
  return this.getTypedRuleContext(EclattributesetContext, 0)
}

SubrefinementContext.prototype.eclattributegroup = function() {
  return this.getTypedRuleContext(EclattributegroupContext, 0)
}

SubrefinementContext.prototype.LEFT_PAREN = function() {
  return this.getToken(ECLParser.LEFT_PAREN, 0)
}

SubrefinementContext.prototype.ws = function(i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTypedRuleContexts(WsContext)
  } else {
    return this.getTypedRuleContext(WsContext, i)
  }
}

SubrefinementContext.prototype.eclrefinement = function() {
  return this.getTypedRuleContext(EclrefinementContext, 0)
}

SubrefinementContext.prototype.RIGHT_PAREN = function() {
  return this.getToken(ECLParser.RIGHT_PAREN, 0)
}

SubrefinementContext.prototype.enterRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.enterSubrefinement(this)
  }
}

SubrefinementContext.prototype.exitRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.exitSubrefinement(this)
  }
}

SubrefinementContext.prototype.accept = function(visitor) {
  if (visitor instanceof ECLVisitor) {
    return visitor.visitSubrefinement(this)
  } else {
    return visitor.visitChildren(this)
  }
}

ECLParser.SubrefinementContext = SubrefinementContext

ECLParser.prototype.subrefinement = function() {
  var localctx = new SubrefinementContext(this, this._ctx, this.state)
  this.enterRule(localctx, 58, ECLParser.RULE_subrefinement)
  try {
    this.state = 333
    this._errHandler.sync(this)
    var la_ = this._interp.adaptivePredict(this._input, 19, this._ctx)
    switch (la_) {
      case 1:
        this.enterOuterAlt(localctx, 1)
        this.state = 325
        this.eclattributeset()
        break

      case 2:
        this.enterOuterAlt(localctx, 2)
        this.state = 326
        this.eclattributegroup()
        break

      case 3:
        this.enterOuterAlt(localctx, 3)
        this.state = 327
        this.match(ECLParser.LEFT_PAREN)
        this.state = 328
        this.ws()
        this.state = 329
        this.eclrefinement()
        this.state = 330
        this.ws()
        this.state = 331
        this.match(ECLParser.RIGHT_PAREN)
        break
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re
      this._errHandler.reportError(this, re)
      this._errHandler.recover(this, re)
    } else {
      throw re
    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function EclattributesetContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = ECLParser.RULE_eclattributeset
  return this
}

EclattributesetContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
)
EclattributesetContext.prototype.constructor = EclattributesetContext

EclattributesetContext.prototype.subattributeset = function() {
  return this.getTypedRuleContext(SubattributesetContext, 0)
}

EclattributesetContext.prototype.ws = function() {
  return this.getTypedRuleContext(WsContext, 0)
}

EclattributesetContext.prototype.conjunctionattributeset = function() {
  return this.getTypedRuleContext(ConjunctionattributesetContext, 0)
}

EclattributesetContext.prototype.disjunctionattributeset = function() {
  return this.getTypedRuleContext(DisjunctionattributesetContext, 0)
}

EclattributesetContext.prototype.enterRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.enterEclattributeset(this)
  }
}

EclattributesetContext.prototype.exitRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.exitEclattributeset(this)
  }
}

EclattributesetContext.prototype.accept = function(visitor) {
  if (visitor instanceof ECLVisitor) {
    return visitor.visitEclattributeset(this)
  } else {
    return visitor.visitChildren(this)
  }
}

ECLParser.EclattributesetContext = EclattributesetContext

ECLParser.prototype.eclattributeset = function() {
  var localctx = new EclattributesetContext(this, this._ctx, this.state)
  this.enterRule(localctx, 60, ECLParser.RULE_eclattributeset)
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 335
    this.subattributeset()
    this.state = 336
    this.ws()
    this.state = 339
    this._errHandler.sync(this)
    var la_ = this._interp.adaptivePredict(this._input, 20, this._ctx)
    if (la_ === 1) {
      this.state = 337
      this.conjunctionattributeset()
    } else if (la_ === 2) {
      this.state = 338
      this.disjunctionattributeset()
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re
      this._errHandler.reportError(this, re)
      this._errHandler.recover(this, re)
    } else {
      throw re
    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function ConjunctionattributesetContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = ECLParser.RULE_conjunctionattributeset
  return this
}

ConjunctionattributesetContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
)
ConjunctionattributesetContext.prototype.constructor = ConjunctionattributesetContext

ConjunctionattributesetContext.prototype.ws = function(i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTypedRuleContexts(WsContext)
  } else {
    return this.getTypedRuleContext(WsContext, i)
  }
}

ConjunctionattributesetContext.prototype.conjunction = function(i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTypedRuleContexts(ConjunctionContext)
  } else {
    return this.getTypedRuleContext(ConjunctionContext, i)
  }
}

ConjunctionattributesetContext.prototype.subattributeset = function(i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTypedRuleContexts(SubattributesetContext)
  } else {
    return this.getTypedRuleContext(SubattributesetContext, i)
  }
}

ConjunctionattributesetContext.prototype.enterRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.enterConjunctionattributeset(this)
  }
}

ConjunctionattributesetContext.prototype.exitRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.exitConjunctionattributeset(this)
  }
}

ConjunctionattributesetContext.prototype.accept = function(visitor) {
  if (visitor instanceof ECLVisitor) {
    return visitor.visitConjunctionattributeset(this)
  } else {
    return visitor.visitChildren(this)
  }
}

ECLParser.ConjunctionattributesetContext = ConjunctionattributesetContext

ECLParser.prototype.conjunctionattributeset = function() {
  var localctx = new ConjunctionattributesetContext(this, this._ctx, this.state)
  this.enterRule(localctx, 62, ECLParser.RULE_conjunctionattributeset)
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 346
    this._errHandler.sync(this)
    var _alt = 1
    do {
      switch (_alt) {
        case 1:
          this.state = 341
          this.ws()
          this.state = 342
          this.conjunction()
          this.state = 343
          this.ws()
          this.state = 344
          this.subattributeset()
          break
        default:
          throw new antlr4.error.NoViableAltException(this)
      }
      this.state = 348
      this._errHandler.sync(this)
      _alt = this._interp.adaptivePredict(this._input, 21, this._ctx)
    } while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER)
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re
      this._errHandler.reportError(this, re)
      this._errHandler.recover(this, re)
    } else {
      throw re
    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function DisjunctionattributesetContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = ECLParser.RULE_disjunctionattributeset
  return this
}

DisjunctionattributesetContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
)
DisjunctionattributesetContext.prototype.constructor = DisjunctionattributesetContext

DisjunctionattributesetContext.prototype.ws = function(i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTypedRuleContexts(WsContext)
  } else {
    return this.getTypedRuleContext(WsContext, i)
  }
}

DisjunctionattributesetContext.prototype.disjunction = function(i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTypedRuleContexts(DisjunctionContext)
  } else {
    return this.getTypedRuleContext(DisjunctionContext, i)
  }
}

DisjunctionattributesetContext.prototype.subattributeset = function(i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTypedRuleContexts(SubattributesetContext)
  } else {
    return this.getTypedRuleContext(SubattributesetContext, i)
  }
}

DisjunctionattributesetContext.prototype.enterRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.enterDisjunctionattributeset(this)
  }
}

DisjunctionattributesetContext.prototype.exitRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.exitDisjunctionattributeset(this)
  }
}

DisjunctionattributesetContext.prototype.accept = function(visitor) {
  if (visitor instanceof ECLVisitor) {
    return visitor.visitDisjunctionattributeset(this)
  } else {
    return visitor.visitChildren(this)
  }
}

ECLParser.DisjunctionattributesetContext = DisjunctionattributesetContext

ECLParser.prototype.disjunctionattributeset = function() {
  var localctx = new DisjunctionattributesetContext(this, this._ctx, this.state)
  this.enterRule(localctx, 64, ECLParser.RULE_disjunctionattributeset)
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 355
    this._errHandler.sync(this)
    var _alt = 1
    do {
      switch (_alt) {
        case 1:
          this.state = 350
          this.ws()
          this.state = 351
          this.disjunction()
          this.state = 352
          this.ws()
          this.state = 353
          this.subattributeset()
          break
        default:
          throw new antlr4.error.NoViableAltException(this)
      }
      this.state = 357
      this._errHandler.sync(this)
      _alt = this._interp.adaptivePredict(this._input, 22, this._ctx)
    } while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER)
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re
      this._errHandler.reportError(this, re)
      this._errHandler.recover(this, re)
    } else {
      throw re
    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function SubattributesetContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = ECLParser.RULE_subattributeset
  return this
}

SubattributesetContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
)
SubattributesetContext.prototype.constructor = SubattributesetContext

SubattributesetContext.prototype.eclattribute = function() {
  return this.getTypedRuleContext(EclattributeContext, 0)
}

SubattributesetContext.prototype.LEFT_PAREN = function() {
  return this.getToken(ECLParser.LEFT_PAREN, 0)
}

SubattributesetContext.prototype.ws = function(i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTypedRuleContexts(WsContext)
  } else {
    return this.getTypedRuleContext(WsContext, i)
  }
}

SubattributesetContext.prototype.eclattributeset = function() {
  return this.getTypedRuleContext(EclattributesetContext, 0)
}

SubattributesetContext.prototype.RIGHT_PAREN = function() {
  return this.getToken(ECLParser.RIGHT_PAREN, 0)
}

SubattributesetContext.prototype.enterRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.enterSubattributeset(this)
  }
}

SubattributesetContext.prototype.exitRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.exitSubattributeset(this)
  }
}

SubattributesetContext.prototype.accept = function(visitor) {
  if (visitor instanceof ECLVisitor) {
    return visitor.visitSubattributeset(this)
  } else {
    return visitor.visitChildren(this)
  }
}

ECLParser.SubattributesetContext = SubattributesetContext

ECLParser.prototype.subattributeset = function() {
  var localctx = new SubattributesetContext(this, this._ctx, this.state)
  this.enterRule(localctx, 66, ECLParser.RULE_subattributeset)
  try {
    this.state = 366
    this._errHandler.sync(this)
    var la_ = this._interp.adaptivePredict(this._input, 23, this._ctx)
    switch (la_) {
      case 1:
        this.enterOuterAlt(localctx, 1)
        this.state = 359
        this.eclattribute()
        break

      case 2:
        this.enterOuterAlt(localctx, 2)
        this.state = 360
        this.match(ECLParser.LEFT_PAREN)
        this.state = 361
        this.ws()
        this.state = 362
        this.eclattributeset()
        this.state = 363
        this.ws()
        this.state = 364
        this.match(ECLParser.RIGHT_PAREN)
        break
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re
      this._errHandler.reportError(this, re)
      this._errHandler.recover(this, re)
    } else {
      throw re
    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function EclattributegroupContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = ECLParser.RULE_eclattributegroup
  return this
}

EclattributegroupContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
)
EclattributegroupContext.prototype.constructor = EclattributegroupContext

EclattributegroupContext.prototype.LEFT_CURLY_BRACE = function() {
  return this.getToken(ECLParser.LEFT_CURLY_BRACE, 0)
}

EclattributegroupContext.prototype.ws = function(i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTypedRuleContexts(WsContext)
  } else {
    return this.getTypedRuleContext(WsContext, i)
  }
}

EclattributegroupContext.prototype.eclattributeset = function() {
  return this.getTypedRuleContext(EclattributesetContext, 0)
}

EclattributegroupContext.prototype.RIGHT_CURLY_BRACE = function() {
  return this.getToken(ECLParser.RIGHT_CURLY_BRACE, 0)
}

EclattributegroupContext.prototype.LEFT_BRACE = function() {
  return this.getToken(ECLParser.LEFT_BRACE, 0)
}

EclattributegroupContext.prototype.cardinality = function() {
  return this.getTypedRuleContext(CardinalityContext, 0)
}

EclattributegroupContext.prototype.RIGHT_BRACE = function() {
  return this.getToken(ECLParser.RIGHT_BRACE, 0)
}

EclattributegroupContext.prototype.enterRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.enterEclattributegroup(this)
  }
}

EclattributegroupContext.prototype.exitRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.exitEclattributegroup(this)
  }
}

EclattributegroupContext.prototype.accept = function(visitor) {
  if (visitor instanceof ECLVisitor) {
    return visitor.visitEclattributegroup(this)
  } else {
    return visitor.visitChildren(this)
  }
}

ECLParser.EclattributegroupContext = EclattributegroupContext

ECLParser.prototype.eclattributegroup = function() {
  var localctx = new EclattributegroupContext(this, this._ctx, this.state)
  this.enterRule(localctx, 68, ECLParser.RULE_eclattributegroup)
  var _la = 0 // Token type
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 373
    this._errHandler.sync(this)
    _la = this._input.LA(1)
    if (_la === ECLParser.LEFT_BRACE) {
      this.state = 368
      this.match(ECLParser.LEFT_BRACE)
      this.state = 369
      this.cardinality()
      this.state = 370
      this.match(ECLParser.RIGHT_BRACE)
      this.state = 371
      this.ws()
    }

    this.state = 375
    this.match(ECLParser.LEFT_CURLY_BRACE)
    this.state = 376
    this.ws()
    this.state = 377
    this.eclattributeset()
    this.state = 378
    this.ws()
    this.state = 379
    this.match(ECLParser.RIGHT_CURLY_BRACE)
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re
      this._errHandler.reportError(this, re)
      this._errHandler.recover(this, re)
    } else {
      throw re
    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function EclattributeContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = ECLParser.RULE_eclattribute
  return this
}

EclattributeContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
)
EclattributeContext.prototype.constructor = EclattributeContext

EclattributeContext.prototype.eclattributename = function() {
  return this.getTypedRuleContext(EclattributenameContext, 0)
}

EclattributeContext.prototype.ws = function(i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTypedRuleContexts(WsContext)
  } else {
    return this.getTypedRuleContext(WsContext, i)
  }
}

EclattributeContext.prototype.LEFT_BRACE = function() {
  return this.getToken(ECLParser.LEFT_BRACE, 0)
}

EclattributeContext.prototype.cardinality = function() {
  return this.getTypedRuleContext(CardinalityContext, 0)
}

EclattributeContext.prototype.RIGHT_BRACE = function() {
  return this.getToken(ECLParser.RIGHT_BRACE, 0)
}

EclattributeContext.prototype.reverseflag = function() {
  return this.getTypedRuleContext(ReverseflagContext, 0)
}

EclattributeContext.prototype.expressioncomparisonoperator = function() {
  return this.getTypedRuleContext(ExpressioncomparisonoperatorContext, 0)
}

EclattributeContext.prototype.subexpressionconstraint = function() {
  return this.getTypedRuleContext(SubexpressionconstraintContext, 0)
}

EclattributeContext.prototype.numericcomparisonoperator = function() {
  return this.getTypedRuleContext(NumericcomparisonoperatorContext, 0)
}

EclattributeContext.prototype.POUND = function() {
  return this.getToken(ECLParser.POUND, 0)
}

EclattributeContext.prototype.numericvalue = function() {
  return this.getTypedRuleContext(NumericvalueContext, 0)
}

EclattributeContext.prototype.stringcomparisonoperator = function() {
  return this.getTypedRuleContext(StringcomparisonoperatorContext, 0)
}

EclattributeContext.prototype.qm = function(i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTypedRuleContexts(QmContext)
  } else {
    return this.getTypedRuleContext(QmContext, i)
  }
}

EclattributeContext.prototype.stringvalue = function() {
  return this.getTypedRuleContext(StringvalueContext, 0)
}

EclattributeContext.prototype.enterRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.enterEclattribute(this)
  }
}

EclattributeContext.prototype.exitRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.exitEclattribute(this)
  }
}

EclattributeContext.prototype.accept = function(visitor) {
  if (visitor instanceof ECLVisitor) {
    return visitor.visitEclattribute(this)
  } else {
    return visitor.visitChildren(this)
  }
}

ECLParser.EclattributeContext = EclattributeContext

ECLParser.prototype.eclattribute = function() {
  var localctx = new EclattributeContext(this, this._ctx, this.state)
  this.enterRule(localctx, 70, ECLParser.RULE_eclattribute)
  var _la = 0 // Token type
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 386
    this._errHandler.sync(this)
    _la = this._input.LA(1)
    if (_la === ECLParser.LEFT_BRACE) {
      this.state = 381
      this.match(ECLParser.LEFT_BRACE)
      this.state = 382
      this.cardinality()
      this.state = 383
      this.match(ECLParser.RIGHT_BRACE)
      this.state = 384
      this.ws()
    }

    this.state = 391
    this._errHandler.sync(this)
    _la = this._input.LA(1)
    if (_la === ECLParser.CAP_R) {
      this.state = 388
      this.reverseflag()
      this.state = 389
      this.ws()
    }

    this.state = 393
    this.eclattributename()
    this.state = 394
    this.ws()
    this.state = 410
    this._errHandler.sync(this)
    var la_ = this._interp.adaptivePredict(this._input, 27, this._ctx)
    switch (la_) {
      case 1:
        this.state = 395
        this.expressioncomparisonoperator()
        this.state = 396
        this.ws()
        this.state = 397
        this.subexpressionconstraint()
        break

      case 2:
        this.state = 399
        this.numericcomparisonoperator()
        this.state = 400
        this.ws()
        this.state = 401
        this.match(ECLParser.POUND)
        this.state = 402
        this.numericvalue()
        break

      case 3:
        this.state = 404
        this.stringcomparisonoperator()
        this.state = 405
        this.ws()
        this.state = 406
        this.qm()
        this.state = 407
        this.stringvalue()
        this.state = 408
        this.qm()
        break
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re
      this._errHandler.reportError(this, re)
      this._errHandler.recover(this, re)
    } else {
      throw re
    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function CardinalityContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = ECLParser.RULE_cardinality
  return this
}

CardinalityContext.prototype = Object.create(antlr4.ParserRuleContext.prototype)
CardinalityContext.prototype.constructor = CardinalityContext

CardinalityContext.prototype.minvalue = function() {
  return this.getTypedRuleContext(MinvalueContext, 0)
}

CardinalityContext.prototype.to = function() {
  return this.getTypedRuleContext(ToContext, 0)
}

CardinalityContext.prototype.maxvalue = function() {
  return this.getTypedRuleContext(MaxvalueContext, 0)
}

CardinalityContext.prototype.enterRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.enterCardinality(this)
  }
}

CardinalityContext.prototype.exitRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.exitCardinality(this)
  }
}

CardinalityContext.prototype.accept = function(visitor) {
  if (visitor instanceof ECLVisitor) {
    return visitor.visitCardinality(this)
  } else {
    return visitor.visitChildren(this)
  }
}

ECLParser.CardinalityContext = CardinalityContext

ECLParser.prototype.cardinality = function() {
  var localctx = new CardinalityContext(this, this._ctx, this.state)
  this.enterRule(localctx, 72, ECLParser.RULE_cardinality)
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 412
    this.minvalue()
    this.state = 413
    this.to()
    this.state = 414
    this.maxvalue()
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re
      this._errHandler.reportError(this, re)
      this._errHandler.recover(this, re)
    } else {
      throw re
    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function MinvalueContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = ECLParser.RULE_minvalue
  return this
}

MinvalueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype)
MinvalueContext.prototype.constructor = MinvalueContext

MinvalueContext.prototype.nonnegativeintegervalue = function() {
  return this.getTypedRuleContext(NonnegativeintegervalueContext, 0)
}

MinvalueContext.prototype.enterRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.enterMinvalue(this)
  }
}

MinvalueContext.prototype.exitRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.exitMinvalue(this)
  }
}

MinvalueContext.prototype.accept = function(visitor) {
  if (visitor instanceof ECLVisitor) {
    return visitor.visitMinvalue(this)
  } else {
    return visitor.visitChildren(this)
  }
}

ECLParser.MinvalueContext = MinvalueContext

ECLParser.prototype.minvalue = function() {
  var localctx = new MinvalueContext(this, this._ctx, this.state)
  this.enterRule(localctx, 74, ECLParser.RULE_minvalue)
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 416
    this.nonnegativeintegervalue()
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re
      this._errHandler.reportError(this, re)
      this._errHandler.recover(this, re)
    } else {
      throw re
    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function ToContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = ECLParser.RULE_to
  return this
}

ToContext.prototype = Object.create(antlr4.ParserRuleContext.prototype)
ToContext.prototype.constructor = ToContext

ToContext.prototype.PERIOD = function(i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTokens(ECLParser.PERIOD)
  } else {
    return this.getToken(ECLParser.PERIOD, i)
  }
}

ToContext.prototype.enterRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.enterTo(this)
  }
}

ToContext.prototype.exitRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.exitTo(this)
  }
}

ToContext.prototype.accept = function(visitor) {
  if (visitor instanceof ECLVisitor) {
    return visitor.visitTo(this)
  } else {
    return visitor.visitChildren(this)
  }
}

ECLParser.ToContext = ToContext

ECLParser.prototype.to = function() {
  var localctx = new ToContext(this, this._ctx, this.state)
  this.enterRule(localctx, 76, ECLParser.RULE_to)
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 418
    this.match(ECLParser.PERIOD)
    this.state = 419
    this.match(ECLParser.PERIOD)
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re
      this._errHandler.reportError(this, re)
      this._errHandler.recover(this, re)
    } else {
      throw re
    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function MaxvalueContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = ECLParser.RULE_maxvalue
  return this
}

MaxvalueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype)
MaxvalueContext.prototype.constructor = MaxvalueContext

MaxvalueContext.prototype.nonnegativeintegervalue = function() {
  return this.getTypedRuleContext(NonnegativeintegervalueContext, 0)
}

MaxvalueContext.prototype.many = function() {
  return this.getTypedRuleContext(ManyContext, 0)
}

MaxvalueContext.prototype.enterRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.enterMaxvalue(this)
  }
}

MaxvalueContext.prototype.exitRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.exitMaxvalue(this)
  }
}

MaxvalueContext.prototype.accept = function(visitor) {
  if (visitor instanceof ECLVisitor) {
    return visitor.visitMaxvalue(this)
  } else {
    return visitor.visitChildren(this)
  }
}

ECLParser.MaxvalueContext = MaxvalueContext

ECLParser.prototype.maxvalue = function() {
  var localctx = new MaxvalueContext(this, this._ctx, this.state)
  this.enterRule(localctx, 78, ECLParser.RULE_maxvalue)
  try {
    this.state = 423
    this._errHandler.sync(this)
    switch (this._input.LA(1)) {
      case ECLParser.ZERO:
      case ECLParser.ONE:
      case ECLParser.TWO:
      case ECLParser.THREE:
      case ECLParser.FOUR:
      case ECLParser.FIVE:
      case ECLParser.SIX:
      case ECLParser.SEVEN:
      case ECLParser.EIGHT:
      case ECLParser.NINE:
        this.enterOuterAlt(localctx, 1)
        this.state = 421
        this.nonnegativeintegervalue()
        break
      case ECLParser.ASTERISK:
        this.enterOuterAlt(localctx, 2)
        this.state = 422
        this.many()
        break
      default:
        throw new antlr4.error.NoViableAltException(this)
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re
      this._errHandler.reportError(this, re)
      this._errHandler.recover(this, re)
    } else {
      throw re
    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function ManyContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = ECLParser.RULE_many
  return this
}

ManyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype)
ManyContext.prototype.constructor = ManyContext

ManyContext.prototype.ASTERISK = function() {
  return this.getToken(ECLParser.ASTERISK, 0)
}

ManyContext.prototype.enterRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.enterMany(this)
  }
}

ManyContext.prototype.exitRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.exitMany(this)
  }
}

ManyContext.prototype.accept = function(visitor) {
  if (visitor instanceof ECLVisitor) {
    return visitor.visitMany(this)
  } else {
    return visitor.visitChildren(this)
  }
}

ECLParser.ManyContext = ManyContext

ECLParser.prototype.many = function() {
  var localctx = new ManyContext(this, this._ctx, this.state)
  this.enterRule(localctx, 80, ECLParser.RULE_many)
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 425
    this.match(ECLParser.ASTERISK)
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re
      this._errHandler.reportError(this, re)
      this._errHandler.recover(this, re)
    } else {
      throw re
    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function ReverseflagContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = ECLParser.RULE_reverseflag
  return this
}

ReverseflagContext.prototype = Object.create(antlr4.ParserRuleContext.prototype)
ReverseflagContext.prototype.constructor = ReverseflagContext

ReverseflagContext.prototype.CAP_R = function() {
  return this.getToken(ECLParser.CAP_R, 0)
}

ReverseflagContext.prototype.enterRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.enterReverseflag(this)
  }
}

ReverseflagContext.prototype.exitRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.exitReverseflag(this)
  }
}

ReverseflagContext.prototype.accept = function(visitor) {
  if (visitor instanceof ECLVisitor) {
    return visitor.visitReverseflag(this)
  } else {
    return visitor.visitChildren(this)
  }
}

ECLParser.ReverseflagContext = ReverseflagContext

ECLParser.prototype.reverseflag = function() {
  var localctx = new ReverseflagContext(this, this._ctx, this.state)
  this.enterRule(localctx, 82, ECLParser.RULE_reverseflag)
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 427
    this.match(ECLParser.CAP_R)
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re
      this._errHandler.reportError(this, re)
      this._errHandler.recover(this, re)
    } else {
      throw re
    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function EclattributenameContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = ECLParser.RULE_eclattributename
  return this
}

EclattributenameContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
)
EclattributenameContext.prototype.constructor = EclattributenameContext

EclattributenameContext.prototype.subexpressionconstraint = function() {
  return this.getTypedRuleContext(SubexpressionconstraintContext, 0)
}

EclattributenameContext.prototype.enterRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.enterEclattributename(this)
  }
}

EclattributenameContext.prototype.exitRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.exitEclattributename(this)
  }
}

EclattributenameContext.prototype.accept = function(visitor) {
  if (visitor instanceof ECLVisitor) {
    return visitor.visitEclattributename(this)
  } else {
    return visitor.visitChildren(this)
  }
}

ECLParser.EclattributenameContext = EclattributenameContext

ECLParser.prototype.eclattributename = function() {
  var localctx = new EclattributenameContext(this, this._ctx, this.state)
  this.enterRule(localctx, 84, ECLParser.RULE_eclattributename)
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 429
    this.subexpressionconstraint()
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re
      this._errHandler.reportError(this, re)
      this._errHandler.recover(this, re)
    } else {
      throw re
    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function ExpressioncomparisonoperatorContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = ECLParser.RULE_expressioncomparisonoperator
  return this
}

ExpressioncomparisonoperatorContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
)
ExpressioncomparisonoperatorContext.prototype.constructor = ExpressioncomparisonoperatorContext

ExpressioncomparisonoperatorContext.prototype.EQUALS = function() {
  return this.getToken(ECLParser.EQUALS, 0)
}

ExpressioncomparisonoperatorContext.prototype.EXCLAMATION = function() {
  return this.getToken(ECLParser.EXCLAMATION, 0)
}

ExpressioncomparisonoperatorContext.prototype.enterRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.enterExpressioncomparisonoperator(this)
  }
}

ExpressioncomparisonoperatorContext.prototype.exitRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.exitExpressioncomparisonoperator(this)
  }
}

ExpressioncomparisonoperatorContext.prototype.accept = function(visitor) {
  if (visitor instanceof ECLVisitor) {
    return visitor.visitExpressioncomparisonoperator(this)
  } else {
    return visitor.visitChildren(this)
  }
}

ECLParser.ExpressioncomparisonoperatorContext = ExpressioncomparisonoperatorContext

ECLParser.prototype.expressioncomparisonoperator = function() {
  var localctx = new ExpressioncomparisonoperatorContext(
    this,
    this._ctx,
    this.state
  )
  this.enterRule(localctx, 86, ECLParser.RULE_expressioncomparisonoperator)
  try {
    this.state = 434
    this._errHandler.sync(this)
    switch (this._input.LA(1)) {
      case ECLParser.EQUALS:
        this.enterOuterAlt(localctx, 1)
        this.state = 431
        this.match(ECLParser.EQUALS)
        break
      case ECLParser.EXCLAMATION:
        this.enterOuterAlt(localctx, 2)
        this.state = 432
        this.match(ECLParser.EXCLAMATION)
        this.state = 433
        this.match(ECLParser.EQUALS)
        break
      default:
        throw new antlr4.error.NoViableAltException(this)
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re
      this._errHandler.reportError(this, re)
      this._errHandler.recover(this, re)
    } else {
      throw re
    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function NumericcomparisonoperatorContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = ECLParser.RULE_numericcomparisonoperator
  return this
}

NumericcomparisonoperatorContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
)
NumericcomparisonoperatorContext.prototype.constructor = NumericcomparisonoperatorContext

NumericcomparisonoperatorContext.prototype.EQUALS = function() {
  return this.getToken(ECLParser.EQUALS, 0)
}

NumericcomparisonoperatorContext.prototype.EXCLAMATION = function() {
  return this.getToken(ECLParser.EXCLAMATION, 0)
}

NumericcomparisonoperatorContext.prototype.LESS_THAN = function() {
  return this.getToken(ECLParser.LESS_THAN, 0)
}

NumericcomparisonoperatorContext.prototype.GREATER_THAN = function() {
  return this.getToken(ECLParser.GREATER_THAN, 0)
}

NumericcomparisonoperatorContext.prototype.enterRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.enterNumericcomparisonoperator(this)
  }
}

NumericcomparisonoperatorContext.prototype.exitRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.exitNumericcomparisonoperator(this)
  }
}

NumericcomparisonoperatorContext.prototype.accept = function(visitor) {
  if (visitor instanceof ECLVisitor) {
    return visitor.visitNumericcomparisonoperator(this)
  } else {
    return visitor.visitChildren(this)
  }
}

ECLParser.NumericcomparisonoperatorContext = NumericcomparisonoperatorContext

ECLParser.prototype.numericcomparisonoperator = function() {
  var localctx = new NumericcomparisonoperatorContext(
    this,
    this._ctx,
    this.state
  )
  this.enterRule(localctx, 88, ECLParser.RULE_numericcomparisonoperator)
  try {
    this.state = 445
    this._errHandler.sync(this)
    var la_ = this._interp.adaptivePredict(this._input, 30, this._ctx)
    switch (la_) {
      case 1:
        this.enterOuterAlt(localctx, 1)
        this.state = 436
        this.match(ECLParser.EQUALS)
        break

      case 2:
        this.enterOuterAlt(localctx, 2)
        this.state = 437
        this.match(ECLParser.EXCLAMATION)
        this.state = 438
        this.match(ECLParser.EQUALS)
        break

      case 3:
        this.enterOuterAlt(localctx, 3)
        this.state = 439
        this.match(ECLParser.LESS_THAN)
        this.state = 440
        this.match(ECLParser.EQUALS)
        break

      case 4:
        this.enterOuterAlt(localctx, 4)
        this.state = 441
        this.match(ECLParser.LESS_THAN)
        break

      case 5:
        this.enterOuterAlt(localctx, 5)
        this.state = 442
        this.match(ECLParser.GREATER_THAN)
        this.state = 443
        this.match(ECLParser.EQUALS)
        break

      case 6:
        this.enterOuterAlt(localctx, 6)
        this.state = 444
        this.match(ECLParser.GREATER_THAN)
        break
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re
      this._errHandler.reportError(this, re)
      this._errHandler.recover(this, re)
    } else {
      throw re
    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function StringcomparisonoperatorContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = ECLParser.RULE_stringcomparisonoperator
  return this
}

StringcomparisonoperatorContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
)
StringcomparisonoperatorContext.prototype.constructor = StringcomparisonoperatorContext

StringcomparisonoperatorContext.prototype.EQUALS = function() {
  return this.getToken(ECLParser.EQUALS, 0)
}

StringcomparisonoperatorContext.prototype.EXCLAMATION = function() {
  return this.getToken(ECLParser.EXCLAMATION, 0)
}

StringcomparisonoperatorContext.prototype.enterRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.enterStringcomparisonoperator(this)
  }
}

StringcomparisonoperatorContext.prototype.exitRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.exitStringcomparisonoperator(this)
  }
}

StringcomparisonoperatorContext.prototype.accept = function(visitor) {
  if (visitor instanceof ECLVisitor) {
    return visitor.visitStringcomparisonoperator(this)
  } else {
    return visitor.visitChildren(this)
  }
}

ECLParser.StringcomparisonoperatorContext = StringcomparisonoperatorContext

ECLParser.prototype.stringcomparisonoperator = function() {
  var localctx = new StringcomparisonoperatorContext(
    this,
    this._ctx,
    this.state
  )
  this.enterRule(localctx, 90, ECLParser.RULE_stringcomparisonoperator)
  try {
    this.state = 450
    this._errHandler.sync(this)
    switch (this._input.LA(1)) {
      case ECLParser.EQUALS:
        this.enterOuterAlt(localctx, 1)
        this.state = 447
        this.match(ECLParser.EQUALS)
        break
      case ECLParser.EXCLAMATION:
        this.enterOuterAlt(localctx, 2)
        this.state = 448
        this.match(ECLParser.EXCLAMATION)
        this.state = 449
        this.match(ECLParser.EQUALS)
        break
      default:
        throw new antlr4.error.NoViableAltException(this)
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re
      this._errHandler.reportError(this, re)
      this._errHandler.recover(this, re)
    } else {
      throw re
    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function NumericvalueContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = ECLParser.RULE_numericvalue
  return this
}

NumericvalueContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
)
NumericvalueContext.prototype.constructor = NumericvalueContext

NumericvalueContext.prototype.decimalvalue = function() {
  return this.getTypedRuleContext(DecimalvalueContext, 0)
}

NumericvalueContext.prototype.integervalue = function() {
  return this.getTypedRuleContext(IntegervalueContext, 0)
}

NumericvalueContext.prototype.DASH = function() {
  return this.getToken(ECLParser.DASH, 0)
}

NumericvalueContext.prototype.PLUS = function() {
  return this.getToken(ECLParser.PLUS, 0)
}

NumericvalueContext.prototype.enterRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.enterNumericvalue(this)
  }
}

NumericvalueContext.prototype.exitRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.exitNumericvalue(this)
  }
}

NumericvalueContext.prototype.accept = function(visitor) {
  if (visitor instanceof ECLVisitor) {
    return visitor.visitNumericvalue(this)
  } else {
    return visitor.visitChildren(this)
  }
}

ECLParser.NumericvalueContext = NumericvalueContext

ECLParser.prototype.numericvalue = function() {
  var localctx = new NumericvalueContext(this, this._ctx, this.state)
  this.enterRule(localctx, 92, ECLParser.RULE_numericvalue)
  var _la = 0 // Token type
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 453
    this._errHandler.sync(this)
    _la = this._input.LA(1)
    if (_la === ECLParser.PLUS || _la === ECLParser.DASH) {
      this.state = 452
      _la = this._input.LA(1)
      if (!(_la === ECLParser.PLUS || _la === ECLParser.DASH)) {
        this._errHandler.recoverInline(this)
      } else {
        this._errHandler.reportMatch(this)
        this.consume()
      }
    }

    this.state = 457
    this._errHandler.sync(this)
    var la_ = this._interp.adaptivePredict(this._input, 33, this._ctx)
    switch (la_) {
      case 1:
        this.state = 455
        this.decimalvalue()
        break

      case 2:
        this.state = 456
        this.integervalue()
        break
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re
      this._errHandler.reportError(this, re)
      this._errHandler.recover(this, re)
    } else {
      throw re
    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function StringvalueContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = ECLParser.RULE_stringvalue
  return this
}

StringvalueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype)
StringvalueContext.prototype.constructor = StringvalueContext

StringvalueContext.prototype.anynonescapedchar = function(i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTypedRuleContexts(AnynonescapedcharContext)
  } else {
    return this.getTypedRuleContext(AnynonescapedcharContext, i)
  }
}

StringvalueContext.prototype.escapedchar = function(i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTypedRuleContexts(EscapedcharContext)
  } else {
    return this.getTypedRuleContext(EscapedcharContext, i)
  }
}

StringvalueContext.prototype.enterRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.enterStringvalue(this)
  }
}

StringvalueContext.prototype.exitRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.exitStringvalue(this)
  }
}

StringvalueContext.prototype.accept = function(visitor) {
  if (visitor instanceof ECLVisitor) {
    return visitor.visitStringvalue(this)
  } else {
    return visitor.visitChildren(this)
  }
}

ECLParser.StringvalueContext = StringvalueContext

ECLParser.prototype.stringvalue = function() {
  var localctx = new StringvalueContext(this, this._ctx, this.state)
  this.enterRule(localctx, 94, ECLParser.RULE_stringvalue)
  var _la = 0 // Token type
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 461
    this._errHandler.sync(this)
    _la = this._input.LA(1)
    do {
      this.state = 461
      this._errHandler.sync(this)
      switch (this._input.LA(1)) {
        case ECLParser.UTF8_LETTER:
        case ECLParser.TAB:
        case ECLParser.LF:
        case ECLParser.CR:
        case ECLParser.SPACE:
        case ECLParser.EXCLAMATION:
        case ECLParser.POUND:
        case ECLParser.DOLLAR:
        case ECLParser.PERCENT:
        case ECLParser.AMPERSAND:
        case ECLParser.APOSTROPHE:
        case ECLParser.LEFT_PAREN:
        case ECLParser.RIGHT_PAREN:
        case ECLParser.ASTERISK:
        case ECLParser.PLUS:
        case ECLParser.COMMA:
        case ECLParser.DASH:
        case ECLParser.PERIOD:
        case ECLParser.SLASH:
        case ECLParser.ZERO:
        case ECLParser.ONE:
        case ECLParser.TWO:
        case ECLParser.THREE:
        case ECLParser.FOUR:
        case ECLParser.FIVE:
        case ECLParser.SIX:
        case ECLParser.SEVEN:
        case ECLParser.EIGHT:
        case ECLParser.NINE:
        case ECLParser.COLON:
        case ECLParser.SEMICOLON:
        case ECLParser.LESS_THAN:
        case ECLParser.EQUALS:
        case ECLParser.GREATER_THAN:
        case ECLParser.QUESTION:
        case ECLParser.AT:
        case ECLParser.CAP_A:
        case ECLParser.CAP_B:
        case ECLParser.CAP_C:
        case ECLParser.CAP_D:
        case ECLParser.CAP_E:
        case ECLParser.CAP_F:
        case ECLParser.CAP_G:
        case ECLParser.CAP_H:
        case ECLParser.CAP_I:
        case ECLParser.CAP_J:
        case ECLParser.CAP_K:
        case ECLParser.CAP_L:
        case ECLParser.CAP_M:
        case ECLParser.CAP_N:
        case ECLParser.CAP_O:
        case ECLParser.CAP_P:
        case ECLParser.CAP_Q:
        case ECLParser.CAP_R:
        case ECLParser.CAP_S:
        case ECLParser.CAP_T:
        case ECLParser.CAP_U:
        case ECLParser.CAP_V:
        case ECLParser.CAP_W:
        case ECLParser.CAP_X:
        case ECLParser.CAP_Y:
        case ECLParser.CAP_Z:
        case ECLParser.LEFT_BRACE:
        case ECLParser.RIGHT_BRACE:
        case ECLParser.CARAT:
        case ECLParser.UNDERSCORE:
        case ECLParser.ACCENT:
        case ECLParser.A:
        case ECLParser.B:
        case ECLParser.C:
        case ECLParser.D:
        case ECLParser.E:
        case ECLParser.F:
        case ECLParser.G:
        case ECLParser.H:
        case ECLParser.I:
        case ECLParser.J:
        case ECLParser.K:
        case ECLParser.L:
        case ECLParser.M:
        case ECLParser.N:
        case ECLParser.O:
        case ECLParser.P:
        case ECLParser.Q:
        case ECLParser.R:
        case ECLParser.S:
        case ECLParser.T:
        case ECLParser.U:
        case ECLParser.V:
        case ECLParser.W:
        case ECLParser.X:
        case ECLParser.Y:
        case ECLParser.Z:
        case ECLParser.LEFT_CURLY_BRACE:
        case ECLParser.PIPE:
        case ECLParser.RIGHT_CURLY_BRACE:
        case ECLParser.TILDE:
          this.state = 459
          this.anynonescapedchar()
          break
        case ECLParser.BACKSLASH:
          this.state = 460
          this.escapedchar()
          break
        default:
          throw new antlr4.error.NoViableAltException(this)
      }
      this.state = 463
      this._errHandler.sync(this)
      _la = this._input.LA(1)
    } while (
      ((_la & ~0x1f) == 0 &&
        ((1 << _la) &
          ((1 << ECLParser.UTF8_LETTER) |
            (1 << ECLParser.TAB) |
            (1 << ECLParser.LF) |
            (1 << ECLParser.CR) |
            (1 << ECLParser.SPACE) |
            (1 << ECLParser.EXCLAMATION) |
            (1 << ECLParser.POUND) |
            (1 << ECLParser.DOLLAR) |
            (1 << ECLParser.PERCENT) |
            (1 << ECLParser.AMPERSAND) |
            (1 << ECLParser.APOSTROPHE) |
            (1 << ECLParser.LEFT_PAREN) |
            (1 << ECLParser.RIGHT_PAREN) |
            (1 << ECLParser.ASTERISK) |
            (1 << ECLParser.PLUS) |
            (1 << ECLParser.COMMA) |
            (1 << ECLParser.DASH) |
            (1 << ECLParser.PERIOD) |
            (1 << ECLParser.SLASH) |
            (1 << ECLParser.ZERO) |
            (1 << ECLParser.ONE) |
            (1 << ECLParser.TWO) |
            (1 << ECLParser.THREE) |
            (1 << ECLParser.FOUR) |
            (1 << ECLParser.FIVE) |
            (1 << ECLParser.SIX) |
            (1 << ECLParser.SEVEN) |
            (1 << ECLParser.EIGHT) |
            (1 << ECLParser.NINE) |
            (1 << ECLParser.COLON))) !==
          0) ||
      (((_la - 32) & ~0x1f) == 0 &&
        ((1 << (_la - 32)) &
          ((1 << (ECLParser.SEMICOLON - 32)) |
            (1 << (ECLParser.LESS_THAN - 32)) |
            (1 << (ECLParser.EQUALS - 32)) |
            (1 << (ECLParser.GREATER_THAN - 32)) |
            (1 << (ECLParser.QUESTION - 32)) |
            (1 << (ECLParser.AT - 32)) |
            (1 << (ECLParser.CAP_A - 32)) |
            (1 << (ECLParser.CAP_B - 32)) |
            (1 << (ECLParser.CAP_C - 32)) |
            (1 << (ECLParser.CAP_D - 32)) |
            (1 << (ECLParser.CAP_E - 32)) |
            (1 << (ECLParser.CAP_F - 32)) |
            (1 << (ECLParser.CAP_G - 32)) |
            (1 << (ECLParser.CAP_H - 32)) |
            (1 << (ECLParser.CAP_I - 32)) |
            (1 << (ECLParser.CAP_J - 32)) |
            (1 << (ECLParser.CAP_K - 32)) |
            (1 << (ECLParser.CAP_L - 32)) |
            (1 << (ECLParser.CAP_M - 32)) |
            (1 << (ECLParser.CAP_N - 32)) |
            (1 << (ECLParser.CAP_O - 32)) |
            (1 << (ECLParser.CAP_P - 32)) |
            (1 << (ECLParser.CAP_Q - 32)) |
            (1 << (ECLParser.CAP_R - 32)) |
            (1 << (ECLParser.CAP_S - 32)) |
            (1 << (ECLParser.CAP_T - 32)) |
            (1 << (ECLParser.CAP_U - 32)) |
            (1 << (ECLParser.CAP_V - 32)) |
            (1 << (ECLParser.CAP_W - 32)) |
            (1 << (ECLParser.CAP_X - 32)) |
            (1 << (ECLParser.CAP_Y - 32)) |
            (1 << (ECLParser.CAP_Z - 32)))) !==
          0) ||
      (((_la - 64) & ~0x1f) == 0 &&
        ((1 << (_la - 64)) &
          ((1 << (ECLParser.LEFT_BRACE - 64)) |
            (1 << (ECLParser.BACKSLASH - 64)) |
            (1 << (ECLParser.RIGHT_BRACE - 64)) |
            (1 << (ECLParser.CARAT - 64)) |
            (1 << (ECLParser.UNDERSCORE - 64)) |
            (1 << (ECLParser.ACCENT - 64)) |
            (1 << (ECLParser.A - 64)) |
            (1 << (ECLParser.B - 64)) |
            (1 << (ECLParser.C - 64)) |
            (1 << (ECLParser.D - 64)) |
            (1 << (ECLParser.E - 64)) |
            (1 << (ECLParser.F - 64)) |
            (1 << (ECLParser.G - 64)) |
            (1 << (ECLParser.H - 64)) |
            (1 << (ECLParser.I - 64)) |
            (1 << (ECLParser.J - 64)) |
            (1 << (ECLParser.K - 64)) |
            (1 << (ECLParser.L - 64)) |
            (1 << (ECLParser.M - 64)) |
            (1 << (ECLParser.N - 64)) |
            (1 << (ECLParser.O - 64)) |
            (1 << (ECLParser.P - 64)) |
            (1 << (ECLParser.Q - 64)) |
            (1 << (ECLParser.R - 64)) |
            (1 << (ECLParser.S - 64)) |
            (1 << (ECLParser.T - 64)) |
            (1 << (ECLParser.U - 64)) |
            (1 << (ECLParser.V - 64)) |
            (1 << (ECLParser.W - 64)) |
            (1 << (ECLParser.X - 64)) |
            (1 << (ECLParser.Y - 64)) |
            (1 << (ECLParser.Z - 64)))) !==
          0) ||
      (((_la - 96) & ~0x1f) == 0 &&
        ((1 << (_la - 96)) &
          ((1 << (ECLParser.LEFT_CURLY_BRACE - 96)) |
            (1 << (ECLParser.PIPE - 96)) |
            (1 << (ECLParser.RIGHT_CURLY_BRACE - 96)) |
            (1 << (ECLParser.TILDE - 96)))) !==
          0)
    )
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re
      this._errHandler.reportError(this, re)
      this._errHandler.recover(this, re)
    } else {
      throw re
    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function IntegervalueContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = ECLParser.RULE_integervalue
  return this
}

IntegervalueContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
)
IntegervalueContext.prototype.constructor = IntegervalueContext

IntegervalueContext.prototype.digitnonzero = function() {
  return this.getTypedRuleContext(DigitnonzeroContext, 0)
}

IntegervalueContext.prototype.digit = function(i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTypedRuleContexts(DigitContext)
  } else {
    return this.getTypedRuleContext(DigitContext, i)
  }
}

IntegervalueContext.prototype.zero = function() {
  return this.getTypedRuleContext(ZeroContext, 0)
}

IntegervalueContext.prototype.enterRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.enterIntegervalue(this)
  }
}

IntegervalueContext.prototype.exitRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.exitIntegervalue(this)
  }
}

IntegervalueContext.prototype.accept = function(visitor) {
  if (visitor instanceof ECLVisitor) {
    return visitor.visitIntegervalue(this)
  } else {
    return visitor.visitChildren(this)
  }
}

ECLParser.IntegervalueContext = IntegervalueContext

ECLParser.prototype.integervalue = function() {
  var localctx = new IntegervalueContext(this, this._ctx, this.state)
  this.enterRule(localctx, 96, ECLParser.RULE_integervalue)
  var _la = 0 // Token type
  try {
    this.state = 473
    this._errHandler.sync(this)
    switch (this._input.LA(1)) {
      case ECLParser.ONE:
      case ECLParser.TWO:
      case ECLParser.THREE:
      case ECLParser.FOUR:
      case ECLParser.FIVE:
      case ECLParser.SIX:
      case ECLParser.SEVEN:
      case ECLParser.EIGHT:
      case ECLParser.NINE:
        this.enterOuterAlt(localctx, 1)
        this.state = 465
        this.digitnonzero()
        this.state = 469
        this._errHandler.sync(this)
        _la = this._input.LA(1)
        while (
          (_la & ~0x1f) == 0 &&
          ((1 << _la) &
            ((1 << ECLParser.ZERO) |
              (1 << ECLParser.ONE) |
              (1 << ECLParser.TWO) |
              (1 << ECLParser.THREE) |
              (1 << ECLParser.FOUR) |
              (1 << ECLParser.FIVE) |
              (1 << ECLParser.SIX) |
              (1 << ECLParser.SEVEN) |
              (1 << ECLParser.EIGHT) |
              (1 << ECLParser.NINE))) !==
            0
        ) {
          this.state = 466
          this.digit()
          this.state = 471
          this._errHandler.sync(this)
          _la = this._input.LA(1)
        }
        break
      case ECLParser.ZERO:
        this.enterOuterAlt(localctx, 2)
        this.state = 472
        this.zero()
        break
      default:
        throw new antlr4.error.NoViableAltException(this)
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re
      this._errHandler.reportError(this, re)
      this._errHandler.recover(this, re)
    } else {
      throw re
    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function DecimalvalueContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = ECLParser.RULE_decimalvalue
  return this
}

DecimalvalueContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
)
DecimalvalueContext.prototype.constructor = DecimalvalueContext

DecimalvalueContext.prototype.integervalue = function() {
  return this.getTypedRuleContext(IntegervalueContext, 0)
}

DecimalvalueContext.prototype.PERIOD = function() {
  return this.getToken(ECLParser.PERIOD, 0)
}

DecimalvalueContext.prototype.digit = function(i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTypedRuleContexts(DigitContext)
  } else {
    return this.getTypedRuleContext(DigitContext, i)
  }
}

DecimalvalueContext.prototype.enterRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.enterDecimalvalue(this)
  }
}

DecimalvalueContext.prototype.exitRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.exitDecimalvalue(this)
  }
}

DecimalvalueContext.prototype.accept = function(visitor) {
  if (visitor instanceof ECLVisitor) {
    return visitor.visitDecimalvalue(this)
  } else {
    return visitor.visitChildren(this)
  }
}

ECLParser.DecimalvalueContext = DecimalvalueContext

ECLParser.prototype.decimalvalue = function() {
  var localctx = new DecimalvalueContext(this, this._ctx, this.state)
  this.enterRule(localctx, 98, ECLParser.RULE_decimalvalue)
  var _la = 0 // Token type
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 475
    this.integervalue()
    this.state = 476
    this.match(ECLParser.PERIOD)
    this.state = 478
    this._errHandler.sync(this)
    _la = this._input.LA(1)
    do {
      this.state = 477
      this.digit()
      this.state = 480
      this._errHandler.sync(this)
      _la = this._input.LA(1)
    } while (
      (_la & ~0x1f) == 0 &&
      ((1 << _la) &
        ((1 << ECLParser.ZERO) |
          (1 << ECLParser.ONE) |
          (1 << ECLParser.TWO) |
          (1 << ECLParser.THREE) |
          (1 << ECLParser.FOUR) |
          (1 << ECLParser.FIVE) |
          (1 << ECLParser.SIX) |
          (1 << ECLParser.SEVEN) |
          (1 << ECLParser.EIGHT) |
          (1 << ECLParser.NINE))) !==
        0
    )
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re
      this._errHandler.reportError(this, re)
      this._errHandler.recover(this, re)
    } else {
      throw re
    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function NonnegativeintegervalueContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = ECLParser.RULE_nonnegativeintegervalue
  return this
}

NonnegativeintegervalueContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
)
NonnegativeintegervalueContext.prototype.constructor = NonnegativeintegervalueContext

NonnegativeintegervalueContext.prototype.digitnonzero = function() {
  return this.getTypedRuleContext(DigitnonzeroContext, 0)
}

NonnegativeintegervalueContext.prototype.digit = function(i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTypedRuleContexts(DigitContext)
  } else {
    return this.getTypedRuleContext(DigitContext, i)
  }
}

NonnegativeintegervalueContext.prototype.zero = function() {
  return this.getTypedRuleContext(ZeroContext, 0)
}

NonnegativeintegervalueContext.prototype.enterRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.enterNonnegativeintegervalue(this)
  }
}

NonnegativeintegervalueContext.prototype.exitRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.exitNonnegativeintegervalue(this)
  }
}

NonnegativeintegervalueContext.prototype.accept = function(visitor) {
  if (visitor instanceof ECLVisitor) {
    return visitor.visitNonnegativeintegervalue(this)
  } else {
    return visitor.visitChildren(this)
  }
}

ECLParser.NonnegativeintegervalueContext = NonnegativeintegervalueContext

ECLParser.prototype.nonnegativeintegervalue = function() {
  var localctx = new NonnegativeintegervalueContext(this, this._ctx, this.state)
  this.enterRule(localctx, 100, ECLParser.RULE_nonnegativeintegervalue)
  var _la = 0 // Token type
  try {
    this.state = 490
    this._errHandler.sync(this)
    switch (this._input.LA(1)) {
      case ECLParser.ONE:
      case ECLParser.TWO:
      case ECLParser.THREE:
      case ECLParser.FOUR:
      case ECLParser.FIVE:
      case ECLParser.SIX:
      case ECLParser.SEVEN:
      case ECLParser.EIGHT:
      case ECLParser.NINE:
        this.enterOuterAlt(localctx, 1)
        this.state = 482
        this.digitnonzero()
        this.state = 486
        this._errHandler.sync(this)
        _la = this._input.LA(1)
        while (
          (_la & ~0x1f) == 0 &&
          ((1 << _la) &
            ((1 << ECLParser.ZERO) |
              (1 << ECLParser.ONE) |
              (1 << ECLParser.TWO) |
              (1 << ECLParser.THREE) |
              (1 << ECLParser.FOUR) |
              (1 << ECLParser.FIVE) |
              (1 << ECLParser.SIX) |
              (1 << ECLParser.SEVEN) |
              (1 << ECLParser.EIGHT) |
              (1 << ECLParser.NINE))) !==
            0
        ) {
          this.state = 483
          this.digit()
          this.state = 488
          this._errHandler.sync(this)
          _la = this._input.LA(1)
        }
        break
      case ECLParser.ZERO:
        this.enterOuterAlt(localctx, 2)
        this.state = 489
        this.zero()
        break
      default:
        throw new antlr4.error.NoViableAltException(this)
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re
      this._errHandler.reportError(this, re)
      this._errHandler.recover(this, re)
    } else {
      throw re
    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function SctidContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = ECLParser.RULE_sctid
  return this
}

SctidContext.prototype = Object.create(antlr4.ParserRuleContext.prototype)
SctidContext.prototype.constructor = SctidContext

SctidContext.prototype.digitnonzero = function() {
  return this.getTypedRuleContext(DigitnonzeroContext, 0)
}

SctidContext.prototype.digit = function(i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTypedRuleContexts(DigitContext)
  } else {
    return this.getTypedRuleContext(DigitContext, i)
  }
}

SctidContext.prototype.enterRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.enterSctid(this)
  }
}

SctidContext.prototype.exitRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.exitSctid(this)
  }
}

SctidContext.prototype.accept = function(visitor) {
  if (visitor instanceof ECLVisitor) {
    return visitor.visitSctid(this)
  } else {
    return visitor.visitChildren(this)
  }
}

ECLParser.SctidContext = SctidContext

ECLParser.prototype.sctid = function() {
  var localctx = new SctidContext(this, this._ctx, this.state)
  this.enterRule(localctx, 102, ECLParser.RULE_sctid)
  var _la = 0 // Token type
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 492
    this.digitnonzero()

    this.state = 493
    this.digit()

    this.state = 494
    this.digit()

    this.state = 495
    this.digit()

    this.state = 496
    this.digit()

    this.state = 497
    this.digit()
    this.state = 589
    this._errHandler.sync(this)
    var la_ = this._interp.adaptivePredict(this._input, 42, this._ctx)
    switch (la_) {
      case 1:
        this.state = 499
        this._errHandler.sync(this)
        _la = this._input.LA(1)
        if (
          (_la & ~0x1f) == 0 &&
          ((1 << _la) &
            ((1 << ECLParser.ZERO) |
              (1 << ECLParser.ONE) |
              (1 << ECLParser.TWO) |
              (1 << ECLParser.THREE) |
              (1 << ECLParser.FOUR) |
              (1 << ECLParser.FIVE) |
              (1 << ECLParser.SIX) |
              (1 << ECLParser.SEVEN) |
              (1 << ECLParser.EIGHT) |
              (1 << ECLParser.NINE))) !==
            0
        ) {
          this.state = 498
          this.digit()
        }

        break

      case 2:
        this.state = 501
        this.digit()

        this.state = 502
        this.digit()
        break

      case 3:
        this.state = 504
        this.digit()

        this.state = 505
        this.digit()

        this.state = 506
        this.digit()
        break

      case 4:
        this.state = 508
        this.digit()

        this.state = 509
        this.digit()

        this.state = 510
        this.digit()

        this.state = 511
        this.digit()
        break

      case 5:
        this.state = 513
        this.digit()

        this.state = 514
        this.digit()

        this.state = 515
        this.digit()

        this.state = 516
        this.digit()

        this.state = 517
        this.digit()
        break

      case 6:
        this.state = 519
        this.digit()

        this.state = 520
        this.digit()

        this.state = 521
        this.digit()

        this.state = 522
        this.digit()

        this.state = 523
        this.digit()

        this.state = 524
        this.digit()
        break

      case 7:
        this.state = 526
        this.digit()

        this.state = 527
        this.digit()

        this.state = 528
        this.digit()

        this.state = 529
        this.digit()

        this.state = 530
        this.digit()

        this.state = 531
        this.digit()

        this.state = 532
        this.digit()
        break

      case 8:
        this.state = 534
        this.digit()

        this.state = 535
        this.digit()

        this.state = 536
        this.digit()

        this.state = 537
        this.digit()

        this.state = 538
        this.digit()

        this.state = 539
        this.digit()

        this.state = 540
        this.digit()

        this.state = 541
        this.digit()
        break

      case 9:
        this.state = 543
        this.digit()

        this.state = 544
        this.digit()

        this.state = 545
        this.digit()

        this.state = 546
        this.digit()

        this.state = 547
        this.digit()

        this.state = 548
        this.digit()

        this.state = 549
        this.digit()

        this.state = 550
        this.digit()

        this.state = 551
        this.digit()
        break

      case 10:
        this.state = 553
        this.digit()

        this.state = 554
        this.digit()

        this.state = 555
        this.digit()

        this.state = 556
        this.digit()

        this.state = 557
        this.digit()

        this.state = 558
        this.digit()

        this.state = 559
        this.digit()

        this.state = 560
        this.digit()

        this.state = 561
        this.digit()

        this.state = 562
        this.digit()
        break

      case 11:
        this.state = 564
        this.digit()

        this.state = 565
        this.digit()

        this.state = 566
        this.digit()

        this.state = 567
        this.digit()

        this.state = 568
        this.digit()

        this.state = 569
        this.digit()

        this.state = 570
        this.digit()

        this.state = 571
        this.digit()

        this.state = 572
        this.digit()

        this.state = 573
        this.digit()

        this.state = 574
        this.digit()
        break

      case 12:
        this.state = 576
        this.digit()

        this.state = 577
        this.digit()

        this.state = 578
        this.digit()

        this.state = 579
        this.digit()

        this.state = 580
        this.digit()

        this.state = 581
        this.digit()

        this.state = 582
        this.digit()

        this.state = 583
        this.digit()

        this.state = 584
        this.digit()

        this.state = 585
        this.digit()

        this.state = 586
        this.digit()

        this.state = 587
        this.digit()
        break
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re
      this._errHandler.reportError(this, re)
      this._errHandler.recover(this, re)
    } else {
      throw re
    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function WsContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = ECLParser.RULE_ws
  return this
}

WsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype)
WsContext.prototype.constructor = WsContext

WsContext.prototype.sp = function(i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTypedRuleContexts(SpContext)
  } else {
    return this.getTypedRuleContext(SpContext, i)
  }
}

WsContext.prototype.htab = function(i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTypedRuleContexts(HtabContext)
  } else {
    return this.getTypedRuleContext(HtabContext, i)
  }
}

WsContext.prototype.cr = function(i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTypedRuleContexts(CrContext)
  } else {
    return this.getTypedRuleContext(CrContext, i)
  }
}

WsContext.prototype.lf = function(i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTypedRuleContexts(LfContext)
  } else {
    return this.getTypedRuleContext(LfContext, i)
  }
}

WsContext.prototype.comment = function(i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTypedRuleContexts(CommentContext)
  } else {
    return this.getTypedRuleContext(CommentContext, i)
  }
}

WsContext.prototype.enterRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.enterWs(this)
  }
}

WsContext.prototype.exitRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.exitWs(this)
  }
}

WsContext.prototype.accept = function(visitor) {
  if (visitor instanceof ECLVisitor) {
    return visitor.visitWs(this)
  } else {
    return visitor.visitChildren(this)
  }
}

ECLParser.WsContext = WsContext

ECLParser.prototype.ws = function() {
  var localctx = new WsContext(this, this._ctx, this.state)
  this.enterRule(localctx, 104, ECLParser.RULE_ws)
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 598
    this._errHandler.sync(this)
    var _alt = this._interp.adaptivePredict(this._input, 44, this._ctx)
    while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
      if (_alt === 1) {
        this.state = 596
        this._errHandler.sync(this)
        switch (this._input.LA(1)) {
          case ECLParser.SPACE:
            this.state = 591
            this.sp()
            break
          case ECLParser.TAB:
            this.state = 592
            this.htab()
            break
          case ECLParser.CR:
            this.state = 593
            this.cr()
            break
          case ECLParser.LF:
            this.state = 594
            this.lf()
            break
          case ECLParser.SLASH:
            this.state = 595
            this.comment()
            break
          default:
            throw new antlr4.error.NoViableAltException(this)
        }
      }
      this.state = 600
      this._errHandler.sync(this)
      _alt = this._interp.adaptivePredict(this._input, 44, this._ctx)
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re
      this._errHandler.reportError(this, re)
      this._errHandler.recover(this, re)
    } else {
      throw re
    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function MwsContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = ECLParser.RULE_mws
  return this
}

MwsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype)
MwsContext.prototype.constructor = MwsContext

MwsContext.prototype.sp = function(i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTypedRuleContexts(SpContext)
  } else {
    return this.getTypedRuleContext(SpContext, i)
  }
}

MwsContext.prototype.htab = function(i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTypedRuleContexts(HtabContext)
  } else {
    return this.getTypedRuleContext(HtabContext, i)
  }
}

MwsContext.prototype.cr = function(i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTypedRuleContexts(CrContext)
  } else {
    return this.getTypedRuleContext(CrContext, i)
  }
}

MwsContext.prototype.lf = function(i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTypedRuleContexts(LfContext)
  } else {
    return this.getTypedRuleContext(LfContext, i)
  }
}

MwsContext.prototype.comment = function(i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTypedRuleContexts(CommentContext)
  } else {
    return this.getTypedRuleContext(CommentContext, i)
  }
}

MwsContext.prototype.enterRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.enterMws(this)
  }
}

MwsContext.prototype.exitRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.exitMws(this)
  }
}

MwsContext.prototype.accept = function(visitor) {
  if (visitor instanceof ECLVisitor) {
    return visitor.visitMws(this)
  } else {
    return visitor.visitChildren(this)
  }
}

ECLParser.MwsContext = MwsContext

ECLParser.prototype.mws = function() {
  var localctx = new MwsContext(this, this._ctx, this.state)
  this.enterRule(localctx, 106, ECLParser.RULE_mws)
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 606
    this._errHandler.sync(this)
    var _alt = 1
    do {
      switch (_alt) {
        case 1:
          this.state = 606
          this._errHandler.sync(this)
          switch (this._input.LA(1)) {
            case ECLParser.SPACE:
              this.state = 601
              this.sp()
              break
            case ECLParser.TAB:
              this.state = 602
              this.htab()
              break
            case ECLParser.CR:
              this.state = 603
              this.cr()
              break
            case ECLParser.LF:
              this.state = 604
              this.lf()
              break
            case ECLParser.SLASH:
              this.state = 605
              this.comment()
              break
            default:
              throw new antlr4.error.NoViableAltException(this)
          }
          break
        default:
          throw new antlr4.error.NoViableAltException(this)
      }
      this.state = 608
      this._errHandler.sync(this)
      _alt = this._interp.adaptivePredict(this._input, 46, this._ctx)
    } while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER)
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re
      this._errHandler.reportError(this, re)
      this._errHandler.recover(this, re)
    } else {
      throw re
    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function CommentContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = ECLParser.RULE_comment
  return this
}

CommentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype)
CommentContext.prototype.constructor = CommentContext

CommentContext.prototype.SLASH = function(i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTokens(ECLParser.SLASH)
  } else {
    return this.getToken(ECLParser.SLASH, i)
  }
}

CommentContext.prototype.ASTERISK = function(i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTokens(ECLParser.ASTERISK)
  } else {
    return this.getToken(ECLParser.ASTERISK, i)
  }
}

CommentContext.prototype.nonstarchar = function(i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTypedRuleContexts(NonstarcharContext)
  } else {
    return this.getTypedRuleContext(NonstarcharContext, i)
  }
}

CommentContext.prototype.starwithnonfslash = function(i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTypedRuleContexts(StarwithnonfslashContext)
  } else {
    return this.getTypedRuleContext(StarwithnonfslashContext, i)
  }
}

CommentContext.prototype.enterRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.enterComment(this)
  }
}

CommentContext.prototype.exitRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.exitComment(this)
  }
}

CommentContext.prototype.accept = function(visitor) {
  if (visitor instanceof ECLVisitor) {
    return visitor.visitComment(this)
  } else {
    return visitor.visitChildren(this)
  }
}

ECLParser.CommentContext = CommentContext

ECLParser.prototype.comment = function() {
  var localctx = new CommentContext(this, this._ctx, this.state)
  this.enterRule(localctx, 108, ECLParser.RULE_comment)
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 610
    this.match(ECLParser.SLASH)
    this.state = 611
    this.match(ECLParser.ASTERISK)
    this.state = 617
    this._errHandler.sync(this)
    var _alt = this._interp.adaptivePredict(this._input, 48, this._ctx)
    while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
      if (_alt === 1) {
        this.state = 615
        this._errHandler.sync(this)
        switch (this._input.LA(1)) {
          case ECLParser.UTF8_LETTER:
          case ECLParser.TAB:
          case ECLParser.LF:
          case ECLParser.CR:
          case ECLParser.SPACE:
          case ECLParser.EXCLAMATION:
          case ECLParser.QUOTE:
          case ECLParser.POUND:
          case ECLParser.DOLLAR:
          case ECLParser.PERCENT:
          case ECLParser.AMPERSAND:
          case ECLParser.APOSTROPHE:
          case ECLParser.LEFT_PAREN:
          case ECLParser.RIGHT_PAREN:
          case ECLParser.PLUS:
          case ECLParser.COMMA:
          case ECLParser.DASH:
          case ECLParser.PERIOD:
          case ECLParser.SLASH:
          case ECLParser.ZERO:
          case ECLParser.ONE:
          case ECLParser.TWO:
          case ECLParser.THREE:
          case ECLParser.FOUR:
          case ECLParser.FIVE:
          case ECLParser.SIX:
          case ECLParser.SEVEN:
          case ECLParser.EIGHT:
          case ECLParser.NINE:
          case ECLParser.COLON:
          case ECLParser.SEMICOLON:
          case ECLParser.LESS_THAN:
          case ECLParser.EQUALS:
          case ECLParser.GREATER_THAN:
          case ECLParser.QUESTION:
          case ECLParser.AT:
          case ECLParser.CAP_A:
          case ECLParser.CAP_B:
          case ECLParser.CAP_C:
          case ECLParser.CAP_D:
          case ECLParser.CAP_E:
          case ECLParser.CAP_F:
          case ECLParser.CAP_G:
          case ECLParser.CAP_H:
          case ECLParser.CAP_I:
          case ECLParser.CAP_J:
          case ECLParser.CAP_K:
          case ECLParser.CAP_L:
          case ECLParser.CAP_M:
          case ECLParser.CAP_N:
          case ECLParser.CAP_O:
          case ECLParser.CAP_P:
          case ECLParser.CAP_Q:
          case ECLParser.CAP_R:
          case ECLParser.CAP_S:
          case ECLParser.CAP_T:
          case ECLParser.CAP_U:
          case ECLParser.CAP_V:
          case ECLParser.CAP_W:
          case ECLParser.CAP_X:
          case ECLParser.CAP_Y:
          case ECLParser.CAP_Z:
          case ECLParser.LEFT_BRACE:
          case ECLParser.BACKSLASH:
          case ECLParser.RIGHT_BRACE:
          case ECLParser.CARAT:
          case ECLParser.UNDERSCORE:
          case ECLParser.ACCENT:
          case ECLParser.A:
          case ECLParser.B:
          case ECLParser.C:
          case ECLParser.D:
          case ECLParser.E:
          case ECLParser.F:
          case ECLParser.G:
          case ECLParser.H:
          case ECLParser.I:
          case ECLParser.J:
          case ECLParser.K:
          case ECLParser.L:
          case ECLParser.M:
          case ECLParser.N:
          case ECLParser.O:
          case ECLParser.P:
          case ECLParser.Q:
          case ECLParser.R:
          case ECLParser.S:
          case ECLParser.T:
          case ECLParser.U:
          case ECLParser.V:
          case ECLParser.W:
          case ECLParser.X:
          case ECLParser.Y:
          case ECLParser.Z:
          case ECLParser.LEFT_CURLY_BRACE:
          case ECLParser.PIPE:
          case ECLParser.RIGHT_CURLY_BRACE:
          case ECLParser.TILDE:
            this.state = 613
            this.nonstarchar()
            break
          case ECLParser.ASTERISK:
            this.state = 614
            this.starwithnonfslash()
            break
          default:
            throw new antlr4.error.NoViableAltException(this)
        }
      }
      this.state = 619
      this._errHandler.sync(this)
      _alt = this._interp.adaptivePredict(this._input, 48, this._ctx)
    }

    this.state = 620
    this.match(ECLParser.ASTERISK)
    this.state = 621
    this.match(ECLParser.SLASH)
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re
      this._errHandler.reportError(this, re)
      this._errHandler.recover(this, re)
    } else {
      throw re
    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function NonstarcharContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = ECLParser.RULE_nonstarchar
  return this
}

NonstarcharContext.prototype = Object.create(antlr4.ParserRuleContext.prototype)
NonstarcharContext.prototype.constructor = NonstarcharContext

NonstarcharContext.prototype.sp = function() {
  return this.getTypedRuleContext(SpContext, 0)
}

NonstarcharContext.prototype.htab = function() {
  return this.getTypedRuleContext(HtabContext, 0)
}

NonstarcharContext.prototype.cr = function() {
  return this.getTypedRuleContext(CrContext, 0)
}

NonstarcharContext.prototype.lf = function() {
  return this.getTypedRuleContext(LfContext, 0)
}

NonstarcharContext.prototype.EXCLAMATION = function() {
  return this.getToken(ECLParser.EXCLAMATION, 0)
}

NonstarcharContext.prototype.QUOTE = function() {
  return this.getToken(ECLParser.QUOTE, 0)
}

NonstarcharContext.prototype.POUND = function() {
  return this.getToken(ECLParser.POUND, 0)
}

NonstarcharContext.prototype.DOLLAR = function() {
  return this.getToken(ECLParser.DOLLAR, 0)
}

NonstarcharContext.prototype.PERCENT = function() {
  return this.getToken(ECLParser.PERCENT, 0)
}

NonstarcharContext.prototype.AMPERSAND = function() {
  return this.getToken(ECLParser.AMPERSAND, 0)
}

NonstarcharContext.prototype.APOSTROPHE = function() {
  return this.getToken(ECLParser.APOSTROPHE, 0)
}

NonstarcharContext.prototype.LEFT_PAREN = function() {
  return this.getToken(ECLParser.LEFT_PAREN, 0)
}

NonstarcharContext.prototype.RIGHT_PAREN = function() {
  return this.getToken(ECLParser.RIGHT_PAREN, 0)
}

NonstarcharContext.prototype.PLUS = function() {
  return this.getToken(ECLParser.PLUS, 0)
}

NonstarcharContext.prototype.COMMA = function() {
  return this.getToken(ECLParser.COMMA, 0)
}

NonstarcharContext.prototype.DASH = function() {
  return this.getToken(ECLParser.DASH, 0)
}

NonstarcharContext.prototype.PERIOD = function() {
  return this.getToken(ECLParser.PERIOD, 0)
}

NonstarcharContext.prototype.SLASH = function() {
  return this.getToken(ECLParser.SLASH, 0)
}

NonstarcharContext.prototype.ZERO = function() {
  return this.getToken(ECLParser.ZERO, 0)
}

NonstarcharContext.prototype.ONE = function() {
  return this.getToken(ECLParser.ONE, 0)
}

NonstarcharContext.prototype.TWO = function() {
  return this.getToken(ECLParser.TWO, 0)
}

NonstarcharContext.prototype.THREE = function() {
  return this.getToken(ECLParser.THREE, 0)
}

NonstarcharContext.prototype.FOUR = function() {
  return this.getToken(ECLParser.FOUR, 0)
}

NonstarcharContext.prototype.FIVE = function() {
  return this.getToken(ECLParser.FIVE, 0)
}

NonstarcharContext.prototype.SIX = function() {
  return this.getToken(ECLParser.SIX, 0)
}

NonstarcharContext.prototype.SEVEN = function() {
  return this.getToken(ECLParser.SEVEN, 0)
}

NonstarcharContext.prototype.EIGHT = function() {
  return this.getToken(ECLParser.EIGHT, 0)
}

NonstarcharContext.prototype.NINE = function() {
  return this.getToken(ECLParser.NINE, 0)
}

NonstarcharContext.prototype.COLON = function() {
  return this.getToken(ECLParser.COLON, 0)
}

NonstarcharContext.prototype.SEMICOLON = function() {
  return this.getToken(ECLParser.SEMICOLON, 0)
}

NonstarcharContext.prototype.LESS_THAN = function() {
  return this.getToken(ECLParser.LESS_THAN, 0)
}

NonstarcharContext.prototype.EQUALS = function() {
  return this.getToken(ECLParser.EQUALS, 0)
}

NonstarcharContext.prototype.GREATER_THAN = function() {
  return this.getToken(ECLParser.GREATER_THAN, 0)
}

NonstarcharContext.prototype.QUESTION = function() {
  return this.getToken(ECLParser.QUESTION, 0)
}

NonstarcharContext.prototype.AT = function() {
  return this.getToken(ECLParser.AT, 0)
}

NonstarcharContext.prototype.CAP_A = function() {
  return this.getToken(ECLParser.CAP_A, 0)
}

NonstarcharContext.prototype.CAP_B = function() {
  return this.getToken(ECLParser.CAP_B, 0)
}

NonstarcharContext.prototype.CAP_C = function() {
  return this.getToken(ECLParser.CAP_C, 0)
}

NonstarcharContext.prototype.CAP_D = function() {
  return this.getToken(ECLParser.CAP_D, 0)
}

NonstarcharContext.prototype.CAP_E = function() {
  return this.getToken(ECLParser.CAP_E, 0)
}

NonstarcharContext.prototype.CAP_F = function() {
  return this.getToken(ECLParser.CAP_F, 0)
}

NonstarcharContext.prototype.CAP_G = function() {
  return this.getToken(ECLParser.CAP_G, 0)
}

NonstarcharContext.prototype.CAP_H = function() {
  return this.getToken(ECLParser.CAP_H, 0)
}

NonstarcharContext.prototype.CAP_I = function() {
  return this.getToken(ECLParser.CAP_I, 0)
}

NonstarcharContext.prototype.CAP_J = function() {
  return this.getToken(ECLParser.CAP_J, 0)
}

NonstarcharContext.prototype.CAP_K = function() {
  return this.getToken(ECLParser.CAP_K, 0)
}

NonstarcharContext.prototype.CAP_L = function() {
  return this.getToken(ECLParser.CAP_L, 0)
}

NonstarcharContext.prototype.CAP_M = function() {
  return this.getToken(ECLParser.CAP_M, 0)
}

NonstarcharContext.prototype.CAP_N = function() {
  return this.getToken(ECLParser.CAP_N, 0)
}

NonstarcharContext.prototype.CAP_O = function() {
  return this.getToken(ECLParser.CAP_O, 0)
}

NonstarcharContext.prototype.CAP_P = function() {
  return this.getToken(ECLParser.CAP_P, 0)
}

NonstarcharContext.prototype.CAP_Q = function() {
  return this.getToken(ECLParser.CAP_Q, 0)
}

NonstarcharContext.prototype.CAP_R = function() {
  return this.getToken(ECLParser.CAP_R, 0)
}

NonstarcharContext.prototype.CAP_S = function() {
  return this.getToken(ECLParser.CAP_S, 0)
}

NonstarcharContext.prototype.CAP_T = function() {
  return this.getToken(ECLParser.CAP_T, 0)
}

NonstarcharContext.prototype.CAP_U = function() {
  return this.getToken(ECLParser.CAP_U, 0)
}

NonstarcharContext.prototype.CAP_V = function() {
  return this.getToken(ECLParser.CAP_V, 0)
}

NonstarcharContext.prototype.CAP_W = function() {
  return this.getToken(ECLParser.CAP_W, 0)
}

NonstarcharContext.prototype.CAP_X = function() {
  return this.getToken(ECLParser.CAP_X, 0)
}

NonstarcharContext.prototype.CAP_Y = function() {
  return this.getToken(ECLParser.CAP_Y, 0)
}

NonstarcharContext.prototype.CAP_Z = function() {
  return this.getToken(ECLParser.CAP_Z, 0)
}

NonstarcharContext.prototype.LEFT_BRACE = function() {
  return this.getToken(ECLParser.LEFT_BRACE, 0)
}

NonstarcharContext.prototype.BACKSLASH = function() {
  return this.getToken(ECLParser.BACKSLASH, 0)
}

NonstarcharContext.prototype.RIGHT_BRACE = function() {
  return this.getToken(ECLParser.RIGHT_BRACE, 0)
}

NonstarcharContext.prototype.CARAT = function() {
  return this.getToken(ECLParser.CARAT, 0)
}

NonstarcharContext.prototype.UNDERSCORE = function() {
  return this.getToken(ECLParser.UNDERSCORE, 0)
}

NonstarcharContext.prototype.ACCENT = function() {
  return this.getToken(ECLParser.ACCENT, 0)
}

NonstarcharContext.prototype.A = function() {
  return this.getToken(ECLParser.A, 0)
}

NonstarcharContext.prototype.B = function() {
  return this.getToken(ECLParser.B, 0)
}

NonstarcharContext.prototype.C = function() {
  return this.getToken(ECLParser.C, 0)
}

NonstarcharContext.prototype.D = function() {
  return this.getToken(ECLParser.D, 0)
}

NonstarcharContext.prototype.E = function() {
  return this.getToken(ECLParser.E, 0)
}

NonstarcharContext.prototype.F = function() {
  return this.getToken(ECLParser.F, 0)
}

NonstarcharContext.prototype.G = function() {
  return this.getToken(ECLParser.G, 0)
}

NonstarcharContext.prototype.H = function() {
  return this.getToken(ECLParser.H, 0)
}

NonstarcharContext.prototype.I = function() {
  return this.getToken(ECLParser.I, 0)
}

NonstarcharContext.prototype.J = function() {
  return this.getToken(ECLParser.J, 0)
}

NonstarcharContext.prototype.K = function() {
  return this.getToken(ECLParser.K, 0)
}

NonstarcharContext.prototype.L = function() {
  return this.getToken(ECLParser.L, 0)
}

NonstarcharContext.prototype.M = function() {
  return this.getToken(ECLParser.M, 0)
}

NonstarcharContext.prototype.N = function() {
  return this.getToken(ECLParser.N, 0)
}

NonstarcharContext.prototype.O = function() {
  return this.getToken(ECLParser.O, 0)
}

NonstarcharContext.prototype.P = function() {
  return this.getToken(ECLParser.P, 0)
}

NonstarcharContext.prototype.Q = function() {
  return this.getToken(ECLParser.Q, 0)
}

NonstarcharContext.prototype.R = function() {
  return this.getToken(ECLParser.R, 0)
}

NonstarcharContext.prototype.S = function() {
  return this.getToken(ECLParser.S, 0)
}

NonstarcharContext.prototype.T = function() {
  return this.getToken(ECLParser.T, 0)
}

NonstarcharContext.prototype.U = function() {
  return this.getToken(ECLParser.U, 0)
}

NonstarcharContext.prototype.V = function() {
  return this.getToken(ECLParser.V, 0)
}

NonstarcharContext.prototype.W = function() {
  return this.getToken(ECLParser.W, 0)
}

NonstarcharContext.prototype.X = function() {
  return this.getToken(ECLParser.X, 0)
}

NonstarcharContext.prototype.Y = function() {
  return this.getToken(ECLParser.Y, 0)
}

NonstarcharContext.prototype.Z = function() {
  return this.getToken(ECLParser.Z, 0)
}

NonstarcharContext.prototype.LEFT_CURLY_BRACE = function() {
  return this.getToken(ECLParser.LEFT_CURLY_BRACE, 0)
}

NonstarcharContext.prototype.PIPE = function() {
  return this.getToken(ECLParser.PIPE, 0)
}

NonstarcharContext.prototype.RIGHT_CURLY_BRACE = function() {
  return this.getToken(ECLParser.RIGHT_CURLY_BRACE, 0)
}

NonstarcharContext.prototype.TILDE = function() {
  return this.getToken(ECLParser.TILDE, 0)
}

NonstarcharContext.prototype.UTF8_LETTER = function() {
  return this.getToken(ECLParser.UTF8_LETTER, 0)
}

NonstarcharContext.prototype.enterRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.enterNonstarchar(this)
  }
}

NonstarcharContext.prototype.exitRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.exitNonstarchar(this)
  }
}

NonstarcharContext.prototype.accept = function(visitor) {
  if (visitor instanceof ECLVisitor) {
    return visitor.visitNonstarchar(this)
  } else {
    return visitor.visitChildren(this)
  }
}

ECLParser.NonstarcharContext = NonstarcharContext

ECLParser.prototype.nonstarchar = function() {
  var localctx = new NonstarcharContext(this, this._ctx, this.state)
  this.enterRule(localctx, 110, ECLParser.RULE_nonstarchar)
  var _la = 0 // Token type
  try {
    this.state = 630
    this._errHandler.sync(this)
    switch (this._input.LA(1)) {
      case ECLParser.SPACE:
        this.enterOuterAlt(localctx, 1)
        this.state = 623
        this.sp()
        break
      case ECLParser.TAB:
        this.enterOuterAlt(localctx, 2)
        this.state = 624
        this.htab()
        break
      case ECLParser.CR:
        this.enterOuterAlt(localctx, 3)
        this.state = 625
        this.cr()
        break
      case ECLParser.LF:
        this.enterOuterAlt(localctx, 4)
        this.state = 626
        this.lf()
        break
      case ECLParser.EXCLAMATION:
      case ECLParser.QUOTE:
      case ECLParser.POUND:
      case ECLParser.DOLLAR:
      case ECLParser.PERCENT:
      case ECLParser.AMPERSAND:
      case ECLParser.APOSTROPHE:
      case ECLParser.LEFT_PAREN:
      case ECLParser.RIGHT_PAREN:
        this.enterOuterAlt(localctx, 5)
        this.state = 627
        _la = this._input.LA(1)
        if (
          !(
            (_la & ~0x1f) == 0 &&
            ((1 << _la) &
              ((1 << ECLParser.EXCLAMATION) |
                (1 << ECLParser.QUOTE) |
                (1 << ECLParser.POUND) |
                (1 << ECLParser.DOLLAR) |
                (1 << ECLParser.PERCENT) |
                (1 << ECLParser.AMPERSAND) |
                (1 << ECLParser.APOSTROPHE) |
                (1 << ECLParser.LEFT_PAREN) |
                (1 << ECLParser.RIGHT_PAREN))) !==
              0
          )
        ) {
          this._errHandler.recoverInline(this)
        } else {
          this._errHandler.reportMatch(this)
          this.consume()
        }
        break
      case ECLParser.PLUS:
      case ECLParser.COMMA:
      case ECLParser.DASH:
      case ECLParser.PERIOD:
      case ECLParser.SLASH:
      case ECLParser.ZERO:
      case ECLParser.ONE:
      case ECLParser.TWO:
      case ECLParser.THREE:
      case ECLParser.FOUR:
      case ECLParser.FIVE:
      case ECLParser.SIX:
      case ECLParser.SEVEN:
      case ECLParser.EIGHT:
      case ECLParser.NINE:
      case ECLParser.COLON:
      case ECLParser.SEMICOLON:
      case ECLParser.LESS_THAN:
      case ECLParser.EQUALS:
      case ECLParser.GREATER_THAN:
      case ECLParser.QUESTION:
      case ECLParser.AT:
      case ECLParser.CAP_A:
      case ECLParser.CAP_B:
      case ECLParser.CAP_C:
      case ECLParser.CAP_D:
      case ECLParser.CAP_E:
      case ECLParser.CAP_F:
      case ECLParser.CAP_G:
      case ECLParser.CAP_H:
      case ECLParser.CAP_I:
      case ECLParser.CAP_J:
      case ECLParser.CAP_K:
      case ECLParser.CAP_L:
      case ECLParser.CAP_M:
      case ECLParser.CAP_N:
      case ECLParser.CAP_O:
      case ECLParser.CAP_P:
      case ECLParser.CAP_Q:
      case ECLParser.CAP_R:
      case ECLParser.CAP_S:
      case ECLParser.CAP_T:
      case ECLParser.CAP_U:
      case ECLParser.CAP_V:
      case ECLParser.CAP_W:
      case ECLParser.CAP_X:
      case ECLParser.CAP_Y:
      case ECLParser.CAP_Z:
      case ECLParser.LEFT_BRACE:
      case ECLParser.BACKSLASH:
      case ECLParser.RIGHT_BRACE:
      case ECLParser.CARAT:
      case ECLParser.UNDERSCORE:
      case ECLParser.ACCENT:
      case ECLParser.A:
      case ECLParser.B:
      case ECLParser.C:
      case ECLParser.D:
      case ECLParser.E:
      case ECLParser.F:
      case ECLParser.G:
      case ECLParser.H:
      case ECLParser.I:
      case ECLParser.J:
      case ECLParser.K:
      case ECLParser.L:
      case ECLParser.M:
      case ECLParser.N:
      case ECLParser.O:
      case ECLParser.P:
      case ECLParser.Q:
      case ECLParser.R:
      case ECLParser.S:
      case ECLParser.T:
      case ECLParser.U:
      case ECLParser.V:
      case ECLParser.W:
      case ECLParser.X:
      case ECLParser.Y:
      case ECLParser.Z:
      case ECLParser.LEFT_CURLY_BRACE:
      case ECLParser.PIPE:
      case ECLParser.RIGHT_CURLY_BRACE:
      case ECLParser.TILDE:
        this.enterOuterAlt(localctx, 6)
        this.state = 628
        _la = this._input.LA(1)
        if (
          !(
            (((_la - 16) & ~0x1f) == 0 &&
              ((1 << (_la - 16)) &
                ((1 << (ECLParser.PLUS - 16)) |
                  (1 << (ECLParser.COMMA - 16)) |
                  (1 << (ECLParser.DASH - 16)) |
                  (1 << (ECLParser.PERIOD - 16)) |
                  (1 << (ECLParser.SLASH - 16)) |
                  (1 << (ECLParser.ZERO - 16)) |
                  (1 << (ECLParser.ONE - 16)) |
                  (1 << (ECLParser.TWO - 16)) |
                  (1 << (ECLParser.THREE - 16)) |
                  (1 << (ECLParser.FOUR - 16)) |
                  (1 << (ECLParser.FIVE - 16)) |
                  (1 << (ECLParser.SIX - 16)) |
                  (1 << (ECLParser.SEVEN - 16)) |
                  (1 << (ECLParser.EIGHT - 16)) |
                  (1 << (ECLParser.NINE - 16)) |
                  (1 << (ECLParser.COLON - 16)) |
                  (1 << (ECLParser.SEMICOLON - 16)) |
                  (1 << (ECLParser.LESS_THAN - 16)) |
                  (1 << (ECLParser.EQUALS - 16)) |
                  (1 << (ECLParser.GREATER_THAN - 16)) |
                  (1 << (ECLParser.QUESTION - 16)) |
                  (1 << (ECLParser.AT - 16)) |
                  (1 << (ECLParser.CAP_A - 16)) |
                  (1 << (ECLParser.CAP_B - 16)) |
                  (1 << (ECLParser.CAP_C - 16)) |
                  (1 << (ECLParser.CAP_D - 16)) |
                  (1 << (ECLParser.CAP_E - 16)) |
                  (1 << (ECLParser.CAP_F - 16)) |
                  (1 << (ECLParser.CAP_G - 16)) |
                  (1 << (ECLParser.CAP_H - 16)) |
                  (1 << (ECLParser.CAP_I - 16)) |
                  (1 << (ECLParser.CAP_J - 16)))) !==
                0) ||
            (((_la - 48) & ~0x1f) == 0 &&
              ((1 << (_la - 48)) &
                ((1 << (ECLParser.CAP_K - 48)) |
                  (1 << (ECLParser.CAP_L - 48)) |
                  (1 << (ECLParser.CAP_M - 48)) |
                  (1 << (ECLParser.CAP_N - 48)) |
                  (1 << (ECLParser.CAP_O - 48)) |
                  (1 << (ECLParser.CAP_P - 48)) |
                  (1 << (ECLParser.CAP_Q - 48)) |
                  (1 << (ECLParser.CAP_R - 48)) |
                  (1 << (ECLParser.CAP_S - 48)) |
                  (1 << (ECLParser.CAP_T - 48)) |
                  (1 << (ECLParser.CAP_U - 48)) |
                  (1 << (ECLParser.CAP_V - 48)) |
                  (1 << (ECLParser.CAP_W - 48)) |
                  (1 << (ECLParser.CAP_X - 48)) |
                  (1 << (ECLParser.CAP_Y - 48)) |
                  (1 << (ECLParser.CAP_Z - 48)) |
                  (1 << (ECLParser.LEFT_BRACE - 48)) |
                  (1 << (ECLParser.BACKSLASH - 48)) |
                  (1 << (ECLParser.RIGHT_BRACE - 48)) |
                  (1 << (ECLParser.CARAT - 48)) |
                  (1 << (ECLParser.UNDERSCORE - 48)) |
                  (1 << (ECLParser.ACCENT - 48)) |
                  (1 << (ECLParser.A - 48)) |
                  (1 << (ECLParser.B - 48)) |
                  (1 << (ECLParser.C - 48)) |
                  (1 << (ECLParser.D - 48)) |
                  (1 << (ECLParser.E - 48)) |
                  (1 << (ECLParser.F - 48)) |
                  (1 << (ECLParser.G - 48)) |
                  (1 << (ECLParser.H - 48)) |
                  (1 << (ECLParser.I - 48)) |
                  (1 << (ECLParser.J - 48)))) !==
                0) ||
            (((_la - 80) & ~0x1f) == 0 &&
              ((1 << (_la - 80)) &
                ((1 << (ECLParser.K - 80)) |
                  (1 << (ECLParser.L - 80)) |
                  (1 << (ECLParser.M - 80)) |
                  (1 << (ECLParser.N - 80)) |
                  (1 << (ECLParser.O - 80)) |
                  (1 << (ECLParser.P - 80)) |
                  (1 << (ECLParser.Q - 80)) |
                  (1 << (ECLParser.R - 80)) |
                  (1 << (ECLParser.S - 80)) |
                  (1 << (ECLParser.T - 80)) |
                  (1 << (ECLParser.U - 80)) |
                  (1 << (ECLParser.V - 80)) |
                  (1 << (ECLParser.W - 80)) |
                  (1 << (ECLParser.X - 80)) |
                  (1 << (ECLParser.Y - 80)) |
                  (1 << (ECLParser.Z - 80)) |
                  (1 << (ECLParser.LEFT_CURLY_BRACE - 80)) |
                  (1 << (ECLParser.PIPE - 80)) |
                  (1 << (ECLParser.RIGHT_CURLY_BRACE - 80)) |
                  (1 << (ECLParser.TILDE - 80)))) !==
                0)
          )
        ) {
          this._errHandler.recoverInline(this)
        } else {
          this._errHandler.reportMatch(this)
          this.consume()
        }
        break
      case ECLParser.UTF8_LETTER:
        this.enterOuterAlt(localctx, 7)
        this.state = 629
        this.match(ECLParser.UTF8_LETTER)
        break
      default:
        throw new antlr4.error.NoViableAltException(this)
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re
      this._errHandler.reportError(this, re)
      this._errHandler.recover(this, re)
    } else {
      throw re
    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function StarwithnonfslashContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = ECLParser.RULE_starwithnonfslash
  return this
}

StarwithnonfslashContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
)
StarwithnonfslashContext.prototype.constructor = StarwithnonfslashContext

StarwithnonfslashContext.prototype.ASTERISK = function() {
  return this.getToken(ECLParser.ASTERISK, 0)
}

StarwithnonfslashContext.prototype.nonfslash = function() {
  return this.getTypedRuleContext(NonfslashContext, 0)
}

StarwithnonfslashContext.prototype.enterRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.enterStarwithnonfslash(this)
  }
}

StarwithnonfslashContext.prototype.exitRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.exitStarwithnonfslash(this)
  }
}

StarwithnonfslashContext.prototype.accept = function(visitor) {
  if (visitor instanceof ECLVisitor) {
    return visitor.visitStarwithnonfslash(this)
  } else {
    return visitor.visitChildren(this)
  }
}

ECLParser.StarwithnonfslashContext = StarwithnonfslashContext

ECLParser.prototype.starwithnonfslash = function() {
  var localctx = new StarwithnonfslashContext(this, this._ctx, this.state)
  this.enterRule(localctx, 112, ECLParser.RULE_starwithnonfslash)
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 632
    this.match(ECLParser.ASTERISK)
    this.state = 633
    this.nonfslash()
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re
      this._errHandler.reportError(this, re)
      this._errHandler.recover(this, re)
    } else {
      throw re
    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function NonfslashContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = ECLParser.RULE_nonfslash
  return this
}

NonfslashContext.prototype = Object.create(antlr4.ParserRuleContext.prototype)
NonfslashContext.prototype.constructor = NonfslashContext

NonfslashContext.prototype.sp = function() {
  return this.getTypedRuleContext(SpContext, 0)
}

NonfslashContext.prototype.htab = function() {
  return this.getTypedRuleContext(HtabContext, 0)
}

NonfslashContext.prototype.cr = function() {
  return this.getTypedRuleContext(CrContext, 0)
}

NonfslashContext.prototype.lf = function() {
  return this.getTypedRuleContext(LfContext, 0)
}

NonfslashContext.prototype.EXCLAMATION = function() {
  return this.getToken(ECLParser.EXCLAMATION, 0)
}

NonfslashContext.prototype.QUOTE = function() {
  return this.getToken(ECLParser.QUOTE, 0)
}

NonfslashContext.prototype.POUND = function() {
  return this.getToken(ECLParser.POUND, 0)
}

NonfslashContext.prototype.DOLLAR = function() {
  return this.getToken(ECLParser.DOLLAR, 0)
}

NonfslashContext.prototype.PERCENT = function() {
  return this.getToken(ECLParser.PERCENT, 0)
}

NonfslashContext.prototype.AMPERSAND = function() {
  return this.getToken(ECLParser.AMPERSAND, 0)
}

NonfslashContext.prototype.APOSTROPHE = function() {
  return this.getToken(ECLParser.APOSTROPHE, 0)
}

NonfslashContext.prototype.LEFT_PAREN = function() {
  return this.getToken(ECLParser.LEFT_PAREN, 0)
}

NonfslashContext.prototype.RIGHT_PAREN = function() {
  return this.getToken(ECLParser.RIGHT_PAREN, 0)
}

NonfslashContext.prototype.ASTERISK = function() {
  return this.getToken(ECLParser.ASTERISK, 0)
}

NonfslashContext.prototype.PLUS = function() {
  return this.getToken(ECLParser.PLUS, 0)
}

NonfslashContext.prototype.COMMA = function() {
  return this.getToken(ECLParser.COMMA, 0)
}

NonfslashContext.prototype.DASH = function() {
  return this.getToken(ECLParser.DASH, 0)
}

NonfslashContext.prototype.PERIOD = function() {
  return this.getToken(ECLParser.PERIOD, 0)
}

NonfslashContext.prototype.ZERO = function() {
  return this.getToken(ECLParser.ZERO, 0)
}

NonfslashContext.prototype.ONE = function() {
  return this.getToken(ECLParser.ONE, 0)
}

NonfslashContext.prototype.TWO = function() {
  return this.getToken(ECLParser.TWO, 0)
}

NonfslashContext.prototype.THREE = function() {
  return this.getToken(ECLParser.THREE, 0)
}

NonfslashContext.prototype.FOUR = function() {
  return this.getToken(ECLParser.FOUR, 0)
}

NonfslashContext.prototype.FIVE = function() {
  return this.getToken(ECLParser.FIVE, 0)
}

NonfslashContext.prototype.SIX = function() {
  return this.getToken(ECLParser.SIX, 0)
}

NonfslashContext.prototype.SEVEN = function() {
  return this.getToken(ECLParser.SEVEN, 0)
}

NonfslashContext.prototype.EIGHT = function() {
  return this.getToken(ECLParser.EIGHT, 0)
}

NonfslashContext.prototype.NINE = function() {
  return this.getToken(ECLParser.NINE, 0)
}

NonfslashContext.prototype.COLON = function() {
  return this.getToken(ECLParser.COLON, 0)
}

NonfslashContext.prototype.SEMICOLON = function() {
  return this.getToken(ECLParser.SEMICOLON, 0)
}

NonfslashContext.prototype.LESS_THAN = function() {
  return this.getToken(ECLParser.LESS_THAN, 0)
}

NonfslashContext.prototype.EQUALS = function() {
  return this.getToken(ECLParser.EQUALS, 0)
}

NonfslashContext.prototype.GREATER_THAN = function() {
  return this.getToken(ECLParser.GREATER_THAN, 0)
}

NonfslashContext.prototype.QUESTION = function() {
  return this.getToken(ECLParser.QUESTION, 0)
}

NonfslashContext.prototype.AT = function() {
  return this.getToken(ECLParser.AT, 0)
}

NonfslashContext.prototype.CAP_A = function() {
  return this.getToken(ECLParser.CAP_A, 0)
}

NonfslashContext.prototype.CAP_B = function() {
  return this.getToken(ECLParser.CAP_B, 0)
}

NonfslashContext.prototype.CAP_C = function() {
  return this.getToken(ECLParser.CAP_C, 0)
}

NonfslashContext.prototype.CAP_D = function() {
  return this.getToken(ECLParser.CAP_D, 0)
}

NonfslashContext.prototype.CAP_E = function() {
  return this.getToken(ECLParser.CAP_E, 0)
}

NonfslashContext.prototype.CAP_F = function() {
  return this.getToken(ECLParser.CAP_F, 0)
}

NonfslashContext.prototype.CAP_G = function() {
  return this.getToken(ECLParser.CAP_G, 0)
}

NonfslashContext.prototype.CAP_H = function() {
  return this.getToken(ECLParser.CAP_H, 0)
}

NonfslashContext.prototype.CAP_I = function() {
  return this.getToken(ECLParser.CAP_I, 0)
}

NonfslashContext.prototype.CAP_J = function() {
  return this.getToken(ECLParser.CAP_J, 0)
}

NonfslashContext.prototype.CAP_K = function() {
  return this.getToken(ECLParser.CAP_K, 0)
}

NonfslashContext.prototype.CAP_L = function() {
  return this.getToken(ECLParser.CAP_L, 0)
}

NonfslashContext.prototype.CAP_M = function() {
  return this.getToken(ECLParser.CAP_M, 0)
}

NonfslashContext.prototype.CAP_N = function() {
  return this.getToken(ECLParser.CAP_N, 0)
}

NonfslashContext.prototype.CAP_O = function() {
  return this.getToken(ECLParser.CAP_O, 0)
}

NonfslashContext.prototype.CAP_P = function() {
  return this.getToken(ECLParser.CAP_P, 0)
}

NonfslashContext.prototype.CAP_Q = function() {
  return this.getToken(ECLParser.CAP_Q, 0)
}

NonfslashContext.prototype.CAP_R = function() {
  return this.getToken(ECLParser.CAP_R, 0)
}

NonfslashContext.prototype.CAP_S = function() {
  return this.getToken(ECLParser.CAP_S, 0)
}

NonfslashContext.prototype.CAP_T = function() {
  return this.getToken(ECLParser.CAP_T, 0)
}

NonfslashContext.prototype.CAP_U = function() {
  return this.getToken(ECLParser.CAP_U, 0)
}

NonfslashContext.prototype.CAP_V = function() {
  return this.getToken(ECLParser.CAP_V, 0)
}

NonfslashContext.prototype.CAP_W = function() {
  return this.getToken(ECLParser.CAP_W, 0)
}

NonfslashContext.prototype.CAP_X = function() {
  return this.getToken(ECLParser.CAP_X, 0)
}

NonfslashContext.prototype.CAP_Y = function() {
  return this.getToken(ECLParser.CAP_Y, 0)
}

NonfslashContext.prototype.CAP_Z = function() {
  return this.getToken(ECLParser.CAP_Z, 0)
}

NonfslashContext.prototype.LEFT_BRACE = function() {
  return this.getToken(ECLParser.LEFT_BRACE, 0)
}

NonfslashContext.prototype.BACKSLASH = function() {
  return this.getToken(ECLParser.BACKSLASH, 0)
}

NonfslashContext.prototype.RIGHT_BRACE = function() {
  return this.getToken(ECLParser.RIGHT_BRACE, 0)
}

NonfslashContext.prototype.CARAT = function() {
  return this.getToken(ECLParser.CARAT, 0)
}

NonfslashContext.prototype.UNDERSCORE = function() {
  return this.getToken(ECLParser.UNDERSCORE, 0)
}

NonfslashContext.prototype.ACCENT = function() {
  return this.getToken(ECLParser.ACCENT, 0)
}

NonfslashContext.prototype.A = function() {
  return this.getToken(ECLParser.A, 0)
}

NonfslashContext.prototype.B = function() {
  return this.getToken(ECLParser.B, 0)
}

NonfslashContext.prototype.C = function() {
  return this.getToken(ECLParser.C, 0)
}

NonfslashContext.prototype.D = function() {
  return this.getToken(ECLParser.D, 0)
}

NonfslashContext.prototype.E = function() {
  return this.getToken(ECLParser.E, 0)
}

NonfslashContext.prototype.F = function() {
  return this.getToken(ECLParser.F, 0)
}

NonfslashContext.prototype.G = function() {
  return this.getToken(ECLParser.G, 0)
}

NonfslashContext.prototype.H = function() {
  return this.getToken(ECLParser.H, 0)
}

NonfslashContext.prototype.I = function() {
  return this.getToken(ECLParser.I, 0)
}

NonfslashContext.prototype.J = function() {
  return this.getToken(ECLParser.J, 0)
}

NonfslashContext.prototype.K = function() {
  return this.getToken(ECLParser.K, 0)
}

NonfslashContext.prototype.L = function() {
  return this.getToken(ECLParser.L, 0)
}

NonfslashContext.prototype.M = function() {
  return this.getToken(ECLParser.M, 0)
}

NonfslashContext.prototype.N = function() {
  return this.getToken(ECLParser.N, 0)
}

NonfslashContext.prototype.O = function() {
  return this.getToken(ECLParser.O, 0)
}

NonfslashContext.prototype.P = function() {
  return this.getToken(ECLParser.P, 0)
}

NonfslashContext.prototype.Q = function() {
  return this.getToken(ECLParser.Q, 0)
}

NonfslashContext.prototype.R = function() {
  return this.getToken(ECLParser.R, 0)
}

NonfslashContext.prototype.S = function() {
  return this.getToken(ECLParser.S, 0)
}

NonfslashContext.prototype.T = function() {
  return this.getToken(ECLParser.T, 0)
}

NonfslashContext.prototype.U = function() {
  return this.getToken(ECLParser.U, 0)
}

NonfslashContext.prototype.V = function() {
  return this.getToken(ECLParser.V, 0)
}

NonfslashContext.prototype.W = function() {
  return this.getToken(ECLParser.W, 0)
}

NonfslashContext.prototype.X = function() {
  return this.getToken(ECLParser.X, 0)
}

NonfslashContext.prototype.Y = function() {
  return this.getToken(ECLParser.Y, 0)
}

NonfslashContext.prototype.Z = function() {
  return this.getToken(ECLParser.Z, 0)
}

NonfslashContext.prototype.LEFT_CURLY_BRACE = function() {
  return this.getToken(ECLParser.LEFT_CURLY_BRACE, 0)
}

NonfslashContext.prototype.PIPE = function() {
  return this.getToken(ECLParser.PIPE, 0)
}

NonfslashContext.prototype.RIGHT_CURLY_BRACE = function() {
  return this.getToken(ECLParser.RIGHT_CURLY_BRACE, 0)
}

NonfslashContext.prototype.TILDE = function() {
  return this.getToken(ECLParser.TILDE, 0)
}

NonfslashContext.prototype.UTF8_LETTER = function() {
  return this.getToken(ECLParser.UTF8_LETTER, 0)
}

NonfslashContext.prototype.enterRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.enterNonfslash(this)
  }
}

NonfslashContext.prototype.exitRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.exitNonfslash(this)
  }
}

NonfslashContext.prototype.accept = function(visitor) {
  if (visitor instanceof ECLVisitor) {
    return visitor.visitNonfslash(this)
  } else {
    return visitor.visitChildren(this)
  }
}

ECLParser.NonfslashContext = NonfslashContext

ECLParser.prototype.nonfslash = function() {
  var localctx = new NonfslashContext(this, this._ctx, this.state)
  this.enterRule(localctx, 114, ECLParser.RULE_nonfslash)
  var _la = 0 // Token type
  try {
    this.state = 642
    this._errHandler.sync(this)
    switch (this._input.LA(1)) {
      case ECLParser.SPACE:
        this.enterOuterAlt(localctx, 1)
        this.state = 635
        this.sp()
        break
      case ECLParser.TAB:
        this.enterOuterAlt(localctx, 2)
        this.state = 636
        this.htab()
        break
      case ECLParser.CR:
        this.enterOuterAlt(localctx, 3)
        this.state = 637
        this.cr()
        break
      case ECLParser.LF:
        this.enterOuterAlt(localctx, 4)
        this.state = 638
        this.lf()
        break
      case ECLParser.EXCLAMATION:
      case ECLParser.QUOTE:
      case ECLParser.POUND:
      case ECLParser.DOLLAR:
      case ECLParser.PERCENT:
      case ECLParser.AMPERSAND:
      case ECLParser.APOSTROPHE:
      case ECLParser.LEFT_PAREN:
      case ECLParser.RIGHT_PAREN:
      case ECLParser.ASTERISK:
      case ECLParser.PLUS:
      case ECLParser.COMMA:
      case ECLParser.DASH:
      case ECLParser.PERIOD:
        this.enterOuterAlt(localctx, 5)
        this.state = 639
        _la = this._input.LA(1)
        if (
          !(
            (_la & ~0x1f) == 0 &&
            ((1 << _la) &
              ((1 << ECLParser.EXCLAMATION) |
                (1 << ECLParser.QUOTE) |
                (1 << ECLParser.POUND) |
                (1 << ECLParser.DOLLAR) |
                (1 << ECLParser.PERCENT) |
                (1 << ECLParser.AMPERSAND) |
                (1 << ECLParser.APOSTROPHE) |
                (1 << ECLParser.LEFT_PAREN) |
                (1 << ECLParser.RIGHT_PAREN) |
                (1 << ECLParser.ASTERISK) |
                (1 << ECLParser.PLUS) |
                (1 << ECLParser.COMMA) |
                (1 << ECLParser.DASH) |
                (1 << ECLParser.PERIOD))) !==
              0
          )
        ) {
          this._errHandler.recoverInline(this)
        } else {
          this._errHandler.reportMatch(this)
          this.consume()
        }
        break
      case ECLParser.ZERO:
      case ECLParser.ONE:
      case ECLParser.TWO:
      case ECLParser.THREE:
      case ECLParser.FOUR:
      case ECLParser.FIVE:
      case ECLParser.SIX:
      case ECLParser.SEVEN:
      case ECLParser.EIGHT:
      case ECLParser.NINE:
      case ECLParser.COLON:
      case ECLParser.SEMICOLON:
      case ECLParser.LESS_THAN:
      case ECLParser.EQUALS:
      case ECLParser.GREATER_THAN:
      case ECLParser.QUESTION:
      case ECLParser.AT:
      case ECLParser.CAP_A:
      case ECLParser.CAP_B:
      case ECLParser.CAP_C:
      case ECLParser.CAP_D:
      case ECLParser.CAP_E:
      case ECLParser.CAP_F:
      case ECLParser.CAP_G:
      case ECLParser.CAP_H:
      case ECLParser.CAP_I:
      case ECLParser.CAP_J:
      case ECLParser.CAP_K:
      case ECLParser.CAP_L:
      case ECLParser.CAP_M:
      case ECLParser.CAP_N:
      case ECLParser.CAP_O:
      case ECLParser.CAP_P:
      case ECLParser.CAP_Q:
      case ECLParser.CAP_R:
      case ECLParser.CAP_S:
      case ECLParser.CAP_T:
      case ECLParser.CAP_U:
      case ECLParser.CAP_V:
      case ECLParser.CAP_W:
      case ECLParser.CAP_X:
      case ECLParser.CAP_Y:
      case ECLParser.CAP_Z:
      case ECLParser.LEFT_BRACE:
      case ECLParser.BACKSLASH:
      case ECLParser.RIGHT_BRACE:
      case ECLParser.CARAT:
      case ECLParser.UNDERSCORE:
      case ECLParser.ACCENT:
      case ECLParser.A:
      case ECLParser.B:
      case ECLParser.C:
      case ECLParser.D:
      case ECLParser.E:
      case ECLParser.F:
      case ECLParser.G:
      case ECLParser.H:
      case ECLParser.I:
      case ECLParser.J:
      case ECLParser.K:
      case ECLParser.L:
      case ECLParser.M:
      case ECLParser.N:
      case ECLParser.O:
      case ECLParser.P:
      case ECLParser.Q:
      case ECLParser.R:
      case ECLParser.S:
      case ECLParser.T:
      case ECLParser.U:
      case ECLParser.V:
      case ECLParser.W:
      case ECLParser.X:
      case ECLParser.Y:
      case ECLParser.Z:
      case ECLParser.LEFT_CURLY_BRACE:
      case ECLParser.PIPE:
      case ECLParser.RIGHT_CURLY_BRACE:
      case ECLParser.TILDE:
        this.enterOuterAlt(localctx, 6)
        this.state = 640
        _la = this._input.LA(1)
        if (
          !(
            (((_la - 21) & ~0x1f) == 0 &&
              ((1 << (_la - 21)) &
                ((1 << (ECLParser.ZERO - 21)) |
                  (1 << (ECLParser.ONE - 21)) |
                  (1 << (ECLParser.TWO - 21)) |
                  (1 << (ECLParser.THREE - 21)) |
                  (1 << (ECLParser.FOUR - 21)) |
                  (1 << (ECLParser.FIVE - 21)) |
                  (1 << (ECLParser.SIX - 21)) |
                  (1 << (ECLParser.SEVEN - 21)) |
                  (1 << (ECLParser.EIGHT - 21)) |
                  (1 << (ECLParser.NINE - 21)) |
                  (1 << (ECLParser.COLON - 21)) |
                  (1 << (ECLParser.SEMICOLON - 21)) |
                  (1 << (ECLParser.LESS_THAN - 21)) |
                  (1 << (ECLParser.EQUALS - 21)) |
                  (1 << (ECLParser.GREATER_THAN - 21)) |
                  (1 << (ECLParser.QUESTION - 21)) |
                  (1 << (ECLParser.AT - 21)) |
                  (1 << (ECLParser.CAP_A - 21)) |
                  (1 << (ECLParser.CAP_B - 21)) |
                  (1 << (ECLParser.CAP_C - 21)) |
                  (1 << (ECLParser.CAP_D - 21)) |
                  (1 << (ECLParser.CAP_E - 21)) |
                  (1 << (ECLParser.CAP_F - 21)) |
                  (1 << (ECLParser.CAP_G - 21)) |
                  (1 << (ECLParser.CAP_H - 21)) |
                  (1 << (ECLParser.CAP_I - 21)) |
                  (1 << (ECLParser.CAP_J - 21)) |
                  (1 << (ECLParser.CAP_K - 21)) |
                  (1 << (ECLParser.CAP_L - 21)) |
                  (1 << (ECLParser.CAP_M - 21)) |
                  (1 << (ECLParser.CAP_N - 21)) |
                  (1 << (ECLParser.CAP_O - 21)))) !==
                0) ||
            (((_la - 53) & ~0x1f) == 0 &&
              ((1 << (_la - 53)) &
                ((1 << (ECLParser.CAP_P - 53)) |
                  (1 << (ECLParser.CAP_Q - 53)) |
                  (1 << (ECLParser.CAP_R - 53)) |
                  (1 << (ECLParser.CAP_S - 53)) |
                  (1 << (ECLParser.CAP_T - 53)) |
                  (1 << (ECLParser.CAP_U - 53)) |
                  (1 << (ECLParser.CAP_V - 53)) |
                  (1 << (ECLParser.CAP_W - 53)) |
                  (1 << (ECLParser.CAP_X - 53)) |
                  (1 << (ECLParser.CAP_Y - 53)) |
                  (1 << (ECLParser.CAP_Z - 53)) |
                  (1 << (ECLParser.LEFT_BRACE - 53)) |
                  (1 << (ECLParser.BACKSLASH - 53)) |
                  (1 << (ECLParser.RIGHT_BRACE - 53)) |
                  (1 << (ECLParser.CARAT - 53)) |
                  (1 << (ECLParser.UNDERSCORE - 53)) |
                  (1 << (ECLParser.ACCENT - 53)) |
                  (1 << (ECLParser.A - 53)) |
                  (1 << (ECLParser.B - 53)) |
                  (1 << (ECLParser.C - 53)) |
                  (1 << (ECLParser.D - 53)) |
                  (1 << (ECLParser.E - 53)) |
                  (1 << (ECLParser.F - 53)) |
                  (1 << (ECLParser.G - 53)) |
                  (1 << (ECLParser.H - 53)) |
                  (1 << (ECLParser.I - 53)) |
                  (1 << (ECLParser.J - 53)) |
                  (1 << (ECLParser.K - 53)) |
                  (1 << (ECLParser.L - 53)) |
                  (1 << (ECLParser.M - 53)) |
                  (1 << (ECLParser.N - 53)) |
                  (1 << (ECLParser.O - 53)))) !==
                0) ||
            (((_la - 85) & ~0x1f) == 0 &&
              ((1 << (_la - 85)) &
                ((1 << (ECLParser.P - 85)) |
                  (1 << (ECLParser.Q - 85)) |
                  (1 << (ECLParser.R - 85)) |
                  (1 << (ECLParser.S - 85)) |
                  (1 << (ECLParser.T - 85)) |
                  (1 << (ECLParser.U - 85)) |
                  (1 << (ECLParser.V - 85)) |
                  (1 << (ECLParser.W - 85)) |
                  (1 << (ECLParser.X - 85)) |
                  (1 << (ECLParser.Y - 85)) |
                  (1 << (ECLParser.Z - 85)) |
                  (1 << (ECLParser.LEFT_CURLY_BRACE - 85)) |
                  (1 << (ECLParser.PIPE - 85)) |
                  (1 << (ECLParser.RIGHT_CURLY_BRACE - 85)) |
                  (1 << (ECLParser.TILDE - 85)))) !==
                0)
          )
        ) {
          this._errHandler.recoverInline(this)
        } else {
          this._errHandler.reportMatch(this)
          this.consume()
        }
        break
      case ECLParser.UTF8_LETTER:
        this.enterOuterAlt(localctx, 7)
        this.state = 641
        this.match(ECLParser.UTF8_LETTER)
        break
      default:
        throw new antlr4.error.NoViableAltException(this)
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re
      this._errHandler.reportError(this, re)
      this._errHandler.recover(this, re)
    } else {
      throw re
    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function SpContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = ECLParser.RULE_sp
  return this
}

SpContext.prototype = Object.create(antlr4.ParserRuleContext.prototype)
SpContext.prototype.constructor = SpContext

SpContext.prototype.SPACE = function() {
  return this.getToken(ECLParser.SPACE, 0)
}

SpContext.prototype.enterRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.enterSp(this)
  }
}

SpContext.prototype.exitRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.exitSp(this)
  }
}

SpContext.prototype.accept = function(visitor) {
  if (visitor instanceof ECLVisitor) {
    return visitor.visitSp(this)
  } else {
    return visitor.visitChildren(this)
  }
}

ECLParser.SpContext = SpContext

ECLParser.prototype.sp = function() {
  var localctx = new SpContext(this, this._ctx, this.state)
  this.enterRule(localctx, 116, ECLParser.RULE_sp)
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 644
    this.match(ECLParser.SPACE)
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re
      this._errHandler.reportError(this, re)
      this._errHandler.recover(this, re)
    } else {
      throw re
    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function HtabContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = ECLParser.RULE_htab
  return this
}

HtabContext.prototype = Object.create(antlr4.ParserRuleContext.prototype)
HtabContext.prototype.constructor = HtabContext

HtabContext.prototype.TAB = function() {
  return this.getToken(ECLParser.TAB, 0)
}

HtabContext.prototype.enterRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.enterHtab(this)
  }
}

HtabContext.prototype.exitRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.exitHtab(this)
  }
}

HtabContext.prototype.accept = function(visitor) {
  if (visitor instanceof ECLVisitor) {
    return visitor.visitHtab(this)
  } else {
    return visitor.visitChildren(this)
  }
}

ECLParser.HtabContext = HtabContext

ECLParser.prototype.htab = function() {
  var localctx = new HtabContext(this, this._ctx, this.state)
  this.enterRule(localctx, 118, ECLParser.RULE_htab)
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 646
    this.match(ECLParser.TAB)
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re
      this._errHandler.reportError(this, re)
      this._errHandler.recover(this, re)
    } else {
      throw re
    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function CrContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = ECLParser.RULE_cr
  return this
}

CrContext.prototype = Object.create(antlr4.ParserRuleContext.prototype)
CrContext.prototype.constructor = CrContext

CrContext.prototype.CR = function() {
  return this.getToken(ECLParser.CR, 0)
}

CrContext.prototype.enterRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.enterCr(this)
  }
}

CrContext.prototype.exitRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.exitCr(this)
  }
}

CrContext.prototype.accept = function(visitor) {
  if (visitor instanceof ECLVisitor) {
    return visitor.visitCr(this)
  } else {
    return visitor.visitChildren(this)
  }
}

ECLParser.CrContext = CrContext

ECLParser.prototype.cr = function() {
  var localctx = new CrContext(this, this._ctx, this.state)
  this.enterRule(localctx, 120, ECLParser.RULE_cr)
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 648
    this.match(ECLParser.CR)
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re
      this._errHandler.reportError(this, re)
      this._errHandler.recover(this, re)
    } else {
      throw re
    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function LfContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = ECLParser.RULE_lf
  return this
}

LfContext.prototype = Object.create(antlr4.ParserRuleContext.prototype)
LfContext.prototype.constructor = LfContext

LfContext.prototype.LF = function() {
  return this.getToken(ECLParser.LF, 0)
}

LfContext.prototype.enterRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.enterLf(this)
  }
}

LfContext.prototype.exitRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.exitLf(this)
  }
}

LfContext.prototype.accept = function(visitor) {
  if (visitor instanceof ECLVisitor) {
    return visitor.visitLf(this)
  } else {
    return visitor.visitChildren(this)
  }
}

ECLParser.LfContext = LfContext

ECLParser.prototype.lf = function() {
  var localctx = new LfContext(this, this._ctx, this.state)
  this.enterRule(localctx, 122, ECLParser.RULE_lf)
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 650
    this.match(ECLParser.LF)
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re
      this._errHandler.reportError(this, re)
      this._errHandler.recover(this, re)
    } else {
      throw re
    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function QmContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = ECLParser.RULE_qm
  return this
}

QmContext.prototype = Object.create(antlr4.ParserRuleContext.prototype)
QmContext.prototype.constructor = QmContext

QmContext.prototype.QUOTE = function() {
  return this.getToken(ECLParser.QUOTE, 0)
}

QmContext.prototype.enterRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.enterQm(this)
  }
}

QmContext.prototype.exitRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.exitQm(this)
  }
}

QmContext.prototype.accept = function(visitor) {
  if (visitor instanceof ECLVisitor) {
    return visitor.visitQm(this)
  } else {
    return visitor.visitChildren(this)
  }
}

ECLParser.QmContext = QmContext

ECLParser.prototype.qm = function() {
  var localctx = new QmContext(this, this._ctx, this.state)
  this.enterRule(localctx, 124, ECLParser.RULE_qm)
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 652
    this.match(ECLParser.QUOTE)
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re
      this._errHandler.reportError(this, re)
      this._errHandler.recover(this, re)
    } else {
      throw re
    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function BsContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = ECLParser.RULE_bs
  return this
}

BsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype)
BsContext.prototype.constructor = BsContext

BsContext.prototype.BACKSLASH = function() {
  return this.getToken(ECLParser.BACKSLASH, 0)
}

BsContext.prototype.enterRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.enterBs(this)
  }
}

BsContext.prototype.exitRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.exitBs(this)
  }
}

BsContext.prototype.accept = function(visitor) {
  if (visitor instanceof ECLVisitor) {
    return visitor.visitBs(this)
  } else {
    return visitor.visitChildren(this)
  }
}

ECLParser.BsContext = BsContext

ECLParser.prototype.bs = function() {
  var localctx = new BsContext(this, this._ctx, this.state)
  this.enterRule(localctx, 126, ECLParser.RULE_bs)
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 654
    this.match(ECLParser.BACKSLASH)
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re
      this._errHandler.reportError(this, re)
      this._errHandler.recover(this, re)
    } else {
      throw re
    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function DigitContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = ECLParser.RULE_digit
  return this
}

DigitContext.prototype = Object.create(antlr4.ParserRuleContext.prototype)
DigitContext.prototype.constructor = DigitContext

DigitContext.prototype.ZERO = function() {
  return this.getToken(ECLParser.ZERO, 0)
}

DigitContext.prototype.ONE = function() {
  return this.getToken(ECLParser.ONE, 0)
}

DigitContext.prototype.TWO = function() {
  return this.getToken(ECLParser.TWO, 0)
}

DigitContext.prototype.THREE = function() {
  return this.getToken(ECLParser.THREE, 0)
}

DigitContext.prototype.FOUR = function() {
  return this.getToken(ECLParser.FOUR, 0)
}

DigitContext.prototype.FIVE = function() {
  return this.getToken(ECLParser.FIVE, 0)
}

DigitContext.prototype.SIX = function() {
  return this.getToken(ECLParser.SIX, 0)
}

DigitContext.prototype.SEVEN = function() {
  return this.getToken(ECLParser.SEVEN, 0)
}

DigitContext.prototype.EIGHT = function() {
  return this.getToken(ECLParser.EIGHT, 0)
}

DigitContext.prototype.NINE = function() {
  return this.getToken(ECLParser.NINE, 0)
}

DigitContext.prototype.enterRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.enterDigit(this)
  }
}

DigitContext.prototype.exitRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.exitDigit(this)
  }
}

DigitContext.prototype.accept = function(visitor) {
  if (visitor instanceof ECLVisitor) {
    return visitor.visitDigit(this)
  } else {
    return visitor.visitChildren(this)
  }
}

ECLParser.DigitContext = DigitContext

ECLParser.prototype.digit = function() {
  var localctx = new DigitContext(this, this._ctx, this.state)
  this.enterRule(localctx, 128, ECLParser.RULE_digit)
  var _la = 0 // Token type
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 656
    _la = this._input.LA(1)
    if (
      !(
        (_la & ~0x1f) == 0 &&
        ((1 << _la) &
          ((1 << ECLParser.ZERO) |
            (1 << ECLParser.ONE) |
            (1 << ECLParser.TWO) |
            (1 << ECLParser.THREE) |
            (1 << ECLParser.FOUR) |
            (1 << ECLParser.FIVE) |
            (1 << ECLParser.SIX) |
            (1 << ECLParser.SEVEN) |
            (1 << ECLParser.EIGHT) |
            (1 << ECLParser.NINE))) !==
          0
      )
    ) {
      this._errHandler.recoverInline(this)
    } else {
      this._errHandler.reportMatch(this)
      this.consume()
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re
      this._errHandler.reportError(this, re)
      this._errHandler.recover(this, re)
    } else {
      throw re
    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function ZeroContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = ECLParser.RULE_zero
  return this
}

ZeroContext.prototype = Object.create(antlr4.ParserRuleContext.prototype)
ZeroContext.prototype.constructor = ZeroContext

ZeroContext.prototype.ZERO = function() {
  return this.getToken(ECLParser.ZERO, 0)
}

ZeroContext.prototype.enterRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.enterZero(this)
  }
}

ZeroContext.prototype.exitRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.exitZero(this)
  }
}

ZeroContext.prototype.accept = function(visitor) {
  if (visitor instanceof ECLVisitor) {
    return visitor.visitZero(this)
  } else {
    return visitor.visitChildren(this)
  }
}

ECLParser.ZeroContext = ZeroContext

ECLParser.prototype.zero = function() {
  var localctx = new ZeroContext(this, this._ctx, this.state)
  this.enterRule(localctx, 130, ECLParser.RULE_zero)
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 658
    this.match(ECLParser.ZERO)
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re
      this._errHandler.reportError(this, re)
      this._errHandler.recover(this, re)
    } else {
      throw re
    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function DigitnonzeroContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = ECLParser.RULE_digitnonzero
  return this
}

DigitnonzeroContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
)
DigitnonzeroContext.prototype.constructor = DigitnonzeroContext

DigitnonzeroContext.prototype.ONE = function() {
  return this.getToken(ECLParser.ONE, 0)
}

DigitnonzeroContext.prototype.TWO = function() {
  return this.getToken(ECLParser.TWO, 0)
}

DigitnonzeroContext.prototype.THREE = function() {
  return this.getToken(ECLParser.THREE, 0)
}

DigitnonzeroContext.prototype.FOUR = function() {
  return this.getToken(ECLParser.FOUR, 0)
}

DigitnonzeroContext.prototype.FIVE = function() {
  return this.getToken(ECLParser.FIVE, 0)
}

DigitnonzeroContext.prototype.SIX = function() {
  return this.getToken(ECLParser.SIX, 0)
}

DigitnonzeroContext.prototype.SEVEN = function() {
  return this.getToken(ECLParser.SEVEN, 0)
}

DigitnonzeroContext.prototype.EIGHT = function() {
  return this.getToken(ECLParser.EIGHT, 0)
}

DigitnonzeroContext.prototype.NINE = function() {
  return this.getToken(ECLParser.NINE, 0)
}

DigitnonzeroContext.prototype.enterRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.enterDigitnonzero(this)
  }
}

DigitnonzeroContext.prototype.exitRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.exitDigitnonzero(this)
  }
}

DigitnonzeroContext.prototype.accept = function(visitor) {
  if (visitor instanceof ECLVisitor) {
    return visitor.visitDigitnonzero(this)
  } else {
    return visitor.visitChildren(this)
  }
}

ECLParser.DigitnonzeroContext = DigitnonzeroContext

ECLParser.prototype.digitnonzero = function() {
  var localctx = new DigitnonzeroContext(this, this._ctx, this.state)
  this.enterRule(localctx, 132, ECLParser.RULE_digitnonzero)
  var _la = 0 // Token type
  try {
    this.enterOuterAlt(localctx, 1)
    this.state = 660
    _la = this._input.LA(1)
    if (
      !(
        (_la & ~0x1f) == 0 &&
        ((1 << _la) &
          ((1 << ECLParser.ONE) |
            (1 << ECLParser.TWO) |
            (1 << ECLParser.THREE) |
            (1 << ECLParser.FOUR) |
            (1 << ECLParser.FIVE) |
            (1 << ECLParser.SIX) |
            (1 << ECLParser.SEVEN) |
            (1 << ECLParser.EIGHT) |
            (1 << ECLParser.NINE))) !==
          0
      )
    ) {
      this._errHandler.recoverInline(this)
    } else {
      this._errHandler.reportMatch(this)
      this.consume()
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re
      this._errHandler.reportError(this, re)
      this._errHandler.recover(this, re)
    } else {
      throw re
    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function NonwsnonpipeContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = ECLParser.RULE_nonwsnonpipe
  return this
}

NonwsnonpipeContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
)
NonwsnonpipeContext.prototype.constructor = NonwsnonpipeContext

NonwsnonpipeContext.prototype.EXCLAMATION = function() {
  return this.getToken(ECLParser.EXCLAMATION, 0)
}

NonwsnonpipeContext.prototype.QUOTE = function() {
  return this.getToken(ECLParser.QUOTE, 0)
}

NonwsnonpipeContext.prototype.POUND = function() {
  return this.getToken(ECLParser.POUND, 0)
}

NonwsnonpipeContext.prototype.DOLLAR = function() {
  return this.getToken(ECLParser.DOLLAR, 0)
}

NonwsnonpipeContext.prototype.PERCENT = function() {
  return this.getToken(ECLParser.PERCENT, 0)
}

NonwsnonpipeContext.prototype.AMPERSAND = function() {
  return this.getToken(ECLParser.AMPERSAND, 0)
}

NonwsnonpipeContext.prototype.APOSTROPHE = function() {
  return this.getToken(ECLParser.APOSTROPHE, 0)
}

NonwsnonpipeContext.prototype.LEFT_PAREN = function() {
  return this.getToken(ECLParser.LEFT_PAREN, 0)
}

NonwsnonpipeContext.prototype.RIGHT_PAREN = function() {
  return this.getToken(ECLParser.RIGHT_PAREN, 0)
}

NonwsnonpipeContext.prototype.ASTERISK = function() {
  return this.getToken(ECLParser.ASTERISK, 0)
}

NonwsnonpipeContext.prototype.PLUS = function() {
  return this.getToken(ECLParser.PLUS, 0)
}

NonwsnonpipeContext.prototype.COMMA = function() {
  return this.getToken(ECLParser.COMMA, 0)
}

NonwsnonpipeContext.prototype.DASH = function() {
  return this.getToken(ECLParser.DASH, 0)
}

NonwsnonpipeContext.prototype.PERIOD = function() {
  return this.getToken(ECLParser.PERIOD, 0)
}

NonwsnonpipeContext.prototype.SLASH = function() {
  return this.getToken(ECLParser.SLASH, 0)
}

NonwsnonpipeContext.prototype.ZERO = function() {
  return this.getToken(ECLParser.ZERO, 0)
}

NonwsnonpipeContext.prototype.ONE = function() {
  return this.getToken(ECLParser.ONE, 0)
}

NonwsnonpipeContext.prototype.TWO = function() {
  return this.getToken(ECLParser.TWO, 0)
}

NonwsnonpipeContext.prototype.THREE = function() {
  return this.getToken(ECLParser.THREE, 0)
}

NonwsnonpipeContext.prototype.FOUR = function() {
  return this.getToken(ECLParser.FOUR, 0)
}

NonwsnonpipeContext.prototype.FIVE = function() {
  return this.getToken(ECLParser.FIVE, 0)
}

NonwsnonpipeContext.prototype.SIX = function() {
  return this.getToken(ECLParser.SIX, 0)
}

NonwsnonpipeContext.prototype.SEVEN = function() {
  return this.getToken(ECLParser.SEVEN, 0)
}

NonwsnonpipeContext.prototype.EIGHT = function() {
  return this.getToken(ECLParser.EIGHT, 0)
}

NonwsnonpipeContext.prototype.NINE = function() {
  return this.getToken(ECLParser.NINE, 0)
}

NonwsnonpipeContext.prototype.COLON = function() {
  return this.getToken(ECLParser.COLON, 0)
}

NonwsnonpipeContext.prototype.SEMICOLON = function() {
  return this.getToken(ECLParser.SEMICOLON, 0)
}

NonwsnonpipeContext.prototype.LESS_THAN = function() {
  return this.getToken(ECLParser.LESS_THAN, 0)
}

NonwsnonpipeContext.prototype.EQUALS = function() {
  return this.getToken(ECLParser.EQUALS, 0)
}

NonwsnonpipeContext.prototype.GREATER_THAN = function() {
  return this.getToken(ECLParser.GREATER_THAN, 0)
}

NonwsnonpipeContext.prototype.QUESTION = function() {
  return this.getToken(ECLParser.QUESTION, 0)
}

NonwsnonpipeContext.prototype.AT = function() {
  return this.getToken(ECLParser.AT, 0)
}

NonwsnonpipeContext.prototype.CAP_A = function() {
  return this.getToken(ECLParser.CAP_A, 0)
}

NonwsnonpipeContext.prototype.CAP_B = function() {
  return this.getToken(ECLParser.CAP_B, 0)
}

NonwsnonpipeContext.prototype.CAP_C = function() {
  return this.getToken(ECLParser.CAP_C, 0)
}

NonwsnonpipeContext.prototype.CAP_D = function() {
  return this.getToken(ECLParser.CAP_D, 0)
}

NonwsnonpipeContext.prototype.CAP_E = function() {
  return this.getToken(ECLParser.CAP_E, 0)
}

NonwsnonpipeContext.prototype.CAP_F = function() {
  return this.getToken(ECLParser.CAP_F, 0)
}

NonwsnonpipeContext.prototype.CAP_G = function() {
  return this.getToken(ECLParser.CAP_G, 0)
}

NonwsnonpipeContext.prototype.CAP_H = function() {
  return this.getToken(ECLParser.CAP_H, 0)
}

NonwsnonpipeContext.prototype.CAP_I = function() {
  return this.getToken(ECLParser.CAP_I, 0)
}

NonwsnonpipeContext.prototype.CAP_J = function() {
  return this.getToken(ECLParser.CAP_J, 0)
}

NonwsnonpipeContext.prototype.CAP_K = function() {
  return this.getToken(ECLParser.CAP_K, 0)
}

NonwsnonpipeContext.prototype.CAP_L = function() {
  return this.getToken(ECLParser.CAP_L, 0)
}

NonwsnonpipeContext.prototype.CAP_M = function() {
  return this.getToken(ECLParser.CAP_M, 0)
}

NonwsnonpipeContext.prototype.CAP_N = function() {
  return this.getToken(ECLParser.CAP_N, 0)
}

NonwsnonpipeContext.prototype.CAP_O = function() {
  return this.getToken(ECLParser.CAP_O, 0)
}

NonwsnonpipeContext.prototype.CAP_P = function() {
  return this.getToken(ECLParser.CAP_P, 0)
}

NonwsnonpipeContext.prototype.CAP_Q = function() {
  return this.getToken(ECLParser.CAP_Q, 0)
}

NonwsnonpipeContext.prototype.CAP_R = function() {
  return this.getToken(ECLParser.CAP_R, 0)
}

NonwsnonpipeContext.prototype.CAP_S = function() {
  return this.getToken(ECLParser.CAP_S, 0)
}

NonwsnonpipeContext.prototype.CAP_T = function() {
  return this.getToken(ECLParser.CAP_T, 0)
}

NonwsnonpipeContext.prototype.CAP_U = function() {
  return this.getToken(ECLParser.CAP_U, 0)
}

NonwsnonpipeContext.prototype.CAP_V = function() {
  return this.getToken(ECLParser.CAP_V, 0)
}

NonwsnonpipeContext.prototype.CAP_W = function() {
  return this.getToken(ECLParser.CAP_W, 0)
}

NonwsnonpipeContext.prototype.CAP_X = function() {
  return this.getToken(ECLParser.CAP_X, 0)
}

NonwsnonpipeContext.prototype.CAP_Y = function() {
  return this.getToken(ECLParser.CAP_Y, 0)
}

NonwsnonpipeContext.prototype.CAP_Z = function() {
  return this.getToken(ECLParser.CAP_Z, 0)
}

NonwsnonpipeContext.prototype.LEFT_BRACE = function() {
  return this.getToken(ECLParser.LEFT_BRACE, 0)
}

NonwsnonpipeContext.prototype.BACKSLASH = function() {
  return this.getToken(ECLParser.BACKSLASH, 0)
}

NonwsnonpipeContext.prototype.RIGHT_BRACE = function() {
  return this.getToken(ECLParser.RIGHT_BRACE, 0)
}

NonwsnonpipeContext.prototype.CARAT = function() {
  return this.getToken(ECLParser.CARAT, 0)
}

NonwsnonpipeContext.prototype.UNDERSCORE = function() {
  return this.getToken(ECLParser.UNDERSCORE, 0)
}

NonwsnonpipeContext.prototype.ACCENT = function() {
  return this.getToken(ECLParser.ACCENT, 0)
}

NonwsnonpipeContext.prototype.A = function() {
  return this.getToken(ECLParser.A, 0)
}

NonwsnonpipeContext.prototype.B = function() {
  return this.getToken(ECLParser.B, 0)
}

NonwsnonpipeContext.prototype.C = function() {
  return this.getToken(ECLParser.C, 0)
}

NonwsnonpipeContext.prototype.D = function() {
  return this.getToken(ECLParser.D, 0)
}

NonwsnonpipeContext.prototype.E = function() {
  return this.getToken(ECLParser.E, 0)
}

NonwsnonpipeContext.prototype.F = function() {
  return this.getToken(ECLParser.F, 0)
}

NonwsnonpipeContext.prototype.G = function() {
  return this.getToken(ECLParser.G, 0)
}

NonwsnonpipeContext.prototype.H = function() {
  return this.getToken(ECLParser.H, 0)
}

NonwsnonpipeContext.prototype.I = function() {
  return this.getToken(ECLParser.I, 0)
}

NonwsnonpipeContext.prototype.J = function() {
  return this.getToken(ECLParser.J, 0)
}

NonwsnonpipeContext.prototype.K = function() {
  return this.getToken(ECLParser.K, 0)
}

NonwsnonpipeContext.prototype.L = function() {
  return this.getToken(ECLParser.L, 0)
}

NonwsnonpipeContext.prototype.M = function() {
  return this.getToken(ECLParser.M, 0)
}

NonwsnonpipeContext.prototype.N = function() {
  return this.getToken(ECLParser.N, 0)
}

NonwsnonpipeContext.prototype.O = function() {
  return this.getToken(ECLParser.O, 0)
}

NonwsnonpipeContext.prototype.P = function() {
  return this.getToken(ECLParser.P, 0)
}

NonwsnonpipeContext.prototype.Q = function() {
  return this.getToken(ECLParser.Q, 0)
}

NonwsnonpipeContext.prototype.R = function() {
  return this.getToken(ECLParser.R, 0)
}

NonwsnonpipeContext.prototype.S = function() {
  return this.getToken(ECLParser.S, 0)
}

NonwsnonpipeContext.prototype.T = function() {
  return this.getToken(ECLParser.T, 0)
}

NonwsnonpipeContext.prototype.U = function() {
  return this.getToken(ECLParser.U, 0)
}

NonwsnonpipeContext.prototype.V = function() {
  return this.getToken(ECLParser.V, 0)
}

NonwsnonpipeContext.prototype.W = function() {
  return this.getToken(ECLParser.W, 0)
}

NonwsnonpipeContext.prototype.X = function() {
  return this.getToken(ECLParser.X, 0)
}

NonwsnonpipeContext.prototype.Y = function() {
  return this.getToken(ECLParser.Y, 0)
}

NonwsnonpipeContext.prototype.Z = function() {
  return this.getToken(ECLParser.Z, 0)
}

NonwsnonpipeContext.prototype.LEFT_CURLY_BRACE = function() {
  return this.getToken(ECLParser.LEFT_CURLY_BRACE, 0)
}

NonwsnonpipeContext.prototype.RIGHT_CURLY_BRACE = function() {
  return this.getToken(ECLParser.RIGHT_CURLY_BRACE, 0)
}

NonwsnonpipeContext.prototype.TILDE = function() {
  return this.getToken(ECLParser.TILDE, 0)
}

NonwsnonpipeContext.prototype.UTF8_LETTER = function() {
  return this.getToken(ECLParser.UTF8_LETTER, 0)
}

NonwsnonpipeContext.prototype.enterRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.enterNonwsnonpipe(this)
  }
}

NonwsnonpipeContext.prototype.exitRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.exitNonwsnonpipe(this)
  }
}

NonwsnonpipeContext.prototype.accept = function(visitor) {
  if (visitor instanceof ECLVisitor) {
    return visitor.visitNonwsnonpipe(this)
  } else {
    return visitor.visitChildren(this)
  }
}

ECLParser.NonwsnonpipeContext = NonwsnonpipeContext

ECLParser.prototype.nonwsnonpipe = function() {
  var localctx = new NonwsnonpipeContext(this, this._ctx, this.state)
  this.enterRule(localctx, 134, ECLParser.RULE_nonwsnonpipe)
  var _la = 0 // Token type
  try {
    this.state = 665
    this._errHandler.sync(this)
    switch (this._input.LA(1)) {
      case ECLParser.EXCLAMATION:
      case ECLParser.QUOTE:
      case ECLParser.POUND:
      case ECLParser.DOLLAR:
      case ECLParser.PERCENT:
      case ECLParser.AMPERSAND:
      case ECLParser.APOSTROPHE:
      case ECLParser.LEFT_PAREN:
      case ECLParser.RIGHT_PAREN:
      case ECLParser.ASTERISK:
      case ECLParser.PLUS:
      case ECLParser.COMMA:
      case ECLParser.DASH:
      case ECLParser.PERIOD:
      case ECLParser.SLASH:
      case ECLParser.ZERO:
      case ECLParser.ONE:
      case ECLParser.TWO:
      case ECLParser.THREE:
      case ECLParser.FOUR:
      case ECLParser.FIVE:
      case ECLParser.SIX:
      case ECLParser.SEVEN:
      case ECLParser.EIGHT:
      case ECLParser.NINE:
      case ECLParser.COLON:
      case ECLParser.SEMICOLON:
      case ECLParser.LESS_THAN:
      case ECLParser.EQUALS:
      case ECLParser.GREATER_THAN:
      case ECLParser.QUESTION:
      case ECLParser.AT:
      case ECLParser.CAP_A:
      case ECLParser.CAP_B:
      case ECLParser.CAP_C:
      case ECLParser.CAP_D:
      case ECLParser.CAP_E:
      case ECLParser.CAP_F:
      case ECLParser.CAP_G:
      case ECLParser.CAP_H:
      case ECLParser.CAP_I:
      case ECLParser.CAP_J:
      case ECLParser.CAP_K:
      case ECLParser.CAP_L:
      case ECLParser.CAP_M:
      case ECLParser.CAP_N:
      case ECLParser.CAP_O:
      case ECLParser.CAP_P:
      case ECLParser.CAP_Q:
      case ECLParser.CAP_R:
      case ECLParser.CAP_S:
      case ECLParser.CAP_T:
      case ECLParser.CAP_U:
      case ECLParser.CAP_V:
      case ECLParser.CAP_W:
      case ECLParser.CAP_X:
      case ECLParser.CAP_Y:
      case ECLParser.CAP_Z:
      case ECLParser.LEFT_BRACE:
      case ECLParser.BACKSLASH:
      case ECLParser.RIGHT_BRACE:
      case ECLParser.CARAT:
      case ECLParser.UNDERSCORE:
      case ECLParser.ACCENT:
      case ECLParser.A:
      case ECLParser.B:
      case ECLParser.C:
      case ECLParser.D:
      case ECLParser.E:
      case ECLParser.F:
      case ECLParser.G:
      case ECLParser.H:
      case ECLParser.I:
      case ECLParser.J:
      case ECLParser.K:
      case ECLParser.L:
      case ECLParser.M:
      case ECLParser.N:
      case ECLParser.O:
      case ECLParser.P:
      case ECLParser.Q:
      case ECLParser.R:
      case ECLParser.S:
      case ECLParser.T:
      case ECLParser.U:
      case ECLParser.V:
      case ECLParser.W:
      case ECLParser.X:
      case ECLParser.Y:
      case ECLParser.Z:
      case ECLParser.LEFT_CURLY_BRACE:
        this.enterOuterAlt(localctx, 1)
        this.state = 662
        _la = this._input.LA(1)
        if (
          !(
            (((_la - 6) & ~0x1f) == 0 &&
              ((1 << (_la - 6)) &
                ((1 << (ECLParser.EXCLAMATION - 6)) |
                  (1 << (ECLParser.QUOTE - 6)) |
                  (1 << (ECLParser.POUND - 6)) |
                  (1 << (ECLParser.DOLLAR - 6)) |
                  (1 << (ECLParser.PERCENT - 6)) |
                  (1 << (ECLParser.AMPERSAND - 6)) |
                  (1 << (ECLParser.APOSTROPHE - 6)) |
                  (1 << (ECLParser.LEFT_PAREN - 6)) |
                  (1 << (ECLParser.RIGHT_PAREN - 6)) |
                  (1 << (ECLParser.ASTERISK - 6)) |
                  (1 << (ECLParser.PLUS - 6)) |
                  (1 << (ECLParser.COMMA - 6)) |
                  (1 << (ECLParser.DASH - 6)) |
                  (1 << (ECLParser.PERIOD - 6)) |
                  (1 << (ECLParser.SLASH - 6)) |
                  (1 << (ECLParser.ZERO - 6)) |
                  (1 << (ECLParser.ONE - 6)) |
                  (1 << (ECLParser.TWO - 6)) |
                  (1 << (ECLParser.THREE - 6)) |
                  (1 << (ECLParser.FOUR - 6)) |
                  (1 << (ECLParser.FIVE - 6)) |
                  (1 << (ECLParser.SIX - 6)) |
                  (1 << (ECLParser.SEVEN - 6)) |
                  (1 << (ECLParser.EIGHT - 6)) |
                  (1 << (ECLParser.NINE - 6)) |
                  (1 << (ECLParser.COLON - 6)) |
                  (1 << (ECLParser.SEMICOLON - 6)) |
                  (1 << (ECLParser.LESS_THAN - 6)) |
                  (1 << (ECLParser.EQUALS - 6)) |
                  (1 << (ECLParser.GREATER_THAN - 6)) |
                  (1 << (ECLParser.QUESTION - 6)) |
                  (1 << (ECLParser.AT - 6)))) !==
                0) ||
            (((_la - 38) & ~0x1f) == 0 &&
              ((1 << (_la - 38)) &
                ((1 << (ECLParser.CAP_A - 38)) |
                  (1 << (ECLParser.CAP_B - 38)) |
                  (1 << (ECLParser.CAP_C - 38)) |
                  (1 << (ECLParser.CAP_D - 38)) |
                  (1 << (ECLParser.CAP_E - 38)) |
                  (1 << (ECLParser.CAP_F - 38)) |
                  (1 << (ECLParser.CAP_G - 38)) |
                  (1 << (ECLParser.CAP_H - 38)) |
                  (1 << (ECLParser.CAP_I - 38)) |
                  (1 << (ECLParser.CAP_J - 38)) |
                  (1 << (ECLParser.CAP_K - 38)) |
                  (1 << (ECLParser.CAP_L - 38)) |
                  (1 << (ECLParser.CAP_M - 38)) |
                  (1 << (ECLParser.CAP_N - 38)) |
                  (1 << (ECLParser.CAP_O - 38)) |
                  (1 << (ECLParser.CAP_P - 38)) |
                  (1 << (ECLParser.CAP_Q - 38)) |
                  (1 << (ECLParser.CAP_R - 38)) |
                  (1 << (ECLParser.CAP_S - 38)) |
                  (1 << (ECLParser.CAP_T - 38)) |
                  (1 << (ECLParser.CAP_U - 38)) |
                  (1 << (ECLParser.CAP_V - 38)) |
                  (1 << (ECLParser.CAP_W - 38)) |
                  (1 << (ECLParser.CAP_X - 38)) |
                  (1 << (ECLParser.CAP_Y - 38)) |
                  (1 << (ECLParser.CAP_Z - 38)) |
                  (1 << (ECLParser.LEFT_BRACE - 38)) |
                  (1 << (ECLParser.BACKSLASH - 38)) |
                  (1 << (ECLParser.RIGHT_BRACE - 38)) |
                  (1 << (ECLParser.CARAT - 38)) |
                  (1 << (ECLParser.UNDERSCORE - 38)) |
                  (1 << (ECLParser.ACCENT - 38)))) !==
                0) ||
            (((_la - 70) & ~0x1f) == 0 &&
              ((1 << (_la - 70)) &
                ((1 << (ECLParser.A - 70)) |
                  (1 << (ECLParser.B - 70)) |
                  (1 << (ECLParser.C - 70)) |
                  (1 << (ECLParser.D - 70)) |
                  (1 << (ECLParser.E - 70)) |
                  (1 << (ECLParser.F - 70)) |
                  (1 << (ECLParser.G - 70)) |
                  (1 << (ECLParser.H - 70)) |
                  (1 << (ECLParser.I - 70)) |
                  (1 << (ECLParser.J - 70)) |
                  (1 << (ECLParser.K - 70)) |
                  (1 << (ECLParser.L - 70)) |
                  (1 << (ECLParser.M - 70)) |
                  (1 << (ECLParser.N - 70)) |
                  (1 << (ECLParser.O - 70)) |
                  (1 << (ECLParser.P - 70)) |
                  (1 << (ECLParser.Q - 70)) |
                  (1 << (ECLParser.R - 70)) |
                  (1 << (ECLParser.S - 70)) |
                  (1 << (ECLParser.T - 70)) |
                  (1 << (ECLParser.U - 70)) |
                  (1 << (ECLParser.V - 70)) |
                  (1 << (ECLParser.W - 70)) |
                  (1 << (ECLParser.X - 70)) |
                  (1 << (ECLParser.Y - 70)) |
                  (1 << (ECLParser.Z - 70)) |
                  (1 << (ECLParser.LEFT_CURLY_BRACE - 70)))) !==
                0)
          )
        ) {
          this._errHandler.recoverInline(this)
        } else {
          this._errHandler.reportMatch(this)
          this.consume()
        }
        break
      case ECLParser.RIGHT_CURLY_BRACE:
      case ECLParser.TILDE:
        this.enterOuterAlt(localctx, 2)
        this.state = 663
        _la = this._input.LA(1)
        if (!(_la === ECLParser.RIGHT_CURLY_BRACE || _la === ECLParser.TILDE)) {
          this._errHandler.recoverInline(this)
        } else {
          this._errHandler.reportMatch(this)
          this.consume()
        }
        break
      case ECLParser.UTF8_LETTER:
        this.enterOuterAlt(localctx, 3)
        this.state = 664
        this.match(ECLParser.UTF8_LETTER)
        break
      default:
        throw new antlr4.error.NoViableAltException(this)
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re
      this._errHandler.reportError(this, re)
      this._errHandler.recover(this, re)
    } else {
      throw re
    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function AnynonescapedcharContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = ECLParser.RULE_anynonescapedchar
  return this
}

AnynonescapedcharContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
)
AnynonescapedcharContext.prototype.constructor = AnynonescapedcharContext

AnynonescapedcharContext.prototype.sp = function() {
  return this.getTypedRuleContext(SpContext, 0)
}

AnynonescapedcharContext.prototype.htab = function() {
  return this.getTypedRuleContext(HtabContext, 0)
}

AnynonescapedcharContext.prototype.cr = function() {
  return this.getTypedRuleContext(CrContext, 0)
}

AnynonescapedcharContext.prototype.lf = function() {
  return this.getTypedRuleContext(LfContext, 0)
}

AnynonescapedcharContext.prototype.SPACE = function() {
  return this.getToken(ECLParser.SPACE, 0)
}

AnynonescapedcharContext.prototype.EXCLAMATION = function() {
  return this.getToken(ECLParser.EXCLAMATION, 0)
}

AnynonescapedcharContext.prototype.POUND = function() {
  return this.getToken(ECLParser.POUND, 0)
}

AnynonescapedcharContext.prototype.DOLLAR = function() {
  return this.getToken(ECLParser.DOLLAR, 0)
}

AnynonescapedcharContext.prototype.PERCENT = function() {
  return this.getToken(ECLParser.PERCENT, 0)
}

AnynonescapedcharContext.prototype.AMPERSAND = function() {
  return this.getToken(ECLParser.AMPERSAND, 0)
}

AnynonescapedcharContext.prototype.APOSTROPHE = function() {
  return this.getToken(ECLParser.APOSTROPHE, 0)
}

AnynonescapedcharContext.prototype.LEFT_PAREN = function() {
  return this.getToken(ECLParser.LEFT_PAREN, 0)
}

AnynonescapedcharContext.prototype.RIGHT_PAREN = function() {
  return this.getToken(ECLParser.RIGHT_PAREN, 0)
}

AnynonescapedcharContext.prototype.ASTERISK = function() {
  return this.getToken(ECLParser.ASTERISK, 0)
}

AnynonescapedcharContext.prototype.PLUS = function() {
  return this.getToken(ECLParser.PLUS, 0)
}

AnynonescapedcharContext.prototype.COMMA = function() {
  return this.getToken(ECLParser.COMMA, 0)
}

AnynonescapedcharContext.prototype.DASH = function() {
  return this.getToken(ECLParser.DASH, 0)
}

AnynonescapedcharContext.prototype.PERIOD = function() {
  return this.getToken(ECLParser.PERIOD, 0)
}

AnynonescapedcharContext.prototype.SLASH = function() {
  return this.getToken(ECLParser.SLASH, 0)
}

AnynonescapedcharContext.prototype.ZERO = function() {
  return this.getToken(ECLParser.ZERO, 0)
}

AnynonescapedcharContext.prototype.ONE = function() {
  return this.getToken(ECLParser.ONE, 0)
}

AnynonescapedcharContext.prototype.TWO = function() {
  return this.getToken(ECLParser.TWO, 0)
}

AnynonescapedcharContext.prototype.THREE = function() {
  return this.getToken(ECLParser.THREE, 0)
}

AnynonescapedcharContext.prototype.FOUR = function() {
  return this.getToken(ECLParser.FOUR, 0)
}

AnynonescapedcharContext.prototype.FIVE = function() {
  return this.getToken(ECLParser.FIVE, 0)
}

AnynonescapedcharContext.prototype.SIX = function() {
  return this.getToken(ECLParser.SIX, 0)
}

AnynonescapedcharContext.prototype.SEVEN = function() {
  return this.getToken(ECLParser.SEVEN, 0)
}

AnynonescapedcharContext.prototype.EIGHT = function() {
  return this.getToken(ECLParser.EIGHT, 0)
}

AnynonescapedcharContext.prototype.NINE = function() {
  return this.getToken(ECLParser.NINE, 0)
}

AnynonescapedcharContext.prototype.COLON = function() {
  return this.getToken(ECLParser.COLON, 0)
}

AnynonescapedcharContext.prototype.SEMICOLON = function() {
  return this.getToken(ECLParser.SEMICOLON, 0)
}

AnynonescapedcharContext.prototype.LESS_THAN = function() {
  return this.getToken(ECLParser.LESS_THAN, 0)
}

AnynonescapedcharContext.prototype.EQUALS = function() {
  return this.getToken(ECLParser.EQUALS, 0)
}

AnynonescapedcharContext.prototype.GREATER_THAN = function() {
  return this.getToken(ECLParser.GREATER_THAN, 0)
}

AnynonescapedcharContext.prototype.QUESTION = function() {
  return this.getToken(ECLParser.QUESTION, 0)
}

AnynonescapedcharContext.prototype.AT = function() {
  return this.getToken(ECLParser.AT, 0)
}

AnynonescapedcharContext.prototype.CAP_A = function() {
  return this.getToken(ECLParser.CAP_A, 0)
}

AnynonescapedcharContext.prototype.CAP_B = function() {
  return this.getToken(ECLParser.CAP_B, 0)
}

AnynonescapedcharContext.prototype.CAP_C = function() {
  return this.getToken(ECLParser.CAP_C, 0)
}

AnynonescapedcharContext.prototype.CAP_D = function() {
  return this.getToken(ECLParser.CAP_D, 0)
}

AnynonescapedcharContext.prototype.CAP_E = function() {
  return this.getToken(ECLParser.CAP_E, 0)
}

AnynonescapedcharContext.prototype.CAP_F = function() {
  return this.getToken(ECLParser.CAP_F, 0)
}

AnynonescapedcharContext.prototype.CAP_G = function() {
  return this.getToken(ECLParser.CAP_G, 0)
}

AnynonescapedcharContext.prototype.CAP_H = function() {
  return this.getToken(ECLParser.CAP_H, 0)
}

AnynonescapedcharContext.prototype.CAP_I = function() {
  return this.getToken(ECLParser.CAP_I, 0)
}

AnynonescapedcharContext.prototype.CAP_J = function() {
  return this.getToken(ECLParser.CAP_J, 0)
}

AnynonescapedcharContext.prototype.CAP_K = function() {
  return this.getToken(ECLParser.CAP_K, 0)
}

AnynonescapedcharContext.prototype.CAP_L = function() {
  return this.getToken(ECLParser.CAP_L, 0)
}

AnynonescapedcharContext.prototype.CAP_M = function() {
  return this.getToken(ECLParser.CAP_M, 0)
}

AnynonescapedcharContext.prototype.CAP_N = function() {
  return this.getToken(ECLParser.CAP_N, 0)
}

AnynonescapedcharContext.prototype.CAP_O = function() {
  return this.getToken(ECLParser.CAP_O, 0)
}

AnynonescapedcharContext.prototype.CAP_P = function() {
  return this.getToken(ECLParser.CAP_P, 0)
}

AnynonescapedcharContext.prototype.CAP_Q = function() {
  return this.getToken(ECLParser.CAP_Q, 0)
}

AnynonescapedcharContext.prototype.CAP_R = function() {
  return this.getToken(ECLParser.CAP_R, 0)
}

AnynonescapedcharContext.prototype.CAP_S = function() {
  return this.getToken(ECLParser.CAP_S, 0)
}

AnynonescapedcharContext.prototype.CAP_T = function() {
  return this.getToken(ECLParser.CAP_T, 0)
}

AnynonescapedcharContext.prototype.CAP_U = function() {
  return this.getToken(ECLParser.CAP_U, 0)
}

AnynonescapedcharContext.prototype.CAP_V = function() {
  return this.getToken(ECLParser.CAP_V, 0)
}

AnynonescapedcharContext.prototype.CAP_W = function() {
  return this.getToken(ECLParser.CAP_W, 0)
}

AnynonescapedcharContext.prototype.CAP_X = function() {
  return this.getToken(ECLParser.CAP_X, 0)
}

AnynonescapedcharContext.prototype.CAP_Y = function() {
  return this.getToken(ECLParser.CAP_Y, 0)
}

AnynonescapedcharContext.prototype.CAP_Z = function() {
  return this.getToken(ECLParser.CAP_Z, 0)
}

AnynonescapedcharContext.prototype.LEFT_BRACE = function() {
  return this.getToken(ECLParser.LEFT_BRACE, 0)
}

AnynonescapedcharContext.prototype.RIGHT_BRACE = function() {
  return this.getToken(ECLParser.RIGHT_BRACE, 0)
}

AnynonescapedcharContext.prototype.CARAT = function() {
  return this.getToken(ECLParser.CARAT, 0)
}

AnynonescapedcharContext.prototype.UNDERSCORE = function() {
  return this.getToken(ECLParser.UNDERSCORE, 0)
}

AnynonescapedcharContext.prototype.ACCENT = function() {
  return this.getToken(ECLParser.ACCENT, 0)
}

AnynonescapedcharContext.prototype.A = function() {
  return this.getToken(ECLParser.A, 0)
}

AnynonescapedcharContext.prototype.B = function() {
  return this.getToken(ECLParser.B, 0)
}

AnynonescapedcharContext.prototype.C = function() {
  return this.getToken(ECLParser.C, 0)
}

AnynonescapedcharContext.prototype.D = function() {
  return this.getToken(ECLParser.D, 0)
}

AnynonescapedcharContext.prototype.E = function() {
  return this.getToken(ECLParser.E, 0)
}

AnynonescapedcharContext.prototype.F = function() {
  return this.getToken(ECLParser.F, 0)
}

AnynonescapedcharContext.prototype.G = function() {
  return this.getToken(ECLParser.G, 0)
}

AnynonescapedcharContext.prototype.H = function() {
  return this.getToken(ECLParser.H, 0)
}

AnynonescapedcharContext.prototype.I = function() {
  return this.getToken(ECLParser.I, 0)
}

AnynonescapedcharContext.prototype.J = function() {
  return this.getToken(ECLParser.J, 0)
}

AnynonescapedcharContext.prototype.K = function() {
  return this.getToken(ECLParser.K, 0)
}

AnynonescapedcharContext.prototype.L = function() {
  return this.getToken(ECLParser.L, 0)
}

AnynonescapedcharContext.prototype.M = function() {
  return this.getToken(ECLParser.M, 0)
}

AnynonescapedcharContext.prototype.N = function() {
  return this.getToken(ECLParser.N, 0)
}

AnynonescapedcharContext.prototype.O = function() {
  return this.getToken(ECLParser.O, 0)
}

AnynonescapedcharContext.prototype.P = function() {
  return this.getToken(ECLParser.P, 0)
}

AnynonescapedcharContext.prototype.Q = function() {
  return this.getToken(ECLParser.Q, 0)
}

AnynonescapedcharContext.prototype.R = function() {
  return this.getToken(ECLParser.R, 0)
}

AnynonescapedcharContext.prototype.S = function() {
  return this.getToken(ECLParser.S, 0)
}

AnynonescapedcharContext.prototype.T = function() {
  return this.getToken(ECLParser.T, 0)
}

AnynonescapedcharContext.prototype.U = function() {
  return this.getToken(ECLParser.U, 0)
}

AnynonescapedcharContext.prototype.V = function() {
  return this.getToken(ECLParser.V, 0)
}

AnynonescapedcharContext.prototype.W = function() {
  return this.getToken(ECLParser.W, 0)
}

AnynonescapedcharContext.prototype.X = function() {
  return this.getToken(ECLParser.X, 0)
}

AnynonescapedcharContext.prototype.Y = function() {
  return this.getToken(ECLParser.Y, 0)
}

AnynonescapedcharContext.prototype.Z = function() {
  return this.getToken(ECLParser.Z, 0)
}

AnynonescapedcharContext.prototype.LEFT_CURLY_BRACE = function() {
  return this.getToken(ECLParser.LEFT_CURLY_BRACE, 0)
}

AnynonescapedcharContext.prototype.PIPE = function() {
  return this.getToken(ECLParser.PIPE, 0)
}

AnynonescapedcharContext.prototype.RIGHT_CURLY_BRACE = function() {
  return this.getToken(ECLParser.RIGHT_CURLY_BRACE, 0)
}

AnynonescapedcharContext.prototype.TILDE = function() {
  return this.getToken(ECLParser.TILDE, 0)
}

AnynonescapedcharContext.prototype.UTF8_LETTER = function() {
  return this.getToken(ECLParser.UTF8_LETTER, 0)
}

AnynonescapedcharContext.prototype.enterRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.enterAnynonescapedchar(this)
  }
}

AnynonescapedcharContext.prototype.exitRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.exitAnynonescapedchar(this)
  }
}

AnynonescapedcharContext.prototype.accept = function(visitor) {
  if (visitor instanceof ECLVisitor) {
    return visitor.visitAnynonescapedchar(this)
  } else {
    return visitor.visitChildren(this)
  }
}

ECLParser.AnynonescapedcharContext = AnynonescapedcharContext

ECLParser.prototype.anynonescapedchar = function() {
  var localctx = new AnynonescapedcharContext(this, this._ctx, this.state)
  this.enterRule(localctx, 136, ECLParser.RULE_anynonescapedchar)
  var _la = 0 // Token type
  try {
    this.state = 675
    this._errHandler.sync(this)
    var la_ = this._interp.adaptivePredict(this._input, 52, this._ctx)
    switch (la_) {
      case 1:
        this.enterOuterAlt(localctx, 1)
        this.state = 667
        this.sp()
        break

      case 2:
        this.enterOuterAlt(localctx, 2)
        this.state = 668
        this.htab()
        break

      case 3:
        this.enterOuterAlt(localctx, 3)
        this.state = 669
        this.cr()
        break

      case 4:
        this.enterOuterAlt(localctx, 4)
        this.state = 670
        this.lf()
        break

      case 5:
        this.enterOuterAlt(localctx, 5)
        this.state = 671
        _la = this._input.LA(1)
        if (!(_la === ECLParser.SPACE || _la === ECLParser.EXCLAMATION)) {
          this._errHandler.recoverInline(this)
        } else {
          this._errHandler.reportMatch(this)
          this.consume()
        }
        break

      case 6:
        this.enterOuterAlt(localctx, 6)
        this.state = 672
        _la = this._input.LA(1)
        if (
          !(
            (((_la - 8) & ~0x1f) == 0 &&
              ((1 << (_la - 8)) &
                ((1 << (ECLParser.POUND - 8)) |
                  (1 << (ECLParser.DOLLAR - 8)) |
                  (1 << (ECLParser.PERCENT - 8)) |
                  (1 << (ECLParser.AMPERSAND - 8)) |
                  (1 << (ECLParser.APOSTROPHE - 8)) |
                  (1 << (ECLParser.LEFT_PAREN - 8)) |
                  (1 << (ECLParser.RIGHT_PAREN - 8)) |
                  (1 << (ECLParser.ASTERISK - 8)) |
                  (1 << (ECLParser.PLUS - 8)) |
                  (1 << (ECLParser.COMMA - 8)) |
                  (1 << (ECLParser.DASH - 8)) |
                  (1 << (ECLParser.PERIOD - 8)) |
                  (1 << (ECLParser.SLASH - 8)) |
                  (1 << (ECLParser.ZERO - 8)) |
                  (1 << (ECLParser.ONE - 8)) |
                  (1 << (ECLParser.TWO - 8)) |
                  (1 << (ECLParser.THREE - 8)) |
                  (1 << (ECLParser.FOUR - 8)) |
                  (1 << (ECLParser.FIVE - 8)) |
                  (1 << (ECLParser.SIX - 8)) |
                  (1 << (ECLParser.SEVEN - 8)) |
                  (1 << (ECLParser.EIGHT - 8)) |
                  (1 << (ECLParser.NINE - 8)) |
                  (1 << (ECLParser.COLON - 8)) |
                  (1 << (ECLParser.SEMICOLON - 8)) |
                  (1 << (ECLParser.LESS_THAN - 8)) |
                  (1 << (ECLParser.EQUALS - 8)) |
                  (1 << (ECLParser.GREATER_THAN - 8)) |
                  (1 << (ECLParser.QUESTION - 8)) |
                  (1 << (ECLParser.AT - 8)) |
                  (1 << (ECLParser.CAP_A - 8)) |
                  (1 << (ECLParser.CAP_B - 8)))) !==
                0) ||
            (((_la - 40) & ~0x1f) == 0 &&
              ((1 << (_la - 40)) &
                ((1 << (ECLParser.CAP_C - 40)) |
                  (1 << (ECLParser.CAP_D - 40)) |
                  (1 << (ECLParser.CAP_E - 40)) |
                  (1 << (ECLParser.CAP_F - 40)) |
                  (1 << (ECLParser.CAP_G - 40)) |
                  (1 << (ECLParser.CAP_H - 40)) |
                  (1 << (ECLParser.CAP_I - 40)) |
                  (1 << (ECLParser.CAP_J - 40)) |
                  (1 << (ECLParser.CAP_K - 40)) |
                  (1 << (ECLParser.CAP_L - 40)) |
                  (1 << (ECLParser.CAP_M - 40)) |
                  (1 << (ECLParser.CAP_N - 40)) |
                  (1 << (ECLParser.CAP_O - 40)) |
                  (1 << (ECLParser.CAP_P - 40)) |
                  (1 << (ECLParser.CAP_Q - 40)) |
                  (1 << (ECLParser.CAP_R - 40)) |
                  (1 << (ECLParser.CAP_S - 40)) |
                  (1 << (ECLParser.CAP_T - 40)) |
                  (1 << (ECLParser.CAP_U - 40)) |
                  (1 << (ECLParser.CAP_V - 40)) |
                  (1 << (ECLParser.CAP_W - 40)) |
                  (1 << (ECLParser.CAP_X - 40)) |
                  (1 << (ECLParser.CAP_Y - 40)) |
                  (1 << (ECLParser.CAP_Z - 40)) |
                  (1 << (ECLParser.LEFT_BRACE - 40)))) !==
                0)
          )
        ) {
          this._errHandler.recoverInline(this)
        } else {
          this._errHandler.reportMatch(this)
          this.consume()
        }
        break

      case 7:
        this.enterOuterAlt(localctx, 7)
        this.state = 673
        _la = this._input.LA(1)
        if (
          !(
            (((_la - 66) & ~0x1f) == 0 &&
              ((1 << (_la - 66)) &
                ((1 << (ECLParser.RIGHT_BRACE - 66)) |
                  (1 << (ECLParser.CARAT - 66)) |
                  (1 << (ECLParser.UNDERSCORE - 66)) |
                  (1 << (ECLParser.ACCENT - 66)) |
                  (1 << (ECLParser.A - 66)) |
                  (1 << (ECLParser.B - 66)) |
                  (1 << (ECLParser.C - 66)) |
                  (1 << (ECLParser.D - 66)) |
                  (1 << (ECLParser.E - 66)) |
                  (1 << (ECLParser.F - 66)) |
                  (1 << (ECLParser.G - 66)) |
                  (1 << (ECLParser.H - 66)) |
                  (1 << (ECLParser.I - 66)) |
                  (1 << (ECLParser.J - 66)) |
                  (1 << (ECLParser.K - 66)) |
                  (1 << (ECLParser.L - 66)) |
                  (1 << (ECLParser.M - 66)) |
                  (1 << (ECLParser.N - 66)) |
                  (1 << (ECLParser.O - 66)) |
                  (1 << (ECLParser.P - 66)) |
                  (1 << (ECLParser.Q - 66)) |
                  (1 << (ECLParser.R - 66)) |
                  (1 << (ECLParser.S - 66)) |
                  (1 << (ECLParser.T - 66)) |
                  (1 << (ECLParser.U - 66)) |
                  (1 << (ECLParser.V - 66)) |
                  (1 << (ECLParser.W - 66)) |
                  (1 << (ECLParser.X - 66)) |
                  (1 << (ECLParser.Y - 66)) |
                  (1 << (ECLParser.Z - 66)) |
                  (1 << (ECLParser.LEFT_CURLY_BRACE - 66)) |
                  (1 << (ECLParser.PIPE - 66)))) !==
                0) ||
            _la === ECLParser.RIGHT_CURLY_BRACE ||
            _la === ECLParser.TILDE
          )
        ) {
          this._errHandler.recoverInline(this)
        } else {
          this._errHandler.reportMatch(this)
          this.consume()
        }
        break

      case 8:
        this.enterOuterAlt(localctx, 8)
        this.state = 674
        this.match(ECLParser.UTF8_LETTER)
        break
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re
      this._errHandler.reportError(this, re)
      this._errHandler.recover(this, re)
    } else {
      throw re
    }
  } finally {
    this.exitRule()
  }
  return localctx
}

function EscapedcharContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState)
  this.parser = parser
  this.ruleIndex = ECLParser.RULE_escapedchar
  return this
}

EscapedcharContext.prototype = Object.create(antlr4.ParserRuleContext.prototype)
EscapedcharContext.prototype.constructor = EscapedcharContext

EscapedcharContext.prototype.bs = function(i) {
  if (i === undefined) {
    i = null
  }
  if (i === null) {
    return this.getTypedRuleContexts(BsContext)
  } else {
    return this.getTypedRuleContext(BsContext, i)
  }
}

EscapedcharContext.prototype.qm = function() {
  return this.getTypedRuleContext(QmContext, 0)
}

EscapedcharContext.prototype.enterRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.enterEscapedchar(this)
  }
}

EscapedcharContext.prototype.exitRule = function(listener) {
  if (listener instanceof ECLListener) {
    listener.exitEscapedchar(this)
  }
}

EscapedcharContext.prototype.accept = function(visitor) {
  if (visitor instanceof ECLVisitor) {
    return visitor.visitEscapedchar(this)
  } else {
    return visitor.visitChildren(this)
  }
}

ECLParser.EscapedcharContext = EscapedcharContext

ECLParser.prototype.escapedchar = function() {
  var localctx = new EscapedcharContext(this, this._ctx, this.state)
  this.enterRule(localctx, 138, ECLParser.RULE_escapedchar)
  try {
    this.state = 683
    this._errHandler.sync(this)
    var la_ = this._interp.adaptivePredict(this._input, 53, this._ctx)
    switch (la_) {
      case 1:
        this.enterOuterAlt(localctx, 1)
        this.state = 677
        this.bs()
        this.state = 678
        this.qm()
        break

      case 2:
        this.enterOuterAlt(localctx, 2)
        this.state = 680
        this.bs()
        this.state = 681
        this.bs()
        break
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re
      this._errHandler.reportError(this, re)
      this._errHandler.recover(this, re)
    } else {
      throw re
    }
  } finally {
    this.exitRule()
  }
  return localctx
}

exports.ECLParser = ECLParser
